
ZKZ-Demo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e330  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  0800e4e0  0800e4e0  0001e4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edb4  0800edb4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800edb4  0800edb4  0001edb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edbc  0800edbc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edbc  0800edbc  0001edbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edc0  0800edc0  0001edc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800edc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00005654  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056f0  200056f0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000380ce  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000689a  00000000  00000000  0005819a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002510  00000000  00000000  0005ea38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022b8  00000000  00000000  00060f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009337  00000000  00000000  00063200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e365  00000000  00000000  0006c537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f65a8  00000000  00000000  0009a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00190e44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a298  00000000  00000000  00190e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e4c8 	.word	0x0800e4c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	0800e4c8 	.word	0x0800e4c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile	uint32_t	demo_line_num = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d108      	bne.n	80005aa <HAL_GPIO_EXTI_Callback+0x22>
		tk_printf("Example line no %d\n", ++demo_line_num);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x30>)
 80005a6:	f00c fd1a 	bl	800cfde <tk_printf>
	}
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000b8 	.word	0x200000b8
 80005b8:	0800e4ec 	.word	0x0800e4ec

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f88a 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f838 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fa96 	bl	8000af8 <MX_GPIO_Init>
  MX_CRC_Init();
 80005cc:	f000 f8a0 	bl	8000710 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005d0:	f000 f8b2 	bl	8000738 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005d4:	f000 fa3e 	bl	8000a54 <MX_FMC_Init>
  MX_I2C3_Init();
 80005d8:	f000 f8cc 	bl	8000774 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005dc:	f000 f90a 	bl	80007f4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005e0:	f000 f988 	bl	80008f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005e4:	f000 f9bc 	bl	8000960 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 fa0a 	bl	8000a00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  TK_ILI9341_Init();
 80005ec:	f00c fd72 	bl	800d0d4 <TK_ILI9341_Init>

  /* turn on  green led */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x68>)
 80005f8:	f001 fe90 	bl	800231c <HAL_GPIO_WritePin>


  tk_grs_clear();
 80005fc:	f00c fca8 	bl	800cf50 <tk_grs_clear>
  tk_grs_testscreen();
 8000600:	f00c fcb5 	bl	800cf6e <tk_grs_testscreen>

  tk_printf("Please press blue button to add a next line.\n");
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0x6c>)
 8000606:	f00c fcea 	bl	800cfde <tk_printf>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060a:	f009 fb9b 	bl	8009d44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <main+0x70>)
 8000610:	2100      	movs	r1, #0
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x74>)
 8000614:	f009 fbe0 	bl	8009dd8 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <main+0x78>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f009 fbb5 	bl	8009d8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x66>
 8000624:	40021800 	.word	0x40021800
 8000628:	0800e500 	.word	0x0800e500
 800062c:	0800e578 	.word	0x0800e578
 8000630:	08000d41 	.word	0x08000d41
 8000634:	20004aa4 	.word	0x20004aa4

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00d faae 	bl	800dba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a28      	ldr	r2, [pc, #160]	; (8000708 <SystemClock_Config+0xd0>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd4>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f8f4 	bl	80048b0 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 fb53 	bl	8000d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fb55 	bl	8004da0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006fc:	f000 fb3c 	bl	8000d78 <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	; 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_CRC_Init+0x20>)
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <MX_CRC_Init+0x24>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_CRC_Init+0x20>)
 800071c:	f001 f924 	bl	8001968 <HAL_CRC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000726:	f000 fb27 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20004b54 	.word	0x20004b54
 8000734:	40023000 	.word	0x40023000

08000738 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_DMA2D_Init+0x34>)
 800073e:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <MX_DMA2D_Init+0x38>)
 8000740:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_DMA2D_Init+0x34>)
 8000744:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000748:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_DMA2D_Init+0x34>)
 800074c:	2202      	movs	r2, #2
 800074e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_DMA2D_Init+0x34>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_DMA2D_Init+0x34>)
 8000758:	f001 f922 	bl	80019a0 <HAL_DMA2D_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000762:	f000 fb09 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20004c90 	.word	0x20004c90
 8000770:	4002b000 	.word	0x4002b000

08000774 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C3_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C3_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C3_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C3_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C3_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C3_Init+0x74>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007b2:	f003 fb55 	bl	8003e60 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fadc 	bl	8000d78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007c4:	f003 fc90 	bl	80040e8 <HAL_I2CEx_ConfigAnalogFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007ce:	f000 fad3 	bl	8000d78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_I2C3_Init+0x74>)
 80007d6:	f003 fcc3 	bl	8004160 <HAL_I2CEx_ConfigDigitalFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 faca 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20004aa8 	.word	0x20004aa8
 80007ec:	40005c00 	.word	0x40005c00
 80007f0:	000186a0 	.word	0x000186a0

080007f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2234      	movs	r2, #52	; 0x34
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f00d f9d1 	bl	800dba8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000808:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <MX_LTDC_Init+0xfc>)
 800080a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800080c:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_LTDC_Init+0xf8>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000824:	4b31      	ldr	r3, [pc, #196]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000826:	2209      	movs	r2, #9
 8000828:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_LTDC_Init+0xf8>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000830:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000832:	221d      	movs	r2, #29
 8000834:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000838:	2203      	movs	r2, #3
 800083a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_LTDC_Init+0xf8>)
 800083e:	f240 120d 	movw	r2, #269	; 0x10d
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000846:	f240 1243 	movw	r2, #323	; 0x143
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_LTDC_Init+0xf8>)
 800084e:	f240 1217 	movw	r2, #279	; 0x117
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000856:	f240 1247 	movw	r2, #327	; 0x147
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 255;
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_LTDC_Init+0xf8>)
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 255;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_LTDC_Init+0xf8>)
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000874:	481d      	ldr	r0, [pc, #116]	; (80008ec <MX_LTDC_Init+0xf8>)
 8000876:	f003 fcb3 	bl	80041e0 <HAL_LTDC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000880:	f000 fa7a 	bl	8000d78 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000888:	23f0      	movs	r3, #240	; 0xf0
 800088a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000890:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000894:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800089a:	23ff      	movs	r3, #255	; 0xff
 800089c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008a8:	2307      	movs	r3, #7
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008ac:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008b2:	23f0      	movs	r3, #240	; 0xf0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_LTDC_Init+0xf8>)
 80008d6:	f003 fe15 	bl	8004504 <HAL_LTDC_ConfigLayer>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008e0:	f000 fa4a 	bl	8000d78 <Error_Handler>
  /* USER CODE BEGIN LTDC_Init 2 */


  /* USER CODE END LTDC_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3738      	adds	r7, #56	; 0x38
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20004b5c 	.word	0x20004b5c
 80008f0:	40016800 	.word	0x40016800

080008f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI5_Init+0x64>)
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <MX_SPI5_Init+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI5_Init+0x64>)
 8000900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000904:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI5_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI5_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI5_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI5_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI5_Init+0x64>)
 8000928:	2218      	movs	r2, #24
 800092a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI5_Init+0x64>)
 8000940:	220a      	movs	r2, #10
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI5_Init+0x64>)
 8000946:	f004 fe4b 	bl	80055e0 <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000950:	f000 fa12 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20004afc 	.word	0x20004afc
 800095c:	40015000 	.word	0x40015000

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM1_Init+0x98>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <MX_TIM1_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_TIM1_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_TIM1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM1_Init+0x98>)
 8000990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_TIM1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_TIM1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_TIM1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_TIM1_Init+0x98>)
 80009aa:	f005 f8a9 	bl	8005b00 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f9e0 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_TIM1_Init+0x98>)
 80009c6:	f005 fa63 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009d0:	f000 f9d2 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM1_Init+0x98>)
 80009e2:	f005 fc7f 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009ec:	f000 f9c4 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20004c48 	.word	0x20004c48
 80009fc:	40010000 	.word	0x40010000

08000a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_USART1_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a38:	f005 fce4 	bl	8006404 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a42:	f000 f999 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20004c04 	.word	0x20004c04
 8000a50:	40011000 	.word	0x40011000

08000a54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <MX_FMC_Init+0xa0>)
 8000a70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a86:	2210      	movs	r2, #16
 8000a88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_FMC_Init+0x9c>)
 8000ad6:	f004 fd4f 	bl	8005578 <HAL_SDRAM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ae0:	f000 f94a 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  TK_DIMM_InitSequence();
 8000ae4:	f00c fc98 	bl	800d418 <TK_DIMM_InitSequence>
  /* USER CODE END FMC_Init 2 */
}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20004cd0 	.word	0x20004cd0
 8000af4:	a0000140 	.word	0xa0000140

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	4b85      	ldr	r3, [pc, #532]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a84      	ldr	r2, [pc, #528]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b82      	ldr	r3, [pc, #520]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	4b7e      	ldr	r3, [pc, #504]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a7d      	ldr	r2, [pc, #500]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b7b      	ldr	r3, [pc, #492]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	4b77      	ldr	r3, [pc, #476]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a76      	ldr	r2, [pc, #472]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a68      	ldr	r2, [pc, #416]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b62      	ldr	r3, [pc, #392]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a61      	ldr	r2, [pc, #388]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a5a      	ldr	r2, [pc, #360]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b54      	ldr	r3, [pc, #336]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a53      	ldr	r2, [pc, #332]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <MX_GPIO_Init+0x230>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2116      	movs	r1, #22
 8000bf2:	484e      	ldr	r0, [pc, #312]	; (8000d2c <MX_GPIO_Init+0x234>)
 8000bf4:	f001 fb92 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	484c      	ldr	r0, [pc, #304]	; (8000d30 <MX_GPIO_Init+0x238>)
 8000bfe:	f001 fb8d 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c08:	484a      	ldr	r0, [pc, #296]	; (8000d34 <MX_GPIO_Init+0x23c>)
 8000c0a:	f001 fb87 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c14:	4848      	ldr	r0, [pc, #288]	; (8000d38 <MX_GPIO_Init+0x240>)
 8000c16:	f001 fb81 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c1a:	2316      	movs	r3, #22
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	483e      	ldr	r0, [pc, #248]	; (8000d2c <MX_GPIO_Init+0x234>)
 8000c32:	f001 f9c7 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c36:	2301      	movs	r3, #1
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4839      	ldr	r0, [pc, #228]	; (8000d30 <MX_GPIO_Init+0x238>)
 8000c4c:	f001 f9ba 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c50:	f248 0306 	movw	r3, #32774	; 0x8006
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c56:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <MX_GPIO_Init+0x238>)
 8000c68:	f001 f9ac 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	482b      	ldr	r0, [pc, #172]	; (8000d30 <MX_GPIO_Init+0x238>)
 8000c84:	f001 f99e 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4823      	ldr	r0, [pc, #140]	; (8000d2c <MX_GPIO_Init+0x234>)
 8000c9e:	f001 f991 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <MX_GPIO_Init+0x244>)
 8000cb6:	f001 f985 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x23c>)
 8000cd0:	f001 f978 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cd4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4811      	ldr	r0, [pc, #68]	; (8000d34 <MX_GPIO_Init+0x23c>)
 8000cee:	f001 f969 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000cf2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0x240>)
 8000d0c:	f001 f95a 	bl	8001fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2105      	movs	r1, #5
 8000d14:	2006      	movs	r0, #6
 8000d16:	f000 fdfd 	bl	8001914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d1a:	2006      	movs	r0, #6
 8000d1c:	f000 fe16 	bl	800194c <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	40021800 	.word	0x40021800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d48:	f00c fbc2 	bl	800d4d0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f009 f8d5 	bl	8009efc <osDelay>
 8000d52:	e7fb      	b.n	8000d4c <StartDefaultTask+0xc>

08000d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d66:	f000 fcd9 	bl	800171c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Red LED
  HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <Error_Handler+0x18>)
 8000d88:	f001 fac8 	bl	800231c <HAL_GPIO_WritePin>

  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x14>
 8000d8e:	bf00      	nop
 8000d90:	40021800 	.word	0x40021800

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x54>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_MspInit+0x54>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x54>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_MspInit+0x54>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_MspInit+0x54>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f000 fd9b 	bl	8001914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_CRC_MspInit+0x3c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023000 	.word	0x40023000
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_DMA2D_MspInit+0x48>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d115      	bne.n	8000e6e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	205a      	movs	r0, #90	; 0x5a
 8000e64:	f000 fd56 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e68:	205a      	movs	r0, #90	; 0x5a
 8000e6a:	f000 fd6f 	bl	800194c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	4002b000 	.word	0x4002b000
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <HAL_I2C_MspInit+0xc4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d14b      	bne.n	8000f3a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eec:	2304      	movs	r3, #4
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4815      	ldr	r0, [pc, #84]	; (8000f4c <HAL_I2C_MspInit+0xcc>)
 8000ef8:	f001 f864 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <HAL_I2C_MspInit+0xd0>)
 8000f1a:	f001 f853 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40005c00 	.word	0x40005c00
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09a      	sub	sp, #104	; 0x68
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	2230      	movs	r2, #48	; 0x30
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00c fe17 	bl	800dba8 <memset>
  if(hltdc->Instance==LTDC)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a99      	ldr	r2, [pc, #612]	; (80011e4 <HAL_LTDC_MspInit+0x290>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	f040 812b 	bne.w	80011dc <HAL_LTDC_MspInit+0x288>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f86:	2308      	movs	r3, #8
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000f8a:	23c0      	movs	r3, #192	; 0xc0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 f92d 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000fa8:	f7ff fee6 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	4a8c      	ldr	r2, [pc, #560]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fba:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbc:	4b8a      	ldr	r3, [pc, #552]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fc4:	623b      	str	r3, [r7, #32]
 8000fc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	4b86      	ldr	r3, [pc, #536]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a85      	ldr	r2, [pc, #532]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b83      	ldr	r3, [pc, #524]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a7e      	ldr	r2, [pc, #504]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b7c      	ldr	r3, [pc, #496]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a77      	ldr	r2, [pc, #476]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a70      	ldr	r2, [pc, #448]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
 8001048:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	4a62      	ldr	r2, [pc, #392]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6313      	str	r3, [r2, #48]	; 0x30
 8001064:	4b60      	ldr	r3, [pc, #384]	; (80011e8 <HAL_LTDC_MspInit+0x294>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001074:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	2302      	movs	r3, #2
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001082:	230e      	movs	r3, #14
 8001084:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108a:	4619      	mov	r1, r3
 800108c:	4857      	ldr	r0, [pc, #348]	; (80011ec <HAL_LTDC_MspInit+0x298>)
 800108e:	f000 ff99 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001092:	f641 0358 	movw	r3, #6232	; 0x1858
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2302      	movs	r3, #2
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a4:	230e      	movs	r3, #14
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	4850      	ldr	r0, [pc, #320]	; (80011f0 <HAL_LTDC_MspInit+0x29c>)
 80010b0:	f000 ff88 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010b4:	2303      	movs	r3, #3
 80010b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	2302      	movs	r3, #2
 80010c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010c4:	2309      	movs	r3, #9
 80010c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	4849      	ldr	r0, [pc, #292]	; (80011f4 <HAL_LTDC_MspInit+0x2a0>)
 80010d0:	f000 ff78 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2302      	movs	r3, #2
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e6:	230e      	movs	r3, #14
 80010e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ee:	4619      	mov	r1, r3
 80010f0:	4840      	ldr	r0, [pc, #256]	; (80011f4 <HAL_LTDC_MspInit+0x2a0>)
 80010f2:	f000 ff67 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2302      	movs	r3, #2
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001108:	230e      	movs	r3, #14
 800110a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001110:	4619      	mov	r1, r3
 8001112:	4839      	ldr	r0, [pc, #228]	; (80011f8 <HAL_LTDC_MspInit+0x2a4>)
 8001114:	f000 ff56 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2302      	movs	r3, #2
 8001126:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001128:	230e      	movs	r3, #14
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001130:	4619      	mov	r1, r3
 8001132:	4832      	ldr	r0, [pc, #200]	; (80011fc <HAL_LTDC_MspInit+0x2a8>)
 8001134:	f000 ff46 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R2_Pin;
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800114a:	230e      	movs	r3, #14
 800114c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001152:	4619      	mov	r1, r3
 8001154:	4829      	ldr	r0, [pc, #164]	; (80011fc <HAL_LTDC_MspInit+0x2a8>)
 8001156:	f000 ff35 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 800115a:	2308      	movs	r3, #8
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2302      	movs	r3, #2
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116a:	230e      	movs	r3, #14
 800116c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <HAL_LTDC_MspInit+0x2ac>)
 8001176:	f000 ff25 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B2_Pin;
 800117a:	2340      	movs	r3, #64	; 0x40
 800117c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118a:	230e      	movs	r3, #14
 800118c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001192:	4619      	mov	r1, r3
 8001194:	481a      	ldr	r0, [pc, #104]	; (8001200 <HAL_LTDC_MspInit+0x2ac>)
 8001196:	f000 ff15 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800119a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2302      	movs	r3, #2
 80011aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ac:	2309      	movs	r3, #9
 80011ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <HAL_LTDC_MspInit+0x2a4>)
 80011b8:	f000 ff04 	bl	8001fc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2105      	movs	r1, #5
 80011c0:	2058      	movs	r0, #88	; 0x58
 80011c2:	f000 fba7 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011c6:	2058      	movs	r0, #88	; 0x58
 80011c8:	f000 fbc0 	bl	800194c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2105      	movs	r1, #5
 80011d0:	2059      	movs	r0, #89	; 0x59
 80011d2:	f000 fb9f 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011d6:	2059      	movs	r0, #89	; 0x59
 80011d8:	f000 fbb8 	bl	800194c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3768      	adds	r7, #104	; 0x68
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40016800 	.word	0x40016800
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40021400 	.word	0x40021400
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00

08001204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_SPI_MspInit+0x84>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d12c      	bne.n	8001280 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_SPI_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_SPI_MspInit+0x88>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_SPI_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800125e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001270:	2305      	movs	r3, #5
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_SPI_MspInit+0x8c>)
 800127c:	f000 fea2 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40015000 	.word	0x40015000
 800128c:	40023800 	.word	0x40023800
 8001290:	40021400 	.word	0x40021400

08001294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_TIM_Base_MspInit+0x3c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10d      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_TIM_Base_MspInit+0x40>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_TIM_Base_MspInit+0x40>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40010000 	.word	0x40010000
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <HAL_UART_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12c      	bne.n	8001354 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_UART_MspInit+0x88>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_UART_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a10      	ldr	r2, [pc, #64]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001344:	2307      	movs	r3, #7
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_UART_MspInit+0x8c>)
 8001350:	f000 fe38 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40011000 	.word	0x40011000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000

08001368 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_FMC_MspInit+0x104>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d16f      	bne.n	8001464 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001384:	4b39      	ldr	r3, [pc, #228]	; (800146c <HAL_FMC_MspInit+0x104>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_FMC_MspInit+0x108>)
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	4a37      	ldr	r2, [pc, #220]	; (8001470 <HAL_FMC_MspInit+0x108>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6393      	str	r3, [r2, #56]	; 0x38
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_FMC_MspInit+0x108>)
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013aa:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b8:	230c      	movs	r3, #12
 80013ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	482c      	ldr	r0, [pc, #176]	; (8001474 <HAL_FMC_MspInit+0x10c>)
 80013c2:	f000 fdff 	bl	8001fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013c6:	2301      	movs	r3, #1
 80013c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4826      	ldr	r0, [pc, #152]	; (8001478 <HAL_FMC_MspInit+0x110>)
 80013e0:	f000 fdf0 	bl	8001fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80013e8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	230c      	movs	r3, #12
 80013f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	481f      	ldr	r0, [pc, #124]	; (800147c <HAL_FMC_MspInit+0x114>)
 8001400:	f000 fde0 	bl	8001fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001404:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001408:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	230c      	movs	r3, #12
 8001418:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <HAL_FMC_MspInit+0x118>)
 8001420:	f000 fdd0 	bl	8001fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001424:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001428:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001436:	230c      	movs	r3, #12
 8001438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <HAL_FMC_MspInit+0x11c>)
 8001440:	f000 fdc0 	bl	8001fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001444:	2360      	movs	r3, #96	; 0x60
 8001446:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001454:	230c      	movs	r3, #12
 8001456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <HAL_FMC_MspInit+0x120>)
 800145e:	f000 fdb1 	bl	8001fc4 <HAL_GPIO_Init>
 8001462:	e000      	b.n	8001466 <HAL_FMC_MspInit+0xfe>
    return;
 8001464:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000bc 	.word	0x200000bc
 8001470:	40023800 	.word	0x40023800
 8001474:	40021400 	.word	0x40021400
 8001478:	40020800 	.word	0x40020800
 800147c:	40021800 	.word	0x40021800
 8001480:	40021000 	.word	0x40021000
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40020400 	.word	0x40020400

0800148c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001494:	f7ff ff68 	bl	8001368 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2036      	movs	r0, #54	; 0x36
 80014b6:	f000 fa2d 	bl	8001914 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014ba:	2036      	movs	r0, #54	; 0x36
 80014bc:	f000 fa46 	bl	800194c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_InitTick+0xa4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_InitTick+0xa4>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6413      	str	r3, [r2, #64]	; 0x40
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_InitTick+0xa4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fe56 	bl	8005198 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014ec:	f003 fe2c 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <HAL_InitTick+0xa8>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3b01      	subs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_InitTick+0xac>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <HAL_InitTick+0xb0>)
 8001508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_InitTick+0xac>)
 800150c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_InitTick+0xac>)
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_InitTick+0xac>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_InitTick+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <HAL_InitTick+0xac>)
 8001526:	f004 faeb 	bl	8005b00 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <HAL_InitTick+0xac>)
 8001532:	f004 fb35 	bl	8005ba0 <HAL_TIM_Base_Start_IT>
 8001536:	4603      	mov	r3, r0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	431bde83 	.word	0x431bde83
 800154c:	20004d04 	.word	0x20004d04
 8001550:	40001000 	.word	0x40001000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A0_Pin);
 8001584:	2001      	movs	r0, #1
 8001586:	f000 fee3 	bl	8002350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM6_DAC_IRQHandler+0x10>)
 8001596:	f004 fb73 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20004d04 	.word	0x20004d04

080015a4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <OTG_HS_IRQHandler+0x10>)
 80015aa:	f001 f953 	bl	8002854 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200053dc 	.word	0x200053dc

080015b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <LTDC_IRQHandler+0x10>)
 80015be:	f002 fedf 	bl	8004380 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20004b5c 	.word	0x20004b5c

080015cc <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <LTDC_ER_IRQHandler+0x10>)
 80015d2:	f002 fed5 	bl	8004380 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20004b5c 	.word	0x20004b5c

080015e0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <DMA2D_IRQHandler+0x10>)
 80015e6:	f000 fb40 	bl	8001c6a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20004c90 	.word	0x20004c90

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f00c fa5c 	bl	800dae0 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20030000 	.word	0x20030000
 8001654:	00000400 	.word	0x00000400
 8001658:	200000c0 	.word	0x200000c0
 800165c:	200056f0 	.word	0x200056f0

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f00c fa1b 	bl	800daec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ff81 	bl	80005bc <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80016c8:	0800edc4 	.word	0x0800edc4
  ldr r2, =_sbss
 80016cc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80016d0:	200056f0 	.word	0x200056f0

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f8fc 	bl	80018fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	200f      	movs	r0, #15
 8001708:	f7ff feca 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fb42 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008
 8001740:	20004d4c 	.word	0x20004d4c

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20004d4c 	.word	0x20004d4c

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff4c 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001926:	f7ff ff61 	bl	80017ec <__NVIC_GetPriorityGrouping>
 800192a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f7ff ffb1 	bl	8001898 <NVIC_EncodePriority>
 8001936:	4602      	mov	r2, r0
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff80 	bl	8001844 <__NVIC_SetPriority>
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff54 	bl	8001808 <__NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	795b      	ldrb	r3, [r3, #5]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fa2e 	bl	8000dec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e03b      	b.n	8001a2a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fa32 	bl	8000e30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	f023 0107 	bic.w	r1, r3, #7
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68d1      	ldr	r1, [r2, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA2D_Start_IT>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                     uint32_t Height)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_DMA2D_Start_IT+0x1c>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e020      	b.n	8001a90 <HAL_DMA2D_Start_IT+0x5e>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fa0e 	bl	8001e8a <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC | DMA2D_IT_TE | DMA2D_IT_CE);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d056      	beq.n	8001b62 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fe46 	bl	8001744 <HAL_GetTick>
 8001ab8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001aba:	e04b      	b.n	8001b54 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2221      	movs	r2, #33	; 0x21
 8001b00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0a5      	b.n	8001c62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d01a      	beq.n	8001b54 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b1e:	f7ff fe11 	bl	8001744 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d302      	bcc.n	8001b34 <HAL_DMA2D_PollForTransfer+0x9c>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10f      	bne.n	8001b54 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	f043 0220 	orr.w	r2, r3, #32
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e086      	b.n	8001c62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ac      	beq.n	8001abc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d061      	beq.n	8001c48 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fdde 	bl	8001744 <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001b8a:	e056      	b.n	8001c3a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02e      	beq.n	8001bfc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	f043 0204 	orr.w	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	f043 0202 	orr.w	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2229      	movs	r2, #41	; 0x29
 8001be6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e032      	b.n	8001c62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c02:	d01a      	beq.n	8001c3a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7ff fd9e 	bl	8001744 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d302      	bcc.n	8001c1a <HAL_DMA2D_PollForTransfer+0x182>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1e:	f043 0220 	orr.w	r2, r3, #32
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e013      	b.n	8001c62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0a1      	beq.n	8001b8c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2212      	movs	r2, #18
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d026      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d021      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d026      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d021      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2220      	movs	r2, #32
 8001d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	f043 0202 	orr.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d026      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	f043 0204 	orr.w	r2, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00e      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f853 	bl	8001e62 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d024      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01f      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01f      	beq.n	8001e5a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01a      	beq.n	8001e5a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f80e 	bl	8001e76 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b08b      	sub	sp, #44	; 0x2c
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ec2:	d174      	bne.n	8001fae <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001eca:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ed2:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001eda:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	e053      	b.n	8001fa4 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d106      	bne.n	8001f12 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e048      	b.n	8001fa4 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d111      	bne.n	8001f3e <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	0cdb      	lsrs	r3, r3, #19
 8001f1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	0a9b      	lsrs	r3, r3, #10
 8001f24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	08db      	lsrs	r3, r3, #3
 8001f2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	02db      	lsls	r3, r3, #11
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e032      	b.n	8001fa4 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d117      	bne.n	8001f76 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	0fdb      	lsrs	r3, r3, #31
 8001f4a:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	0cdb      	lsrs	r3, r3, #19
 8001f50:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	0adb      	lsrs	r3, r3, #11
 8001f56:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	08db      	lsrs	r3, r3, #3
 8001f5c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	431a      	orrs	r2, r3
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	03db      	lsls	r3, r3, #15
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
 8001f74:	e016      	b.n	8001fa4 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	0f1b      	lsrs	r3, r3, #28
 8001f7a:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	0d1b      	lsrs	r3, r3, #20
 8001f80:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	0b1b      	lsrs	r3, r3, #12
 8001f86:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	011a      	lsls	r2, r3, #4
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	431a      	orrs	r2, r3
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	031b      	lsls	r3, r3, #12
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001fac:	e003      	b.n	8001fb6 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	372c      	adds	r7, #44	; 0x2c
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e177      	b.n	80022d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8166 	bne.w	80022ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d005      	beq.n	8002016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002012:	2b02      	cmp	r3, #2
 8002014:	d130      	bne.n	8002078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2203      	movs	r2, #3
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b03      	cmp	r3, #3
 8002082:	d017      	beq.n	80020b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d123      	bne.n	8002108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	69b9      	ldr	r1, [r7, #24]
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80c0 	beq.w	80022ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_GPIO_Init+0x324>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002166:	4a61      	ldr	r2, [pc, #388]	; (80022ec <HAL_GPIO_Init+0x328>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_GPIO_Init+0x32c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d037      	beq.n	8002202 <HAL_GPIO_Init+0x23e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_GPIO_Init+0x330>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d031      	beq.n	80021fe <HAL_GPIO_Init+0x23a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_GPIO_Init+0x334>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <HAL_GPIO_Init+0x236>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_GPIO_Init+0x338>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x232>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a54      	ldr	r2, [pc, #336]	; (8002300 <HAL_GPIO_Init+0x33c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x22e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a53      	ldr	r2, [pc, #332]	; (8002304 <HAL_GPIO_Init+0x340>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x22a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_GPIO_Init+0x344>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x348>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_GPIO_Init+0x34c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x350>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x21a>
 80021da:	2309      	movs	r3, #9
 80021dc:	e012      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021de:	230a      	movs	r3, #10
 80021e0:	e010      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e2:	2308      	movs	r3, #8
 80021e4:	e00e      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00c      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00a      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x240>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x328>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002246:	4a34      	ldr	r2, [pc, #208]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_GPIO_Init+0x354>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_GPIO_Init+0x354>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x354>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_GPIO_Init+0x354>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f ae84 	bls.w	8001fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40022000 	.word	0x40022000
 8002314:	40022400 	.word	0x40022400
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f90a 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b08f      	sub	sp, #60	; 0x3c
 8002384:	af0a      	add	r7, sp, #40	; 0x28
 8002386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e054      	b.n	800243c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f00b f8e3 	bl	800d578 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 fbe0 	bl	8006b96 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	687e      	ldr	r6, [r7, #4]
 80023de:	466d      	mov	r5, sp
 80023e0:	f106 0410 	add.w	r4, r6, #16
 80023e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f4:	1d33      	adds	r3, r6, #4
 80023f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f004 fb5a 	bl	8006ab2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f004 fbd7 	bl	8006bb8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	687e      	ldr	r6, [r7, #4]
 8002412:	466d      	mov	r5, sp
 8002414:	f106 0410 	add.w	r4, r6, #16
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002424:	e885 0003 	stmia.w	r5, {r0, r1}
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f004 fd3d 	bl	8006eac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002444 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af04      	add	r7, sp, #16
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	70fb      	strb	r3, [r7, #3]
 8002456:	460b      	mov	r3, r1
 8002458:	70bb      	strb	r3, [r7, #2]
 800245a:	4613      	mov	r3, r2
 800245c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_HCD_HC_Init+0x28>
 8002468:	2302      	movs	r3, #2
 800246a:	e076      	b.n	800255a <HAL_HCD_HC_Init+0x116>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	333d      	adds	r3, #61	; 0x3d
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3338      	adds	r3, #56	; 0x38
 8002494:	787a      	ldrb	r2, [r7, #1]
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3340      	adds	r3, #64	; 0x40
 80024a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024a8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3339      	adds	r3, #57	; 0x39
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	333f      	adds	r3, #63	; 0x3f
 80024ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80024ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024d8:	b2d0      	uxtb	r0, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333a      	adds	r3, #58	; 0x3a
 80024e6:	4602      	mov	r2, r0
 80024e8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80024ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da09      	bge.n	8002506 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	333b      	adds	r3, #59	; 0x3b
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e008      	b.n	8002518 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333b      	adds	r3, #59	; 0x3b
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	333c      	adds	r3, #60	; 0x3c
 8002526:	f897 2020 	ldrb.w	r2, [r7, #32]
 800252a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	787c      	ldrb	r4, [r7, #1]
 8002532:	78ba      	ldrb	r2, [r7, #2]
 8002534:	78f9      	ldrb	r1, [r7, #3]
 8002536:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4623      	mov	r3, r4
 8002548:	f004 fe2a 	bl	80071a0 <USB_HC_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}

08002562 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_HCD_HC_Halt+0x1e>
 800257c:	2302      	movs	r3, #2
 800257e:	e00f      	b.n	80025a0 <HAL_HCD_HC_Halt+0x3e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f005 f866 	bl	8007662 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	70fb      	strb	r3, [r7, #3]
 80025ba:	460b      	mov	r3, r1
 80025bc:	70bb      	strb	r3, [r7, #2]
 80025be:	4613      	mov	r3, r2
 80025c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	333b      	adds	r3, #59	; 0x3b
 80025d0:	78ba      	ldrb	r2, [r7, #2]
 80025d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	333f      	adds	r3, #63	; 0x3f
 80025e2:	787a      	ldrb	r2, [r7, #1]
 80025e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80025e6:	7c3b      	ldrb	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d112      	bne.n	8002612 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3342      	adds	r3, #66	; 0x42
 80025fa:	2203      	movs	r2, #3
 80025fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333d      	adds	r3, #61	; 0x3d
 800260c:	7f3a      	ldrb	r2, [r7, #28]
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e008      	b.n	8002624 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	3342      	adds	r3, #66	; 0x42
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b03      	cmp	r3, #3
 8002628:	f200 80c6 	bhi.w	80027b8 <HAL_HCD_HC_SubmitRequest+0x210>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002645 	.word	0x08002645
 8002638:	080027a5 	.word	0x080027a5
 800263c:	080026a9 	.word	0x080026a9
 8002640:	08002727 	.word	0x08002727
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002644:	7c3b      	ldrb	r3, [r7, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 80b8 	bne.w	80027bc <HAL_HCD_HC_SubmitRequest+0x214>
 800264c:	78bb      	ldrb	r3, [r7, #2]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80b4 	bne.w	80027bc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002654:	8b3b      	ldrh	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3355      	adds	r3, #85	; 0x55
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3355      	adds	r3, #85	; 0x55
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3342      	adds	r3, #66	; 0x42
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002692:	e093      	b.n	80027bc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	3342      	adds	r3, #66	; 0x42
 80026a2:	2202      	movs	r2, #2
 80026a4:	701a      	strb	r2, [r3, #0]
      break;
 80026a6:	e089      	b.n	80027bc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80026a8:	78bb      	ldrb	r3, [r7, #2]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11d      	bne.n	80026ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3355      	adds	r3, #85	; 0x55
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3342      	adds	r3, #66	; 0x42
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80026d4:	e073      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3342      	adds	r3, #66	; 0x42
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
      break;
 80026e8:	e069      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	3354      	adds	r3, #84	; 0x54
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3342      	adds	r3, #66	; 0x42
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
      break;
 8002710:	e055      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3342      	adds	r3, #66	; 0x42
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
      break;
 8002724:	e04b      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11d      	bne.n	8002768 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3355      	adds	r3, #85	; 0x55
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3342      	adds	r3, #66	; 0x42
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002752:	e034      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3342      	adds	r3, #66	; 0x42
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
      break;
 8002766:	e02a      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3354      	adds	r3, #84	; 0x54
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3342      	adds	r3, #66	; 0x42
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
      break;
 800278e:	e016      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3342      	adds	r3, #66	; 0x42
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
      break;
 80027a2:	e00c      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3342      	adds	r3, #66	; 0x42
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
      break;
 80027b6:	e002      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80027b8:	bf00      	nop
 80027ba:	e000      	b.n	80027be <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80027bc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3344      	adds	r3, #68	; 0x44
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	8b3a      	ldrh	r2, [r7, #24]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	202c      	movs	r0, #44	; 0x2c
 80027d8:	fb00 f303 	mul.w	r3, r0, r3
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	; 0x4c
 80027e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3360      	adds	r3, #96	; 0x60
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3350      	adds	r3, #80	; 0x50
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3339      	adds	r3, #57	; 0x39
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3361      	adds	r3, #97	; 0x61
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	222c      	movs	r2, #44	; 0x2c
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	3338      	adds	r3, #56	; 0x38
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	18d1      	adds	r1, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	f004 fdba 	bl	80073bc <USB_HC_StartXfer>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop

08002854 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fadd 	bl	8006e2a <USB_GetMode>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	f040 80f6 	bne.w	8002a64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f004 fac1 	bl	8006e04 <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80ec 	beq.w	8002a62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fab8 	bl	8006e04 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289e:	d104      	bne.n	80028aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 faa8 	bl	8006e04 <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028be:	d104      	bne.n	80028ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fa98 	bl	8006e04 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028de:	d104      	bne.n	80028ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fa88 	bl	8006e04 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d103      	bne.n	8002906 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fa7a 	bl	8006e04 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291a:	d11c      	bne.n	8002956 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002924:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002936:	2110      	movs	r1, #16
 8002938:	6938      	ldr	r0, [r7, #16]
 800293a:	f004 f989 	bl	8006c50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800293e:	6938      	ldr	r0, [r7, #16]
 8002940:	f004 f9aa 	bl	8006c98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fb62 	bl	8007014 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f00a fe8b 	bl	800d66c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fa52 	bl	8006e04 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296a:	d102      	bne.n	8002972 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 fa03 	bl	8003d78 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f004 fa44 	bl	8006e04 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b08      	cmp	r3, #8
 8002984:	d106      	bne.n	8002994 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f00a fe54 	bl	800d634 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2208      	movs	r2, #8
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fa33 	bl	8006e04 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d101      	bne.n	80029ac <HAL_HCD_IRQHandler+0x158>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_HCD_IRQHandler+0x15a>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0210 	bic.w	r2, r2, #16
 80029c0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 f906 	bl	8003bd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0210 	orr.w	r2, r2, #16
 80029d6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fa11 	bl	8006e04 <USB_ReadInterrupts>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ec:	d13a      	bne.n	8002a64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fe24 	bl	8007640 <USB_HC_ReadInterrupt>
 80029f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e025      	b.n	8002a4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2a:	d106      	bne.n	8002a3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8ab 	bl	8002b8e <HCD_HC_IN_IRQHandler>
 8002a38:	e005      	b.n	8002a46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fcc6 	bl	80033d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3d4      	bcc.n	8002a00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	e000      	b.n	8002a64 <HAL_HCD_IRQHandler+0x210>
      return;
 8002a62:	bf00      	nop
    }
  }
}
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_HCD_Start+0x16>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e013      	b.n	8002aa8 <HAL_HCD_Start+0x3e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fb24 	bl	80070dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 f86b 	bl	8006b74 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_HCD_Stop+0x16>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e00d      	b.n	8002ae2 <HAL_HCD_Stop+0x32>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 ff1e 	bl	8007914 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 fac6 	bl	8007088 <USB_ResetPort>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3360      	adds	r3, #96	; 0x60
 8002b20:	781b      	ldrb	r3, [r3, #0]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3350      	adds	r3, #80	; 0x50
 8002b48:	681b      	ldr	r3, [r3, #0]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fb0a 	bl	800717c <USB_GetCurrentFrame>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fae5 	bl	800714e <USB_GetHostSpeed>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d119      	bne.n	8002bf2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2304      	movs	r3, #4
 8002bce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	60d3      	str	r3, [r2, #12]
 8002bf0:	e101      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c08:	d12b      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3361      	adds	r3, #97	; 0x61
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	0151      	lsls	r1, r2, #5
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	440a      	add	r2, r1
 8002c46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fd01 	bl	8007662 <USB_HC_Halt>
 8002c60:	e0c9      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d109      	bne.n	8002c8c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	2320      	movs	r3, #32
 8002c88:	6093      	str	r3, [r2, #8]
 8002c8a:	e0b4      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d133      	bne.n	8002d0a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	0151      	lsls	r1, r2, #5
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	440a      	add	r2, r1
 8002cb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3361      	adds	r3, #97	; 0x61
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2310      	movs	r3, #16
 8002ce4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 fcad 	bl	8007662 <USB_HC_Halt>
 8002d08:	e075      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d134      	bne.n	8002d8c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	0151      	lsls	r1, r2, #5
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	440a      	add	r2, r1
 8002d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3361      	adds	r3, #97	; 0x61
 8002d50:	2208      	movs	r2, #8
 8002d52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2310      	movs	r3, #16
 8002d64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d78:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f004 fc6c 	bl	8007662 <USB_HC_Halt>
 8002d8a:	e034      	b.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d129      	bne.n	8002df6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3361      	adds	r3, #97	; 0x61
 8002dd0:	2206      	movs	r2, #6
 8002dd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fc3f 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	461a      	mov	r2, r3
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0c:	d122      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	0151      	lsls	r1, r2, #5
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	440a      	add	r2, r1
 8002e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fc12 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e50:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e52:	e2ba      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 811b 	bne.w	80030a2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d019      	beq.n	8002ea8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	212c      	movs	r1, #44	; 0x2c
 8002e7a:	fb01 f303 	mul.w	r3, r1, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3348      	adds	r3, #72	; 0x48
 8002e82:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	202c      	movs	r0, #44	; 0x2c
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3350      	adds	r3, #80	; 0x50
 8002ea6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	; 0x61
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2301      	movs	r3, #1
 8002edc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	333f      	adds	r3, #63	; 0x3f
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	333f      	adds	r3, #63	; 0x3f
 8002f00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d121      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fb96 	bl	8007662 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2310      	movs	r3, #16
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	e066      	b.n	8003018 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	333f      	adds	r3, #63	; 0x3f
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d127      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	0151      	lsls	r1, r2, #5
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	440a      	add	r2, r1
 8002f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3360      	adds	r3, #96	; 0x60
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b2d9      	uxtb	r1, r3
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3360      	adds	r3, #96	; 0x60
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f00a fb6e 	bl	800d688 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fac:	e034      	b.n	8003018 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	333f      	adds	r3, #63	; 0x3f
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d12a      	bne.n	8003018 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3360      	adds	r3, #96	; 0x60
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3354      	adds	r3, #84	; 0x54
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2d8      	uxtb	r0, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3354      	adds	r3, #84	; 0x54
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b2d9      	uxtb	r1, r3
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	202c      	movs	r0, #44	; 0x2c
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	4413      	add	r3, r2
 800300c:	3360      	adds	r3, #96	; 0x60
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f00a fb38 	bl	800d688 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d12b      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3348      	adds	r3, #72	; 0x48
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	fb00 f202 	mul.w	r2, r0, r2
 800303a:	440a      	add	r2, r1
 800303c:	3240      	adds	r2, #64	; 0x40
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	fbb3 f3f2 	udiv	r3, r3, r2
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 81be 	beq.w	80033ca <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3354      	adds	r3, #84	; 0x54
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2d8      	uxtb	r0, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3354      	adds	r3, #84	; 0x54
 8003072:	4602      	mov	r2, r0
 8003074:	701a      	strb	r2, [r3, #0]
}
 8003076:	e1a8      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3354      	adds	r3, #84	; 0x54
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	f083 0301 	eor.w	r3, r3, #1
 800308c:	b2d8      	uxtb	r0, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3354      	adds	r3, #84	; 0x54
 800309c:	4602      	mov	r2, r0
 800309e:	701a      	strb	r2, [r3, #0]
}
 80030a0:	e193      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f040 8106 	bne.w	80032c6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	0151      	lsls	r1, r2, #5
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	440a      	add	r2, r1
 80030d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3361      	adds	r3, #97	; 0x61
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d109      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e0c9      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d109      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e0b5      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3361      	adds	r3, #97	; 0x61
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d009      	beq.n	8003152 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3361      	adds	r3, #97	; 0x61
 800314c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800314e:	2b08      	cmp	r3, #8
 8003150:	d150      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	202c      	movs	r0, #44	; 0x2c
 800316a:	fb00 f303 	mul.w	r3, r0, r3
 800316e:	440b      	add	r3, r1
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	; 0x5c
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d912      	bls.n	80031ae <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	335c      	adds	r3, #92	; 0x5c
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3360      	adds	r3, #96	; 0x60
 80031a8:	2204      	movs	r2, #4
 80031aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031ac:	e073      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3360      	adds	r3, #96	; 0x60
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031d6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031de:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031f2:	e050      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3361      	adds	r3, #97	; 0x61
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d122      	bne.n	800324e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3360      	adds	r3, #96	; 0x60
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003230:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003238:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e023      	b.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	3361      	adds	r3, #97	; 0x61
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b07      	cmp	r3, #7
 8003260:	d119      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	335c      	adds	r3, #92	; 0x5c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	202c      	movs	r0, #44	; 0x2c
 800327a:	fb00 f303 	mul.w	r3, r0, r3
 800327e:	440b      	add	r3, r1
 8003280:	335c      	adds	r3, #92	; 0x5c
 8003282:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3360      	adds	r3, #96	; 0x60
 8003292:	2204      	movs	r2, #4
 8003294:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4413      	add	r3, r2
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	461a      	mov	r2, r3
 80032a4:	2302      	movs	r3, #2
 80032a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	b2d9      	uxtb	r1, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	202c      	movs	r0, #44	; 0x2c
 80032b2:	fb00 f303 	mul.w	r3, r0, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3360      	adds	r3, #96	; 0x60
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f00a f9e2 	bl	800d688 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032c4:	e081      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d176      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	333f      	adds	r3, #63	; 0x3f
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d121      	bne.n	8003334 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	335c      	adds	r3, #92	; 0x5c
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	440a      	add	r2, r1
 8003318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f998 	bl	8007662 <USB_HC_Halt>
 8003332:	e041      	b.n	80033b8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	333f      	adds	r3, #63	; 0x3f
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	333f      	adds	r3, #63	; 0x3f
 8003356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003358:	2b02      	cmp	r3, #2
 800335a:	d12d      	bne.n	80033b8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	335c      	adds	r3, #92	; 0x5c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d120      	bne.n	80033b8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3361      	adds	r3, #97	; 0x61
 8003384:	2203      	movs	r2, #3
 8003386:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f004 f955 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	461a      	mov	r2, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	6093      	str	r3, [r2, #8]
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b088      	sub	sp, #32
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d119      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	2304      	movs	r3, #4
 8003412:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003434:	e3ca      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d13e      	bne.n	80034ca <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	461a      	mov	r2, r3
 800345a:	2320      	movs	r3, #32
 800345c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	333d      	adds	r3, #61	; 0x3d
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 83ac 	bne.w	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	333d      	adds	r3, #61	; 0x3d
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3360      	adds	r3, #96	; 0x60
 8003494:	2202      	movs	r2, #2
 8003496:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 f8cd 	bl	8007662 <USB_HC_Halt>
}
 80034c8:	e380      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d122      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f004 f8a8 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003524:	6093      	str	r3, [r2, #8]
}
 8003526:	e351      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d150      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	335c      	adds	r3, #92	; 0x5c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d111      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 f854 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2301      	movs	r3, #1
 80035ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3361      	adds	r3, #97	; 0x61
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
}
 80035de:	e2f5      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d13c      	bne.n	8003670 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3361      	adds	r3, #97	; 0x61
 8003604:	2204      	movs	r2, #4
 8003606:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	333d      	adds	r3, #61	; 0x3d
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	335c      	adds	r3, #92	; 0x5c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	440a      	add	r2, r1
 8003642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f004 f803 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	2340      	movs	r3, #64	; 0x40
 800366c:	6093      	str	r3, [r2, #8]
}
 800366e:	e2ad      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d12a      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003692:	461a      	mov	r2, r3
 8003694:	2308      	movs	r3, #8
 8003696:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	0151      	lsls	r1, r2, #5
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	440a      	add	r2, r1
 80036ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f003 ffcd 	bl	8007662 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3361      	adds	r3, #97	; 0x61
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]
}
 80036da:	e277      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d150      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	335c      	adds	r3, #92	; 0x5c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3361      	adds	r3, #97	; 0x61
 8003712:	2203      	movs	r2, #3
 8003714:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	212c      	movs	r1, #44	; 0x2c
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	333d      	adds	r3, #61	; 0x3d
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d112      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	333c      	adds	r3, #60	; 0x3c
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	333d      	adds	r3, #61	; 0x3d
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	440a      	add	r2, r1
 8003766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 ff71 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2310      	movs	r3, #16
 8003790:	6093      	str	r3, [r2, #8]
}
 8003792:	e21b      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d174      	bne.n	8003894 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d121      	bne.n	80037f6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3361      	adds	r3, #97	; 0x61
 80037c0:	2206      	movs	r2, #6
 80037c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	0151      	lsls	r1, r2, #5
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	440a      	add	r2, r1
 80037da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 ff37 	bl	8007662 <USB_HC_Halt>
 80037f4:	e044      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	335c      	adds	r3, #92	; 0x5c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	202c      	movs	r0, #44	; 0x2c
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	440b      	add	r3, r1
 8003814:	335c      	adds	r3, #92	; 0x5c
 8003816:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	335c      	adds	r3, #92	; 0x5c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d920      	bls.n	800386e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	335c      	adds	r3, #92	; 0x5c
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	3360      	adds	r3, #96	; 0x60
 800384c:	2204      	movs	r2, #4
 800384e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	b2d9      	uxtb	r1, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	202c      	movs	r0, #44	; 0x2c
 800385a:	fb00 f303 	mul.w	r3, r0, r3
 800385e:	4413      	add	r3, r2
 8003860:	3360      	adds	r3, #96	; 0x60
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f009 ff0e 	bl	800d688 <HAL_HCD_HC_NotifyURBChange_Callback>
 800386c:	e008      	b.n	8003880 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3360      	adds	r3, #96	; 0x60
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	461a      	mov	r2, r3
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	6093      	str	r3, [r2, #8]
}
 8003892:	e19b      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	4413      	add	r3, r2
 800389c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d134      	bne.n	8003916 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 fec3 	bl	8007662 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	2310      	movs	r3, #16
 80038ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003900:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	3361      	adds	r3, #97	; 0x61
 8003910:	2208      	movs	r2, #8
 8003912:	701a      	strb	r2, [r3, #0]
}
 8003914:	e15a      	b.n	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b02      	cmp	r3, #2
 800392a:	f040 814f 	bne.w	8003bcc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	440a      	add	r2, r1
 8003944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003948:	f023 0302 	bic.w	r3, r3, #2
 800394c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3361      	adds	r3, #97	; 0x61
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d17d      	bne.n	8003a5e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	333f      	adds	r3, #63	; 0x3f
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d00a      	beq.n	800399e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	333f      	adds	r3, #63	; 0x3f
 8003996:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003998:	2b03      	cmp	r3, #3
 800399a:	f040 8100 	bne.w	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d113      	bne.n	80039ce <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3355      	adds	r3, #85	; 0x55
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2d8      	uxtb	r0, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3355      	adds	r3, #85	; 0x55
 80039ca:	4602      	mov	r2, r0
 80039cc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 80e3 	bne.w	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	334c      	adds	r3, #76	; 0x4c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80d8 	beq.w	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	334c      	adds	r3, #76	; 0x4c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	202c      	movs	r0, #44	; 0x2c
 8003a04:	fb00 f202 	mul.w	r2, r0, r2
 8003a08:	440a      	add	r2, r1
 8003a0a:	3240      	adds	r2, #64	; 0x40
 8003a0c:	8812      	ldrh	r2, [r2, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b01      	subs	r3, #1
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	202c      	movs	r0, #44	; 0x2c
 8003a18:	fb00 f202 	mul.w	r2, r0, r2
 8003a1c:	440a      	add	r2, r1
 8003a1e:	3240      	adds	r2, #64	; 0x40
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80b5 	beq.w	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3355      	adds	r3, #85	; 0x55
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2d8      	uxtb	r0, r3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3355      	adds	r3, #85	; 0x55
 8003a58:	4602      	mov	r2, r0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e09f      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3361      	adds	r3, #97	; 0x61
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d109      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3360      	adds	r3, #96	; 0x60
 8003a80:	2202      	movs	r2, #2
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e08b      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3361      	adds	r3, #97	; 0x61
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d109      	bne.n	8003aae <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3360      	adds	r3, #96	; 0x60
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e077      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	212c      	movs	r1, #44	; 0x2c
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	3361      	adds	r3, #97	; 0x61
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d109      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	212c      	movs	r1, #44	; 0x2c
 8003ac8:	fb01 f303 	mul.w	r3, r1, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3360      	adds	r3, #96	; 0x60
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e063      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3361      	adds	r3, #97	; 0x61
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d009      	beq.n	8003afe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3361      	adds	r3, #97	; 0x61
 8003af8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d14f      	bne.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	335c      	adds	r3, #92	; 0x5c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	202c      	movs	r0, #44	; 0x2c
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	335c      	adds	r3, #92	; 0x5c
 8003b1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	212c      	movs	r1, #44	; 0x2c
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	335c      	adds	r3, #92	; 0x5c
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d912      	bls.n	8003b5a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	335c      	adds	r3, #92	; 0x5c
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3360      	adds	r3, #96	; 0x60
 8003b54:	2204      	movs	r2, #4
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e021      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	2202      	movs	r2, #2
 8003b6a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b82:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b8a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b98:	461a      	mov	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	461a      	mov	r2, r3
 8003bac:	2302      	movs	r3, #2
 8003bae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	b2d9      	uxtb	r1, r3
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	202c      	movs	r0, #44	; 0x2c
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3360      	adds	r3, #96	; 0x60
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f009 fd5e 	bl	800d688 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	0c5b      	lsrs	r3, r3, #17
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d004      	beq.n	8003c1a <HCD_RXQLVL_IRQHandler+0x46>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	f000 80a9 	beq.w	8003d6a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c18:	e0aa      	b.n	8003d70 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80a6 	beq.w	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	212c      	movs	r1, #44	; 0x2c
 8003c28:	fb01 f303 	mul.w	r3, r1, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3344      	adds	r3, #68	; 0x44
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 809b 	beq.w	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3350      	adds	r3, #80	; 0x50
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	202c      	movs	r0, #44	; 0x2c
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	440b      	add	r3, r1
 8003c58:	334c      	adds	r3, #76	; 0x4c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d87a      	bhi.n	8003d56 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3344      	adds	r3, #68	; 0x44
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	b292      	uxth	r2, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f003 f86b 	bl	8006d54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3344      	adds	r3, #68	; 0x44
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	441a      	add	r2, r3
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	202c      	movs	r0, #44	; 0x2c
 8003c98:	fb00 f303 	mul.w	r3, r0, r3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3344      	adds	r3, #68	; 0x44
 8003ca0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3350      	adds	r3, #80	; 0x50
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	441a      	add	r2, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	202c      	movs	r0, #44	; 0x2c
 8003cbc:	fb00 f303 	mul.w	r3, r0, r3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3350      	adds	r3, #80	; 0x50
 8003cc4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	0cdb      	lsrs	r3, r3, #19
 8003cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cda:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3340      	adds	r3, #64	; 0x40
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d13c      	bne.n	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d039      	beq.n	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d10:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3354      	adds	r3, #84	; 0x54
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	f083 0301 	eor.w	r3, r3, #1
 8003d40:	b2d8      	uxtb	r0, r3
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3354      	adds	r3, #84	; 0x54
 8003d50:	4602      	mov	r2, r0
 8003d52:	701a      	strb	r2, [r3, #0]
      break;
 8003d54:	e00b      	b.n	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	2204      	movs	r2, #4
 8003d66:	701a      	strb	r2, [r3, #0]
      break;
 8003d68:	e001      	b.n	8003d6e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003d6e:	bf00      	nop
  }
}
 8003d70:	bf00      	nop
 8003d72:	3728      	adds	r7, #40	; 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003da4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d10b      	bne.n	8003dc8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f009 fc48 	bl	800d650 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f043 0302 	orr.w	r3, r3, #2
 8003dc6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d132      	bne.n	8003e38 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 0308 	orr.w	r3, r3, #8
 8003dd8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d126      	bne.n	8003e32 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d113      	bne.n	8003e14 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df6:	d106      	bne.n	8003e06 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 f908 	bl	8007014 <USB_InitFSLSPClkSel>
 8003e04:	e011      	b.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f003 f901 	bl	8007014 <USB_InitFSLSPClkSel>
 8003e12:	e00a      	b.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d106      	bne.n	8003e2a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e22:	461a      	mov	r2, r3
 8003e24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e28:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f009 fc3e 	bl	800d6ac <HAL_HCD_PortEnabled_Callback>
 8003e30:	e002      	b.n	8003e38 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f009 fc48 	bl	800d6c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d103      	bne.n	8003e4a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e12b      	b.n	80040ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fc fffa 	bl	8000e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f001 f940 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4a81      	ldr	r2, [pc, #516]	; (80040d4 <HAL_I2C_Init+0x274>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d807      	bhi.n	8003ee4 <HAL_I2C_Init+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a80      	ldr	r2, [pc, #512]	; (80040d8 <HAL_I2C_Init+0x278>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e006      	b.n	8003ef2 <HAL_I2C_Init+0x92>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a7d      	ldr	r2, [pc, #500]	; (80040dc <HAL_I2C_Init+0x27c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bf94      	ite	ls
 8003eec:	2301      	movls	r3, #1
 8003eee:	2300      	movhi	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0e7      	b.n	80040ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a78      	ldr	r2, [pc, #480]	; (80040e0 <HAL_I2C_Init+0x280>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9b      	lsrs	r3, r3, #18
 8003f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a6a      	ldr	r2, [pc, #424]	; (80040d4 <HAL_I2C_Init+0x274>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <HAL_I2C_Init+0xd4>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	e009      	b.n	8003f48 <HAL_I2C_Init+0xe8>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <HAL_I2C_Init+0x284>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	3301      	adds	r3, #1
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	495c      	ldr	r1, [pc, #368]	; (80040d4 <HAL_I2C_Init+0x274>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d819      	bhi.n	8003f9c <HAL_I2C_Init+0x13c>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e59      	subs	r1, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f7c:	400b      	ands	r3, r1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_I2C_Init+0x138>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1e59      	subs	r1, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f96:	e051      	b.n	800403c <HAL_I2C_Init+0x1dc>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	e04f      	b.n	800403c <HAL_I2C_Init+0x1dc>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <HAL_I2C_Init+0x168>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e58      	subs	r0, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	440b      	add	r3, r1
 8003fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e012      	b.n	8003fee <HAL_I2C_Init+0x18e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e58      	subs	r0, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	0099      	lsls	r1, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Init+0x196>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e022      	b.n	800403c <HAL_I2C_Init+0x1dc>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10e      	bne.n	800401c <HAL_I2C_Init+0x1bc>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1e58      	subs	r0, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	440b      	add	r3, r1
 800400c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004010:	3301      	adds	r3, #1
 8004012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401a:	e00f      	b.n	800403c <HAL_I2C_Init+0x1dc>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	0099      	lsls	r1, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	6809      	ldr	r1, [r1, #0]
 8004040:	4313      	orrs	r3, r2
 8004042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800406a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6911      	ldr	r1, [r2, #16]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	4311      	orrs	r1, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	430b      	orrs	r3, r1
 800407e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	000186a0 	.word	0x000186a0
 80040d8:	001e847f 	.word	0x001e847f
 80040dc:	003d08ff 	.word	0x003d08ff
 80040e0:	431bde83 	.word	0x431bde83
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d129      	bne.n	8004152 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2224      	movs	r2, #36	; 0x24
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0210 	bic.w	r2, r2, #16
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	d12a      	bne.n	80041d0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2224      	movs	r2, #36	; 0x24
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800419a:	89fb      	ldrh	r3, [r7, #14]
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	89fa      	ldrh	r2, [r7, #14]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0bf      	b.n	8004372 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fc fea4 	bl	8000f54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004222:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004238:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_LTDC_Init+0x19c>)
 8004254:	400b      	ands	r3, r1
 8004256:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_LTDC_Init+0x19c>)
 8004282:	400b      	ands	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_LTDC_Init+0x19c>)
 80042b0:	400b      	ands	r3, r1
 80042b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6919      	ldr	r1, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6959      	ldr	r1, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_LTDC_Init+0x19c>)
 80042de:	400b      	ands	r3, r1
 80042e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6959      	ldr	r1, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0206 	orr.w	r2, r2, #6
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	f000f800 	.word	0xf000f800

08004380 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_LTDC_IRQHandler+0x6a>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01e      	beq.n	80043ea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0204 	bic.w	r2, r2, #4
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f86f 	bl	80044c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d023      	beq.n	800443c <HAL_LTDC_IRQHandler+0xbc>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01e      	beq.n	800443c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0202 	bic.w	r2, r2, #2
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2202      	movs	r2, #2
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800441c:	f043 0202 	orr.w	r2, r3, #2
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2204      	movs	r2, #4
 800442a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f846 	bl	80044c8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01b      	beq.n	800447e <HAL_LTDC_IRQHandler+0xfe>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2201      	movs	r2, #1
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f82f 	bl	80044dc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <HAL_LTDC_IRQHandler+0x140>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0208 	bic.w	r2, r2, #8
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2208      	movs	r2, #8
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f818 	bl	80044f0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_LTDC_ConfigLayer+0x1a>
 800451a:	2302      	movs	r3, #2
 800451c:	e02c      	b.n	8004578 <HAL_LTDC_ConfigLayer+0x74>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2134      	movs	r1, #52	; 0x34
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800454c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800454e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f811 	bl	8004580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bdb0      	pop	{r4, r5, r7, pc}

08004580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	4413      	add	r3, r2
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	01db      	lsls	r3, r3, #7
 80045ac:	4413      	add	r3, r2
 80045ae:	3384      	adds	r3, #132	; 0x84
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	4611      	mov	r1, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	01d2      	lsls	r2, r2, #7
 80045bc:	440a      	add	r2, r1
 80045be:	3284      	adds	r2, #132	; 0x84
 80045c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80045c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d6:	4413      	add	r3, r2
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	440b      	add	r3, r1
 80045e6:	3384      	adds	r3, #132	; 0x84
 80045e8:	4619      	mov	r1, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045fe:	4413      	add	r3, r2
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	01db      	lsls	r3, r3, #7
 800460e:	4413      	add	r3, r2
 8004610:	3384      	adds	r3, #132	; 0x84
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	4611      	mov	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	01d2      	lsls	r2, r2, #7
 800461e:	440a      	add	r2, r1
 8004620:	3284      	adds	r2, #132	; 0x84
 8004622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004636:	4413      	add	r3, r2
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	440b      	add	r3, r1
 8004646:	3384      	adds	r3, #132	; 0x84
 8004648:	4619      	mov	r1, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	01db      	lsls	r3, r3, #7
 800465a:	4413      	add	r3, r2
 800465c:	3384      	adds	r3, #132	; 0x84
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4611      	mov	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	01d2      	lsls	r2, r2, #7
 800466a:	440a      	add	r2, r1
 800466c:	3284      	adds	r2, #132	; 0x84
 800466e:	f023 0307 	bic.w	r3, r3, #7
 8004672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	; 0x84
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	01db      	lsls	r3, r3, #7
 80046b0:	4413      	add	r3, r2
 80046b2:	3384      	adds	r3, #132	; 0x84
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	01db      	lsls	r3, r3, #7
 80046c0:	4413      	add	r3, r2
 80046c2:	3384      	adds	r3, #132	; 0x84
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046d0:	461a      	mov	r2, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	440b      	add	r3, r1
 80046e6:	3384      	adds	r3, #132	; 0x84
 80046e8:	4619      	mov	r1, r3
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4413      	add	r3, r2
 8004720:	3384      	adds	r3, #132	; 0x84
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4413      	add	r3, r2
 8004736:	3384      	adds	r3, #132	; 0x84
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4611      	mov	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	01d2      	lsls	r2, r2, #7
 8004744:	440a      	add	r2, r1
 8004746:	3284      	adds	r2, #132	; 0x84
 8004748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	69da      	ldr	r2, [r3, #28]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	6809      	ldr	r1, [r1, #0]
 800475e:	4608      	mov	r0, r1
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	01c9      	lsls	r1, r1, #7
 8004764:	4401      	add	r1, r0
 8004766:	3184      	adds	r1, #132	; 0x84
 8004768:	4313      	orrs	r3, r2
 800476a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	01db      	lsls	r3, r3, #7
 8004786:	4413      	add	r3, r2
 8004788:	3384      	adds	r3, #132	; 0x84
 800478a:	461a      	mov	r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	01db      	lsls	r3, r3, #7
 800479a:	4413      	add	r3, r2
 800479c:	3384      	adds	r3, #132	; 0x84
 800479e:	461a      	mov	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80047ae:	2304      	movs	r3, #4
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e01b      	b.n	80047ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80047bc:	2303      	movs	r3, #3
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e014      	b.n	80047ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d00b      	beq.n	80047e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d007      	beq.n	80047e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d003      	beq.n	80047e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80047de:	2b07      	cmp	r3, #7
 80047e0:	d102      	bne.n	80047e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80047e2:	2302      	movs	r3, #2
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	e001      	b.n	80047ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80047e8:	2301      	movs	r3, #1
 80047ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	01db      	lsls	r3, r3, #7
 80047f6:	4413      	add	r3, r2
 80047f8:	3384      	adds	r3, #132	; 0x84
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	4611      	mov	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	01d2      	lsls	r2, r2, #7
 8004806:	440a      	add	r2, r1
 8004808:	3284      	adds	r2, #132	; 0x84
 800480a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800480e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	041a      	lsls	r2, r3, #16
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1acb      	subs	r3, r1, r3
 8004826:	69f9      	ldr	r1, [r7, #28]
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	3303      	adds	r3, #3
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	6809      	ldr	r1, [r1, #0]
 8004832:	4608      	mov	r0, r1
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	01c9      	lsls	r1, r1, #7
 8004838:	4401      	add	r1, r0
 800483a:	3184      	adds	r1, #132	; 0x84
 800483c:	4313      	orrs	r3, r2
 800483e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	01db      	lsls	r3, r3, #7
 800484a:	4413      	add	r3, r2
 800484c:	3384      	adds	r3, #132	; 0x84
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	4611      	mov	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	01d2      	lsls	r2, r2, #7
 800485a:	440a      	add	r2, r1
 800485c:	3284      	adds	r2, #132	; 0x84
 800485e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	01db      	lsls	r3, r3, #7
 8004872:	4413      	add	r3, r2
 8004874:	3384      	adds	r3, #132	; 0x84
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	4413      	add	r3, r2
 800488a:	3384      	adds	r3, #132	; 0x84
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	4611      	mov	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	01d2      	lsls	r2, r2, #7
 8004898:	440a      	add	r2, r1
 800489a:	3284      	adds	r2, #132	; 0x84
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e264      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d075      	beq.n	80049ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	4ba3      	ldr	r3, [pc, #652]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4ba0      	ldr	r3, [pc, #640]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d112      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b9d      	ldr	r3, [pc, #628]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f2:	d10b      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	4b99      	ldr	r3, [pc, #612]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x108>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d157      	bne.n	80049b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e23f      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x74>
 8004916:	4b91      	ldr	r3, [pc, #580]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a90      	ldr	r2, [pc, #576]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e01d      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x98>
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a8a      	ldr	r2, [pc, #552]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a87      	ldr	r2, [pc, #540]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e00b      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004948:	4b84      	ldr	r3, [pc, #528]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a83      	ldr	r2, [pc, #524]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b81      	ldr	r3, [pc, #516]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a80      	ldr	r2, [pc, #512]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 800495a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d013      	beq.n	8004990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fc feec 	bl	8001744 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fc fee8 	bl	8001744 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e204      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0xc0>
 800498e:	e014      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fc fed8 	bl	8001744 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fc fed4 	bl	8001744 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1f0      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0xe8>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	4b62      	ldr	r3, [pc, #392]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d11c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	4b5c      	ldr	r3, [pc, #368]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e1c4      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a02:	4b56      	ldr	r3, [pc, #344]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4952      	ldr	r1, [pc, #328]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a16:	e03a      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a20:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <HAL_RCC_OscConfig+0x2b0>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fc fe8d 	bl	8001744 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2e:	f7fc fe89 	bl	8001744 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1a5      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4c:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4940      	ldr	r1, [pc, #256]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a62:	4b3f      	ldr	r3, [pc, #252]	; (8004b60 <HAL_RCC_OscConfig+0x2b0>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fc fe6c 	bl	8001744 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a70:	f7fc fe68 	bl	8001744 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e184      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d030      	beq.n	8004afc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCC_OscConfig+0x2b4>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fe4c 	bl	8001744 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fc fe48 	bl	8001744 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e164      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x200>
 8004ace:	e015      	b.n	8004afc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x2b4>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fc fe35 	bl	8001744 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fc fe31 	bl	8001744 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e14d      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80a0 	beq.w	8004c4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10f      	bne.n	8004b3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b0c      	ldr	r3, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d121      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <HAL_RCC_OscConfig+0x2b8>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7fc fdf7 	bl	8001744 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	e011      	b.n	8004b7e <HAL_RCC_OscConfig+0x2ce>
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	42470000 	.word	0x42470000
 8004b64:	42470e80 	.word	0x42470e80
 8004b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6c:	f7fc fdea 	bl	8001744 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e106      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCC_OscConfig+0x4e4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2f0>
 8004b92:	4b81      	ldr	r3, [pc, #516]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a80      	ldr	r2, [pc, #512]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	e01c      	b.n	8004bda <HAL_RCC_OscConfig+0x32a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b05      	cmp	r3, #5
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x312>
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a7a      	ldr	r2, [pc, #488]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a77      	ldr	r2, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	e00b      	b.n	8004bda <HAL_RCC_OscConfig+0x32a>
 8004bc2:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a74      	ldr	r2, [pc, #464]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a71      	ldr	r2, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004bd4:	f023 0304 	bic.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d015      	beq.n	8004c0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fc fdaf 	bl	8001744 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fc fdab 	bl	8001744 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0c5      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0ee      	beq.n	8004bea <HAL_RCC_OscConfig+0x33a>
 8004c0c:	e014      	b.n	8004c38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7fc fd99 	bl	8001744 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c16:	f7fc fd95 	bl	8001744 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e0af      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2c:	4b5a      	ldr	r3, [pc, #360]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ee      	bne.n	8004c16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	4a55      	ldr	r2, [pc, #340]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 809b 	beq.w	8004d8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c54:	4b50      	ldr	r3, [pc, #320]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d05c      	beq.n	8004d1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d141      	bne.n	8004cec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c68:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fd69 	bl	8001744 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c76:	f7fc fd65 	bl	8001744 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e081      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	085b      	lsrs	r3, r3, #1
 8004cac:	3b01      	subs	r3, #1
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4937      	ldr	r1, [pc, #220]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fd3e 	bl	8001744 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fc fd3a 	bl	8001744 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e056      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x41c>
 8004cea:	e04e      	b.n	8004d8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fd27 	bl	8001744 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fc fd23 	bl	8001744 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e03f      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0c:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCC_OscConfig+0x44a>
 8004d18:	e037      	b.n	8004d8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e032      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_RCC_OscConfig+0x4e8>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d028      	beq.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d121      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d11a      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40007000 	.word	0x40007000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470060 	.word	0x42470060

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fc fc58 	bl	8001744 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fc fc54 	bl	8001744 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490a      	ldr	r1, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fc faaa 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0800e59c 	.word	0x0800e59c
 8004f64:	20000000 	.word	0x20000000
 8004f68:	20000004 	.word	0x20000004

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f84:	4b67      	ldr	r3, [pc, #412]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d00d      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x40>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	f200 80bd 	bhi.w	8005110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f9e:	e0b7      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b61      	ldr	r3, [pc, #388]	; (8005128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fa2:	60bb      	str	r3, [r7, #8]
       break;
 8004fa4:	e0b7      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa6:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004fa8:	60bb      	str	r3, [r7, #8]
      break;
 8004faa:	e0b4      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fac:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb6:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04d      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc2:	4b58      	ldr	r3, [pc, #352]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	ea02 0800 	and.w	r8, r2, r0
 8004fda:	ea03 0901 	and.w	r9, r3, r1
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	014b      	lsls	r3, r1, #5
 8004fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ff0:	0142      	lsls	r2, r0, #5
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8004ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	018b      	lsls	r3, r1, #6
 8005008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800500c:	0182      	lsls	r2, r0, #6
 800500e:	1a12      	subs	r2, r2, r0
 8005010:	eb63 0301 	sbc.w	r3, r3, r1
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	00d9      	lsls	r1, r3, #3
 800501e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005022:	00d0      	lsls	r0, r2, #3
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	eb12 0208 	adds.w	r2, r2, r8
 800502c:	eb43 0309 	adc.w	r3, r3, r9
 8005030:	f04f 0000 	mov.w	r0, #0
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	0259      	lsls	r1, r3, #9
 800503a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800503e:	0250      	lsls	r0, r2, #9
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	f7fb f91e 	bl	8000290 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e04a      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	099b      	lsrs	r3, r3, #6
 8005064:	461a      	mov	r2, r3
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	ea02 0400 	and.w	r4, r2, r0
 8005076:	ea03 0501 	and.w	r5, r3, r1
 800507a:	4620      	mov	r0, r4
 800507c:	4629      	mov	r1, r5
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	014b      	lsls	r3, r1, #5
 8005088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800508c:	0142      	lsls	r2, r0, #5
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	1b00      	subs	r0, r0, r4
 8005094:	eb61 0105 	sbc.w	r1, r1, r5
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	018b      	lsls	r3, r1, #6
 80050a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050a6:	0182      	lsls	r2, r0, #6
 80050a8:	1a12      	subs	r2, r2, r0
 80050aa:	eb63 0301 	sbc.w	r3, r3, r1
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	00d9      	lsls	r1, r3, #3
 80050b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050bc:	00d0      	lsls	r0, r2, #3
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	1912      	adds	r2, r2, r4
 80050c4:	eb45 0303 	adc.w	r3, r5, r3
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	0299      	lsls	r1, r3, #10
 80050d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050d6:	0290      	lsls	r0, r2, #10
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f7fb f8d2 	bl	8000290 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4613      	mov	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	3301      	adds	r3, #1
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	60bb      	str	r3, [r7, #8]
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005112:	60bb      	str	r3, [r7, #8]
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	68bb      	ldr	r3, [r7, #8]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200

08005130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <HAL_RCC_GetHCLKFreq+0x14>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000000 	.word	0x20000000

08005148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800514c:	f7ff fff0 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0a9b      	lsrs	r3, r3, #10
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4903      	ldr	r1, [pc, #12]	; (800516c <HAL_RCC_GetPCLK1Freq+0x24>)
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40023800 	.word	0x40023800
 800516c:	0800e5ac 	.word	0x0800e5ac

08005170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005174:	f7ff ffdc 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005178:	4602      	mov	r2, r0
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	0b5b      	lsrs	r3, r3, #13
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	4903      	ldr	r1, [pc, #12]	; (8005194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005186:	5ccb      	ldrb	r3, [r1, r3]
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800518c:	4618      	mov	r0, r3
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40023800 	.word	0x40023800
 8005194:	0800e5ac 	.word	0x0800e5ac

08005198 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	220f      	movs	r2, #15
 80051a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051a8:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_RCC_GetClockConfig+0x5c>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0203 	and.w	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <HAL_RCC_GetClockConfig+0x5c>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_RCC_GetClockConfig+0x5c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_GetClockConfig+0x5c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <HAL_RCC_GetClockConfig+0x60>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 020f 	and.w	r2, r3, #15
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40023c00 	.word	0x40023c00

080051fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800522c:	2b00      	cmp	r3, #0
 800522e:	d075      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005230:	4bad      	ldr	r3, [pc, #692]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005236:	f7fc fa85 	bl	8001744 <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800523e:	f7fc fa81 	bl	8001744 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e18b      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005250:	4ba6      	ldr	r3, [pc, #664]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	019a      	lsls	r2, r3, #6
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	071b      	lsls	r3, r3, #28
 8005274:	499d      	ldr	r1, [pc, #628]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005288:	4b98      	ldr	r3, [pc, #608]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	0f1b      	lsrs	r3, r3, #28
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	019a      	lsls	r2, r3, #6
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	431a      	orrs	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	4990      	ldr	r1, [pc, #576]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052b0:	4b8e      	ldr	r3, [pc, #568]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b6:	f023 021f 	bic.w	r2, r3, #31
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	3b01      	subs	r3, #1
 80052c0:	498a      	ldr	r1, [pc, #552]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	019a      	lsls	r2, r3, #6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	061b      	lsls	r3, r3, #24
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	071b      	lsls	r3, r3, #28
 80052e8:	4980      	ldr	r1, [pc, #512]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052f0:	4b7d      	ldr	r3, [pc, #500]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052f6:	f7fc fa25 	bl	8001744 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052fc:	e008      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052fe:	f7fc fa21 	bl	8001744 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e12b      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005310:	4b76      	ldr	r3, [pc, #472]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f0      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005330:	2b00      	cmp	r3, #0
 8005332:	d079      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005334:	4b6e      	ldr	r3, [pc, #440]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800533a:	f7fc fa03 	bl	8001744 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005342:	f7fc f9ff 	bl	8001744 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e109      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005354:	4b65      	ldr	r3, [pc, #404]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d0ef      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d020      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800536e:	4b5f      	ldr	r3, [pc, #380]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	0f1b      	lsrs	r3, r3, #28
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	019a      	lsls	r2, r3, #6
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	4957      	ldr	r1, [pc, #348]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005396:	4b55      	ldr	r3, [pc, #340]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	4950      	ldr	r1, [pc, #320]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01e      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053bc:	4b4b      	ldr	r3, [pc, #300]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	0e1b      	lsrs	r3, r3, #24
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	019a      	lsls	r2, r3, #6
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	061b      	lsls	r3, r3, #24
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	071b      	lsls	r3, r3, #28
 80053dc:	4943      	ldr	r1, [pc, #268]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053e4:	4b41      	ldr	r3, [pc, #260]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	493e      	ldr	r1, [pc, #248]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005400:	f7fc f9a0 	bl	8001744 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005406:	e008      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005408:	f7fc f99c 	bl	8001744 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e0a6      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800541a:	4b34      	ldr	r3, [pc, #208]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005426:	d1ef      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 808d 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005452:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800545e:	f7fc f971 	bl	8001744 <HAL_GetTick>
 8005462:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fc f96d 	bl	8001744 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e077      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005478:	4b1e      	ldr	r3, [pc, #120]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d039      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d032      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a2:	4b12      	ldr	r3, [pc, #72]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ac:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054b8:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d11e      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054ca:	f7fc f93b 	bl	8001744 <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d0:	e014      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fc f937 	bl	8001744 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d90b      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e03f      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80054e8:	42470068 	.word	0x42470068
 80054ec:	40023800 	.word	0x40023800
 80054f0:	42470070 	.word	0x42470070
 80054f4:	40007000 	.word	0x40007000
 80054f8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0e4      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005516:	4b16      	ldr	r3, [pc, #88]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	4911      	ldr	r1, [pc, #68]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]
 8005530:	e005      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4a0e      	ldr	r2, [pc, #56]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005538:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554a:	4909      	ldr	r1, [pc, #36]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800554c:	4313      	orrs	r3, r2
 800554e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005562:	4b04      	ldr	r3, [pc, #16]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005564:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40023800 	.word	0x40023800
 8005574:	424711e0 	.word	0x424711e0

08005578 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e025      	b.n	80055d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb ff73 	bl	800148c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f001 f939 	bl	8006830 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	461a      	mov	r2, r3
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	f001 f9a4 	bl	8006916 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e07b      	b.n	80056ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005602:	d009      	beq.n	8005618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	61da      	str	r2, [r3, #28]
 800560a:	e005      	b.n	8005618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb fde6 	bl	8001204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	ea42 0103 	orr.w	r1, r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	f003 0104 	and.w	r1, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0210 	and.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_SPI_Transmit+0x22>
 8005710:	2302      	movs	r3, #2
 8005712:	e126      	b.n	8005962 <HAL_SPI_Transmit+0x270>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800571c:	f7fc f812 	bl	8001744 <HAL_GetTick>
 8005720:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	d002      	beq.n	8005738 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005732:	2302      	movs	r3, #2
 8005734:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005736:	e10b      	b.n	8005950 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Transmit+0x52>
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005748:	e102      	b.n	8005950 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2203      	movs	r2, #3
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	d10f      	bne.n	80057b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d007      	beq.n	80057d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d8:	d14b      	bne.n	8005872 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_SPI_Transmit+0xf6>
 80057e2:	8afb      	ldrh	r3, [r7, #22]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d13e      	bne.n	8005866 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	881a      	ldrh	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	1c9a      	adds	r2, r3, #2
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800580c:	e02b      	b.n	8005866 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b02      	cmp	r3, #2
 800581a:	d112      	bne.n	8005842 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005840:	e011      	b.n	8005866 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005842:	f7fb ff7f 	bl	8001744 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d803      	bhi.n	800585a <HAL_SPI_Transmit+0x168>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d102      	bne.n	8005860 <HAL_SPI_Transmit+0x16e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005864:	e074      	b.n	8005950 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ce      	bne.n	800580e <HAL_SPI_Transmit+0x11c>
 8005870:	e04c      	b.n	800590c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Transmit+0x18e>
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d140      	bne.n	8005902 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058a6:	e02c      	b.n	8005902 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d113      	bne.n	80058de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	86da      	strh	r2, [r3, #54]	; 0x36
 80058dc:	e011      	b.n	8005902 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058de:	f7fb ff31 	bl	8001744 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d803      	bhi.n	80058f6 <HAL_SPI_Transmit+0x204>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d102      	bne.n	80058fc <HAL_SPI_Transmit+0x20a>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005900:	e026      	b.n	8005950 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1cd      	bne.n	80058a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f8b3 	bl	8005a7c <SPI_EndRxTxTransaction>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
 800594c:	e000      	b.n	8005950 <HAL_SPI_Transmit+0x25e>
  }

error:
 800594e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005960:	7ffb      	ldrb	r3, [r7, #31]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800597c:	f7fb fee2 	bl	8001744 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	4413      	add	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800598c:	f7fb feda 	bl	8001744 <HAL_GetTick>
 8005990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005992:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	015b      	lsls	r3, r3, #5
 8005998:	0d1b      	lsrs	r3, r3, #20
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	fb02 f303 	mul.w	r3, r2, r3
 80059a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a2:	e054      	b.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d050      	beq.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059ac:	f7fb feca 	bl	8001744 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d902      	bls.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d13d      	bne.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059da:	d111      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e4:	d004      	beq.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d107      	bne.n	8005a00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a08:	d10f      	bne.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e017      	b.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d19b      	bne.n	80059a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000000 	.word	0x20000000

08005a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <SPI_EndRxTxTransaction+0x7c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <SPI_EndRxTxTransaction+0x80>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	0d5b      	lsrs	r3, r3, #21
 8005a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa6:	d112      	bne.n	8005ace <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff ff5a 	bl	800596c <SPI_WaitFlagStateUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b80      	cmp	r3, #128	; 0x80
 8005ae6:	d0f2      	beq.n	8005ace <SPI_EndRxTxTransaction+0x52>
 8005ae8:	e000      	b.n	8005aec <SPI_EndRxTxTransaction+0x70>
        break;
 8005aea:	bf00      	nop
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000000 	.word	0x20000000
 8005afc:	165e9f81 	.word	0x165e9f81

08005b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e041      	b.n	8005b96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fb fbb4 	bl	8001294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f000 fa96 	bl	8006070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d001      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e04e      	b.n	8005c56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d01d      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_TIM_Base_Start_IT+0xcc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d111      	bne.n	8005c44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d010      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c42:	e007      	b.n	8005c54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40000400 	.word	0x40000400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40000c00 	.word	0x40000c00
 8005c74:	40010400 	.word	0x40010400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40001800 	.word	0x40001800

08005c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d122      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d11b      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0202 	mvn.w	r2, #2
 8005cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f9b5 	bl	8006032 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9a7 	bl	800601e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f9b8 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d122      	bne.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d11b      	bne.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0204 	mvn.w	r2, #4
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f98b 	bl	8006032 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f97d 	bl	800601e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f98e 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d122      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d11b      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0208 	mvn.w	r2, #8
 8005d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f961 	bl	8006032 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f953 	bl	800601e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f964 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d122      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d11b      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0210 	mvn.w	r2, #16
 8005da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2208      	movs	r2, #8
 8005dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f937 	bl	8006032 <HAL_TIM_IC_CaptureCallback>
 8005dc4:	e005      	b.n	8005dd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f929 	bl	800601e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f93a 	bl	8006046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f06f 0201 	mvn.w	r2, #1
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fa ffa8 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b80      	cmp	r3, #128	; 0x80
 8005e10:	d10e      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d107      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fae0 	bl	80063f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d10e      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d107      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8ff 	bl	800605a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d10e      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d107      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0220 	mvn.w	r2, #32
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 faaa 	bl	80063dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_TIM_ConfigClockSource+0x1c>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e0b4      	b.n	8006016 <HAL_TIM_ConfigClockSource+0x186>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee4:	d03e      	beq.n	8005f64 <HAL_TIM_ConfigClockSource+0xd4>
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	f200 8087 	bhi.w	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	f000 8086 	beq.w	8006002 <HAL_TIM_ConfigClockSource+0x172>
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d87f      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b70      	cmp	r3, #112	; 0x70
 8005efe:	d01a      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0xa6>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d87b      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b60      	cmp	r3, #96	; 0x60
 8005f06:	d050      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0x11a>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d877      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b50      	cmp	r3, #80	; 0x50
 8005f0e:	d03c      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0xfa>
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d873      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d058      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x13a>
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d86f      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b30      	cmp	r3, #48	; 0x30
 8005f1e:	d064      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x15a>
 8005f20:	2b30      	cmp	r3, #48	; 0x30
 8005f22:	d86b      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d060      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x15a>
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d867      	bhi.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d05c      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x15a>
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d05a      	beq.n	8005fea <HAL_TIM_ConfigClockSource+0x15a>
 8005f34:	e062      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6899      	ldr	r1, [r3, #8]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f000 f9ad 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	609a      	str	r2, [r3, #8]
      break;
 8005f62:	e04f      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6899      	ldr	r1, [r3, #8]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f000 f996 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f86:	609a      	str	r2, [r3, #8]
      break;
 8005f88:	e03c      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	6859      	ldr	r1, [r3, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f000 f90a 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2150      	movs	r1, #80	; 0x50
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f963 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005fa8:	e02c      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6859      	ldr	r1, [r3, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f000 f929 	bl	800620e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2160      	movs	r1, #96	; 0x60
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f953 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e01c      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f000 f8ea 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2140      	movs	r1, #64	; 0x40
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f943 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005fe8:	e00c      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f000 f93a 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005ffa:	e003      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8006000:	e000      	b.n	8006004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a40      	ldr	r2, [pc, #256]	; (8006184 <TIM_Base_SetConfig+0x114>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608e:	d00f      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a3d      	ldr	r2, [pc, #244]	; (8006188 <TIM_Base_SetConfig+0x118>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00b      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a3c      	ldr	r2, [pc, #240]	; (800618c <TIM_Base_SetConfig+0x11c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a3b      	ldr	r2, [pc, #236]	; (8006190 <TIM_Base_SetConfig+0x120>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3a      	ldr	r2, [pc, #232]	; (8006194 <TIM_Base_SetConfig+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a2f      	ldr	r2, [pc, #188]	; (8006184 <TIM_Base_SetConfig+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d02b      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d027      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <TIM_Base_SetConfig+0x118>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d023      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2b      	ldr	r2, [pc, #172]	; (800618c <TIM_Base_SetConfig+0x11c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01f      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <TIM_Base_SetConfig+0x120>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01b      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a29      	ldr	r2, [pc, #164]	; (8006194 <TIM_Base_SetConfig+0x124>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d017      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a28      	ldr	r2, [pc, #160]	; (8006198 <TIM_Base_SetConfig+0x128>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a27      	ldr	r2, [pc, #156]	; (800619c <TIM_Base_SetConfig+0x12c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <TIM_Base_SetConfig+0x130>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a25      	ldr	r2, [pc, #148]	; (80061a4 <TIM_Base_SetConfig+0x134>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a24      	ldr	r2, [pc, #144]	; (80061a8 <TIM_Base_SetConfig+0x138>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a23      	ldr	r2, [pc, #140]	; (80061ac <TIM_Base_SetConfig+0x13c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <TIM_Base_SetConfig+0x114>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_Base_SetConfig+0xf8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <TIM_Base_SetConfig+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d103      	bne.n	8006170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	615a      	str	r2, [r3, #20]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40010400 	.word	0x40010400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800
 80061a4:	40001800 	.word	0x40001800
 80061a8:	40001c00 	.word	0x40001c00
 80061ac:	40002000 	.word	0x40002000

080061b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b087      	sub	sp, #28
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	f023 0210 	bic.w	r2, r3, #16
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e05a      	b.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d01d      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10c      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e03f      	b.n	8006496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fa ff54 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	; 0x24
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f829 	bl	80064a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800645c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	b09f      	sub	sp, #124	; 0x7c
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b6:	68d9      	ldr	r1, [r3, #12]
 80064b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	ea40 0301 	orr.w	r3, r0, r1
 80064c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064e4:	f021 010c 	bic.w	r1, r1, #12
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ee:	430b      	orrs	r3, r1
 80064f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fe:	6999      	ldr	r1, [r3, #24]
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	ea40 0301 	orr.w	r3, r0, r1
 8006508:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4bc5      	ldr	r3, [pc, #788]	; (8006824 <UART_SetConfig+0x384>)
 8006510:	429a      	cmp	r2, r3
 8006512:	d004      	beq.n	800651e <UART_SetConfig+0x7e>
 8006514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4bc3      	ldr	r3, [pc, #780]	; (8006828 <UART_SetConfig+0x388>)
 800651a:	429a      	cmp	r2, r3
 800651c:	d103      	bne.n	8006526 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800651e:	f7fe fe27 	bl	8005170 <HAL_RCC_GetPCLK2Freq>
 8006522:	6778      	str	r0, [r7, #116]	; 0x74
 8006524:	e002      	b.n	800652c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006526:	f7fe fe0f 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 800652a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006534:	f040 80b6 	bne.w	80066a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800653a:	461c      	mov	r4, r3
 800653c:	f04f 0500 	mov.w	r5, #0
 8006540:	4622      	mov	r2, r4
 8006542:	462b      	mov	r3, r5
 8006544:	1891      	adds	r1, r2, r2
 8006546:	6439      	str	r1, [r7, #64]	; 0x40
 8006548:	415b      	adcs	r3, r3
 800654a:	647b      	str	r3, [r7, #68]	; 0x44
 800654c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006550:	1912      	adds	r2, r2, r4
 8006552:	eb45 0303 	adc.w	r3, r5, r3
 8006556:	f04f 0000 	mov.w	r0, #0
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	00d9      	lsls	r1, r3, #3
 8006560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006564:	00d0      	lsls	r0, r2, #3
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	1911      	adds	r1, r2, r4
 800656c:	6639      	str	r1, [r7, #96]	; 0x60
 800656e:	416b      	adcs	r3, r5
 8006570:	667b      	str	r3, [r7, #100]	; 0x64
 8006572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	461a      	mov	r2, r3
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	1891      	adds	r1, r2, r2
 800657e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006580:	415b      	adcs	r3, r3
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800658c:	f7f9 fe80 	bl	8000290 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4ba5      	ldr	r3, [pc, #660]	; (800682c <UART_SetConfig+0x38c>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011e      	lsls	r6, r3, #4
 800659e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a0:	461c      	mov	r4, r3
 80065a2:	f04f 0500 	mov.w	r5, #0
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	1891      	adds	r1, r2, r2
 80065ac:	6339      	str	r1, [r7, #48]	; 0x30
 80065ae:	415b      	adcs	r3, r3
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
 80065b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065b6:	1912      	adds	r2, r2, r4
 80065b8:	eb45 0303 	adc.w	r3, r5, r3
 80065bc:	f04f 0000 	mov.w	r0, #0
 80065c0:	f04f 0100 	mov.w	r1, #0
 80065c4:	00d9      	lsls	r1, r3, #3
 80065c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ca:	00d0      	lsls	r0, r2, #3
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	1911      	adds	r1, r2, r4
 80065d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80065d4:	416b      	adcs	r3, r5
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	1891      	adds	r1, r2, r2
 80065e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80065e6:	415b      	adcs	r3, r3
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065f2:	f7f9 fe4d 	bl	8000290 <__aeabi_uldivmod>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4b8c      	ldr	r3, [pc, #560]	; (800682c <UART_SetConfig+0x38c>)
 80065fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	2164      	movs	r1, #100	; 0x64
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	3332      	adds	r3, #50	; 0x32
 800660e:	4a87      	ldr	r2, [pc, #540]	; (800682c <UART_SetConfig+0x38c>)
 8006610:	fba2 2303 	umull	r2, r3, r2, r3
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800661c:	441e      	add	r6, r3
 800661e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006620:	4618      	mov	r0, r3
 8006622:	f04f 0100 	mov.w	r1, #0
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	1894      	adds	r4, r2, r2
 800662c:	623c      	str	r4, [r7, #32]
 800662e:	415b      	adcs	r3, r3
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006636:	1812      	adds	r2, r2, r0
 8006638:	eb41 0303 	adc.w	r3, r1, r3
 800663c:	f04f 0400 	mov.w	r4, #0
 8006640:	f04f 0500 	mov.w	r5, #0
 8006644:	00dd      	lsls	r5, r3, #3
 8006646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800664a:	00d4      	lsls	r4, r2, #3
 800664c:	4622      	mov	r2, r4
 800664e:	462b      	mov	r3, r5
 8006650:	1814      	adds	r4, r2, r0
 8006652:	653c      	str	r4, [r7, #80]	; 0x50
 8006654:	414b      	adcs	r3, r1
 8006656:	657b      	str	r3, [r7, #84]	; 0x54
 8006658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	1891      	adds	r1, r2, r2
 8006664:	61b9      	str	r1, [r7, #24]
 8006666:	415b      	adcs	r3, r3
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800666e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006672:	f7f9 fe0d 	bl	8000290 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4b6c      	ldr	r3, [pc, #432]	; (800682c <UART_SetConfig+0x38c>)
 800667c:	fba3 1302 	umull	r1, r3, r3, r2
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	2164      	movs	r1, #100	; 0x64
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	3332      	adds	r3, #50	; 0x32
 800668e:	4a67      	ldr	r2, [pc, #412]	; (800682c <UART_SetConfig+0x38c>)
 8006690:	fba2 2303 	umull	r2, r3, r2, r3
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	f003 0207 	and.w	r2, r3, #7
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4432      	add	r2, r6
 80066a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066a2:	e0b9      	b.n	8006818 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a6:	461c      	mov	r4, r3
 80066a8:	f04f 0500 	mov.w	r5, #0
 80066ac:	4622      	mov	r2, r4
 80066ae:	462b      	mov	r3, r5
 80066b0:	1891      	adds	r1, r2, r2
 80066b2:	6139      	str	r1, [r7, #16]
 80066b4:	415b      	adcs	r3, r3
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066bc:	1912      	adds	r2, r2, r4
 80066be:	eb45 0303 	adc.w	r3, r5, r3
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f04f 0100 	mov.w	r1, #0
 80066ca:	00d9      	lsls	r1, r3, #3
 80066cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066d0:	00d0      	lsls	r0, r2, #3
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	eb12 0804 	adds.w	r8, r2, r4
 80066da:	eb43 0905 	adc.w	r9, r3, r5
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f04f 0100 	mov.w	r1, #0
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	008b      	lsls	r3, r1, #2
 80066f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066f6:	0082      	lsls	r2, r0, #2
 80066f8:	4640      	mov	r0, r8
 80066fa:	4649      	mov	r1, r9
 80066fc:	f7f9 fdc8 	bl	8000290 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4b49      	ldr	r3, [pc, #292]	; (800682c <UART_SetConfig+0x38c>)
 8006706:	fba3 2302 	umull	r2, r3, r3, r2
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	011e      	lsls	r6, r3, #4
 800670e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006710:	4618      	mov	r0, r3
 8006712:	f04f 0100 	mov.w	r1, #0
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	1894      	adds	r4, r2, r2
 800671c:	60bc      	str	r4, [r7, #8]
 800671e:	415b      	adcs	r3, r3
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006726:	1812      	adds	r2, r2, r0
 8006728:	eb41 0303 	adc.w	r3, r1, r3
 800672c:	f04f 0400 	mov.w	r4, #0
 8006730:	f04f 0500 	mov.w	r5, #0
 8006734:	00dd      	lsls	r5, r3, #3
 8006736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800673a:	00d4      	lsls	r4, r2, #3
 800673c:	4622      	mov	r2, r4
 800673e:	462b      	mov	r3, r5
 8006740:	1814      	adds	r4, r2, r0
 8006742:	64bc      	str	r4, [r7, #72]	; 0x48
 8006744:	414b      	adcs	r3, r1
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	008b      	lsls	r3, r1, #2
 800675c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006760:	0082      	lsls	r2, r0, #2
 8006762:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006766:	f7f9 fd93 	bl	8000290 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <UART_SetConfig+0x38c>)
 8006770:	fba3 1302 	umull	r1, r3, r3, r2
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	2164      	movs	r1, #100	; 0x64
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	3332      	adds	r3, #50	; 0x32
 8006782:	4a2a      	ldr	r2, [pc, #168]	; (800682c <UART_SetConfig+0x38c>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800678e:	441e      	add	r6, r3
 8006790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006792:	4618      	mov	r0, r3
 8006794:	f04f 0100 	mov.w	r1, #0
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	1894      	adds	r4, r2, r2
 800679e:	603c      	str	r4, [r7, #0]
 80067a0:	415b      	adcs	r3, r3
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a8:	1812      	adds	r2, r2, r0
 80067aa:	eb41 0303 	adc.w	r3, r1, r3
 80067ae:	f04f 0400 	mov.w	r4, #0
 80067b2:	f04f 0500 	mov.w	r5, #0
 80067b6:	00dd      	lsls	r5, r3, #3
 80067b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067bc:	00d4      	lsls	r4, r2, #3
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	eb12 0a00 	adds.w	sl, r2, r0
 80067c6:	eb43 0b01 	adc.w	fp, r3, r1
 80067ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	008b      	lsls	r3, r1, #2
 80067de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067e2:	0082      	lsls	r2, r0, #2
 80067e4:	4650      	mov	r0, sl
 80067e6:	4659      	mov	r1, fp
 80067e8:	f7f9 fd52 	bl	8000290 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <UART_SetConfig+0x38c>)
 80067f2:	fba3 1302 	umull	r1, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2164      	movs	r1, #100	; 0x64
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	3332      	adds	r3, #50	; 0x32
 8006804:	4a09      	ldr	r2, [pc, #36]	; (800682c <UART_SetConfig+0x38c>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	f003 020f 	and.w	r2, r3, #15
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4432      	add	r2, r6
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	377c      	adds	r7, #124	; 0x7c
 800681c:	46bd      	mov	sp, r7
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	bf00      	nop
 8006824:	40011000 	.word	0x40011000
 8006828:	40011400 	.word	0x40011400
 800682c:	51eb851f 	.word	0x51eb851f

08006830 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d029      	beq.n	800689e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800685a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006864:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800686a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006870:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006876:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800687c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006882:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006888:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800688e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e034      	b.n	8006908 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068aa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80068b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80068ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068d2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068dc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80068e2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80068e8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80068ee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80068f4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d02e      	beq.n	800698e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800693c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	3b01      	subs	r3, #1
 800694a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800694c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	3b01      	subs	r3, #1
 8006954:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006956:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	3b01      	subs	r3, #1
 800695e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006960:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	3b01      	subs	r3, #1
 8006968:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800696a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	3b01      	subs	r3, #1
 8006972:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006974:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	3b01      	subs	r3, #1
 800697c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800697e:	4313      	orrs	r3, r2
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	e03b      	b.n	8006a06 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800699a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800699e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069b0:	4313      	orrs	r3, r2
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069c4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	3b01      	subs	r3, #1
 80069dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80069de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80069e8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80069f2:	4313      	orrs	r3, r2
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006a30:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006a3a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006a4c:	f7fa fe7a 	bl	8001744 <HAL_GetTick>
 8006a50:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006a52:	e010      	b.n	8006a76 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d00c      	beq.n	8006a76 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <FMC_SDRAM_SendCommand+0x5e>
 8006a62:	f7fa fe6f 	bl	8001744 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d201      	bcs.n	8006a76 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e006      	b.n	8006a84 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d0e8      	beq.n	8006a54 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	f107 001c 	add.w	r0, r7, #28
 8006ac0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d122      	bne.n	8006b10 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f99f 	bl	8006e48 <USB_CoreReset>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	e01a      	b.n	8006b46 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f993 	bl	8006e48 <USB_CoreReset>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
 8006b38:	e005      	b.n	8006b46 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10b      	bne.n	8006b64 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f043 0206 	orr.w	r2, r3, #6
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b70:	b004      	add	sp, #16
 8006b72:	4770      	bx	lr

08006b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f043 0201 	orr.w	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f023 0201 	bic.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d115      	bne.n	8006c06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006be6:	2001      	movs	r0, #1
 8006be8:	f7fa fdb8 	bl	800175c <HAL_Delay>
      ms++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f919 	bl	8006e2a <USB_GetMode>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d01e      	beq.n	8006c3c <USB_SetCurrentMode+0x84>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b31      	cmp	r3, #49	; 0x31
 8006c02:	d9f0      	bls.n	8006be6 <USB_SetCurrentMode+0x2e>
 8006c04:	e01a      	b.n	8006c3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c06:	78fb      	ldrb	r3, [r7, #3]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d115      	bne.n	8006c38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c18:	2001      	movs	r0, #1
 8006c1a:	f7fa fd9f 	bl	800175c <HAL_Delay>
      ms++;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f900 	bl	8006e2a <USB_GetMode>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <USB_SetCurrentMode+0x84>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b31      	cmp	r3, #49	; 0x31
 8006c34:	d9f0      	bls.n	8006c18 <USB_SetCurrentMode+0x60>
 8006c36:	e001      	b.n	8006c3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e005      	b.n	8006c48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b32      	cmp	r3, #50	; 0x32
 8006c40:	d101      	bne.n	8006c46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	019b      	lsls	r3, r3, #6
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <USB_FlushTxFifo+0x44>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e006      	b.n	8006c88 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d0f1      	beq.n	8006c6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	00030d40 	.word	0x00030d40

08006c98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <USB_FlushRxFifo+0x3c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e006      	b.n	8006cc8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d0f1      	beq.n	8006caa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	00030d40 	.word	0x00030d40

08006cd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b089      	sub	sp, #36	; 0x24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	71fb      	strb	r3, [r7, #7]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d123      	bne.n	8006d46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cfe:	88bb      	ldrh	r3, [r7, #4]
 8006d00:	3303      	adds	r3, #3
 8006d02:	089b      	lsrs	r3, r3, #2
 8006d04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e018      	b.n	8006d3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	031a      	lsls	r2, r3, #12
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d18:	461a      	mov	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3301      	adds	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3e2      	bcc.n	8006d0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3724      	adds	r7, #36	; 0x24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b08b      	sub	sp, #44	; 0x2c
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	e014      	b.n	8006daa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3301      	adds	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	3301      	adds	r3, #1
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	3301      	adds	r3, #1
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	3301      	adds	r3, #1
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	6a3a      	ldr	r2, [r7, #32]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3e6      	bcc.n	8006d80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006db2:	8bfb      	ldrh	r3, [r7, #30]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01e      	beq.n	8006df6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	701a      	strb	r2, [r3, #0]
      i++;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	3301      	adds	r3, #1
 8006de2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	3301      	adds	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dea:	8bfb      	ldrh	r3, [r7, #30]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006df0:	8bfb      	ldrh	r3, [r7, #30]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ea      	bne.n	8006dcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	372c      	adds	r7, #44	; 0x2c
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <USB_CoreReset+0x60>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e01a      	b.n	8006e9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	daf3      	bge.n	8006e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f043 0201 	orr.w	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <USB_CoreReset+0x60>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d901      	bls.n	8006e8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d0f1      	beq.n	8006e7c <USB_CoreReset+0x34>

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	00030d40 	.word	0x00030d40

08006eac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eac:	b084      	sub	sp, #16
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	f107 001c 	add.w	r0, r7, #28
 8006eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d018      	beq.n	8006f30 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10a      	bne.n	8006f1a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f12:	f043 0304 	orr.w	r3, r3, #4
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e014      	b.n	8006f44 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f28:	f023 0304 	bic.w	r3, r3, #4
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e009      	b.n	8006f44 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f3e:	f023 0304 	bic.w	r3, r3, #4
 8006f42:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006f44:	2110      	movs	r1, #16
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fe82 	bl	8006c50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fea3 	bl	8006c98 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e015      	b.n	8006f84 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3e5      	bcc.n	8006f58 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295
 8006f98:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a13      	ldr	r2, [pc, #76]	; (8007000 <USB_HostInit+0x154>)
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	; (8007004 <USB_HostInit+0x158>)
 8006fb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fbc:	e009      	b.n	8006fd2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2280      	movs	r2, #128	; 0x80
 8006fc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a10      	ldr	r2, [pc, #64]	; (8007008 <USB_HostInit+0x15c>)
 8006fc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a0f      	ldr	r2, [pc, #60]	; (800700c <USB_HostInit+0x160>)
 8006fce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	4b09      	ldr	r3, [pc, #36]	; (8007010 <USB_HostInit+0x164>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ffc:	b004      	add	sp, #16
 8006ffe:	4770      	bx	lr
 8007000:	01000200 	.word	0x01000200
 8007004:	00e00300 	.word	0x00e00300
 8007008:	00600080 	.word	0x00600080
 800700c:	004000e0 	.word	0x004000e0
 8007010:	a3200008 	.word	0xa3200008

08007014 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800704c:	4313      	orrs	r3, r2
 800704e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d107      	bne.n	8007066 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705c:	461a      	mov	r2, r3
 800705e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007062:	6053      	str	r3, [r2, #4]
 8007064:	e009      	b.n	800707a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	2b02      	cmp	r3, #2
 800706a:	d106      	bne.n	800707a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007072:	461a      	mov	r2, r3
 8007074:	f241 7370 	movw	r3, #6000	; 0x1770
 8007078:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070b8:	2064      	movs	r0, #100	; 0x64
 80070ba:	f7fa fb4f 	bl	800175c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070cc:	200a      	movs	r0, #10
 80070ce:	f7fa fb45 	bl	800175c <HAL_Delay>

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007100:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <USB_DriveVbus+0x44>
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d106      	bne.n	8007120 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800711a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800711e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712a:	d109      	bne.n	8007140 <USB_DriveVbus+0x64>
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800713a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800713e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	0c5b      	lsrs	r3, r3, #17
 800716c:	f003 0303 	and.w	r3, r3, #3
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	b29b      	uxth	r3, r3
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	70fb      	strb	r3, [r7, #3]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70bb      	strb	r3, [r7, #2]
 80071b6:	4613      	mov	r3, r2
 80071b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ce:	461a      	mov	r2, r3
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295
 80071d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d87e      	bhi.n	80072dc <USB_HC_Init+0x13c>
 80071de:	a201      	add	r2, pc, #4	; (adr r2, 80071e4 <USB_HC_Init+0x44>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	080071f5 	.word	0x080071f5
 80071e8:	0800729f 	.word	0x0800729f
 80071ec:	080071f5 	.word	0x080071f5
 80071f0:	08007261 	.word	0x08007261
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071f4:	78fb      	ldrb	r3, [r7, #3]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007200:	461a      	mov	r2, r3
 8007202:	f240 439d 	movw	r3, #1181	; 0x49d
 8007206:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007208:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	da10      	bge.n	8007232 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	78fa      	ldrb	r2, [r7, #3]
 8007220:	0151      	lsls	r1, r2, #5
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	440a      	add	r2, r1
 8007226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800722a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007230:	e057      	b.n	80072e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d051      	beq.n	80072e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4413      	add	r3, r2
 8007246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	440a      	add	r2, r1
 8007254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007258:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800725c:	60d3      	str	r3, [r2, #12]
      break;
 800725e:	e040      	b.n	80072e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726c:	461a      	mov	r2, r3
 800726e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007272:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da34      	bge.n	80072e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	440a      	add	r2, r1
 8007292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800729a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800729c:	e023      	b.n	80072e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	f240 2325 	movw	r3, #549	; 0x225
 80072b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da17      	bge.n	80072ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072da:	e006      	b.n	80072ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77fb      	strb	r3, [r7, #31]
      break;
 80072e0:	e004      	b.n	80072ec <USB_HC_Init+0x14c>
      break;
 80072e2:	bf00      	nop
 80072e4:	e002      	b.n	80072ec <USB_HC_Init+0x14c>
      break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <USB_HC_Init+0x14c>
      break;
 80072ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f2:	699a      	ldr	r2, [r3, #24]
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	2101      	movs	r1, #1
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	6939      	ldr	r1, [r7, #16]
 8007302:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007306:	4313      	orrs	r3, r2
 8007308:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007316:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800731a:	2b00      	cmp	r3, #0
 800731c:	da03      	bge.n	8007326 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800731e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	e001      	b.n	800732a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff ff0f 	bl	800714e <USB_GetHostSpeed>
 8007330:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007332:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007336:	2b02      	cmp	r3, #2
 8007338:	d106      	bne.n	8007348 <USB_HC_Init+0x1a8>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d003      	beq.n	8007348 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e001      	b.n	800734c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800734c:	787b      	ldrb	r3, [r7, #1]
 800734e:	059b      	lsls	r3, r3, #22
 8007350:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007354:	78bb      	ldrb	r3, [r7, #2]
 8007356:	02db      	lsls	r3, r3, #11
 8007358:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800735c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800735e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007362:	049b      	lsls	r3, r3, #18
 8007364:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007368:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800736a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800736c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007370:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	0159      	lsls	r1, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	440b      	add	r3, r1
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007388:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800738a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800738e:	2b03      	cmp	r3, #3
 8007390:	d10f      	bne.n	80073b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4413      	add	r3, r2
 800739a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	78fa      	ldrb	r2, [r7, #3]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	; 0x30
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	785b      	ldrb	r3, [r3, #1]
 80073d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d02d      	beq.n	8007442 <USB_HC_StartXfer+0x86>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	791b      	ldrb	r3, [r3, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d129      	bne.n	8007442 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d117      	bne.n	8007424 <USB_HC_StartXfer+0x68>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	79db      	ldrb	r3, [r3, #7]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <USB_HC_StartXfer+0x48>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	79db      	ldrb	r3, [r3, #7]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d10f      	bne.n	8007424 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	4413      	add	r3, r2
 800740c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	6a3a      	ldr	r2, [r7, #32]
 8007418:	440a      	add	r2, r1
 800741a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <USB_HC_StartXfer+0x86>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	795b      	ldrb	r3, [r3, #5]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa2f 	bl	800789c <USB_DoPing>
      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e0f8      	b.n	8007634 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d018      	beq.n	800747c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	8912      	ldrh	r2, [r2, #8]
 8007452:	4413      	add	r3, r2
 8007454:	3b01      	subs	r3, #1
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	8912      	ldrh	r2, [r2, #8]
 800745a:	fbb3 f3f2 	udiv	r3, r3, r2
 800745e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007462:	8b7b      	ldrh	r3, [r7, #26]
 8007464:	429a      	cmp	r2, r3
 8007466:	d90b      	bls.n	8007480 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007468:	8b7b      	ldrh	r3, [r7, #26]
 800746a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800746c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	8912      	ldrh	r2, [r2, #8]
 8007472:	fb02 f203 	mul.w	r2, r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	611a      	str	r2, [r3, #16]
 800747a:	e001      	b.n	8007480 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800747c:	2301      	movs	r3, #1
 800747e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	8912      	ldrh	r2, [r2, #8]
 800748e:	fb02 f203 	mul.w	r2, r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	611a      	str	r2, [r3, #16]
 8007496:	e003      	b.n	80074a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074aa:	04d9      	lsls	r1, r3, #19
 80074ac:	4b63      	ldr	r3, [pc, #396]	; (800763c <USB_HC_StartXfer+0x280>)
 80074ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7a9b      	ldrb	r3, [r3, #10]
 80074b6:	075b      	lsls	r3, r3, #29
 80074b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074bc:	69f9      	ldr	r1, [r7, #28]
 80074be:	0148      	lsls	r0, r1, #5
 80074c0:	6a39      	ldr	r1, [r7, #32]
 80074c2:	4401      	add	r1, r0
 80074c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d009      	beq.n	80074e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	68d9      	ldr	r1, [r3, #12]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e2:	460a      	mov	r2, r1
 80074e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bf0c      	ite	eq
 80074f6:	2301      	moveq	r3, #1
 80074f8:	2300      	movne	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	440a      	add	r2, r1
 8007514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007518:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800751c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	7e7b      	ldrb	r3, [r7, #25]
 800752e:	075b      	lsls	r3, r3, #29
 8007530:	69f9      	ldr	r1, [r7, #28]
 8007532:	0148      	lsls	r0, r1, #5
 8007534:	6a39      	ldr	r1, [r7, #32]
 8007536:	4401      	add	r1, r0
 8007538:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800753c:	4313      	orrs	r3, r2
 800753e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007556:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	78db      	ldrb	r3, [r3, #3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d004      	beq.n	800756a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	e003      	b.n	8007572 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007570:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007578:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007586:	461a      	mov	r2, r3
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e04e      	b.n	8007634 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	78db      	ldrb	r3, [r3, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d149      	bne.n	8007632 <USB_HC_StartXfer+0x276>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d045      	beq.n	8007632 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	79db      	ldrb	r3, [r3, #7]
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d830      	bhi.n	8007610 <USB_HC_StartXfer+0x254>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USB_HC_StartXfer+0x1f8>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075e9 	.word	0x080075e9
 80075bc:	080075c5 	.word	0x080075c5
 80075c0:	080075e9 	.word	0x080075e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	3303      	adds	r3, #3
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075ce:	8afa      	ldrh	r2, [r7, #22]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d91c      	bls.n	8007614 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f043 0220 	orr.w	r2, r3, #32
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80075e6:	e015      	b.n	8007614 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	3303      	adds	r3, #3
 80075ee:	089b      	lsrs	r3, r3, #2
 80075f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075f2:	8afa      	ldrh	r2, [r7, #22]
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	429a      	cmp	r2, r3
 8007600:	d90a      	bls.n	8007618 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	619a      	str	r2, [r3, #24]
        }
        break;
 800760e:	e003      	b.n	8007618 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007610:	bf00      	nop
 8007612:	e002      	b.n	800761a <USB_HC_StartXfer+0x25e>
        break;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <USB_HC_StartXfer+0x25e>
        break;
 8007618:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	68d9      	ldr	r1, [r3, #12]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785a      	ldrb	r2, [r3, #1]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	b29b      	uxth	r3, r3
 8007628:	2000      	movs	r0, #0
 800762a:	9000      	str	r0, [sp, #0]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fb53 	bl	8006cd8 <USB_WritePacket>
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	1ff80000 	.word	0x1ff80000

08007640 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	b29b      	uxth	r3, r3
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007662:	b480      	push	{r7}
 8007664:	b089      	sub	sp, #36	; 0x24
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4413      	add	r3, r2
 8007682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	0c9b      	lsrs	r3, r3, #18
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	0fdb      	lsrs	r3, r3, #31
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d104      	bne.n	80076bc <USB_HC_Halt+0x5a>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e0e8      	b.n	800788e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <USB_HC_Halt+0x66>
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d173      	bne.n	80077b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f040 80cb 	bne.w	800788c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d143      	bne.n	800778a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	4413      	add	r3, r2
 800770a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	440a      	add	r2, r1
 8007718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800771c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007720:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	4413      	add	r3, r2
 800772a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	440a      	add	r2, r1
 8007738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800773c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007740:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	440a      	add	r2, r1
 8007758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800775c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007760:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800776e:	d81d      	bhi.n	80077ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007786:	d0ec      	beq.n	8007762 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007788:	e080      	b.n	800788c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077aa:	e06f      	b.n	800788c <USB_HC_Halt+0x22a>
            break;
 80077ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077ae:	e06d      	b.n	800788c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d143      	bne.n	8007868 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	0151      	lsls	r1, r2, #5
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	440a      	add	r2, r1
 8007816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800781a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800781e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	440a      	add	r2, r1
 8007836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800783a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800783e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	3301      	adds	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784c:	d81d      	bhi.n	800788a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	4413      	add	r3, r2
 8007856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007864:	d0ec      	beq.n	8007840 <USB_HC_Halt+0x1de>
 8007866:	e011      	b.n	800788c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	4413      	add	r3, r2
 8007870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	440a      	add	r2, r1
 800787e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e000      	b.n	800788c <USB_HC_Halt+0x22a>
          break;
 800788a:	bf00      	nop
    }
  }

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3724      	adds	r7, #36	; 0x24
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80078b0:	2301      	movs	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	04da      	lsls	r2, r3, #19
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <USB_DoPing+0x74>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fa:	461a      	mov	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	1ff80000 	.word	0x1ff80000

08007914 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff f936 	bl	8006b96 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800792a:	2110      	movs	r1, #16
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff f98f 	bl	8006c50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff f9b0 	bl	8006c98 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007938:	2300      	movs	r3, #0
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	e01f      	b.n	800797e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007954:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800795c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007964:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007972:	461a      	mov	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3301      	adds	r3, #1
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b0f      	cmp	r3, #15
 8007982:	d9dc      	bls.n	800793e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
 8007988:	e034      	b.n	80079f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079be:	461a      	mov	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	3301      	adds	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079d0:	d80c      	bhi.n	80079ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079e8:	d0ec      	beq.n	80079c4 <USB_StopHost+0xb0>
 80079ea:	e000      	b.n	80079ee <USB_StopHost+0xda>
        break;
 80079ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	3301      	adds	r3, #1
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b0f      	cmp	r3, #15
 80079f8:	d9c7      	bls.n	800798a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a00:	461a      	mov	r2, r3
 8007a02:	f04f 33ff 	mov.w	r3, #4294967295
 8007a06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff f8af 	bl	8006b74 <USB_EnableGlobalInt>

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a20:	b590      	push	{r4, r7, lr}
 8007a22:	b089      	sub	sp, #36	; 0x24
 8007a24:	af04      	add	r7, sp, #16
 8007a26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a28:	2301      	movs	r3, #1
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fcb2 	bl	8008398 <USBH_FindInterface>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	d002      	beq.n	8007a44 <USBH_CDC_InterfaceInit+0x24>
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d901      	bls.n	8007a48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a44:	2302      	movs	r3, #2
 8007a46:	e13d      	b.n	8007cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc87 	bl	8008360 <USBH_SelectInterface>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e131      	b.n	8007cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007a66:	2050      	movs	r0, #80	; 0x50
 8007a68:	f006 f866 	bl	800db38 <malloc>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a80:	2302      	movs	r3, #2
 8007a82:	e11f      	b.n	8007cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a84:	2250      	movs	r2, #80	; 0x50
 8007a86:	2100      	movs	r1, #0
 8007a88:	68b8      	ldr	r0, [r7, #8]
 8007a8a:	f006 f88d 	bl	800dba8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	211a      	movs	r1, #26
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	4413      	add	r3, r2
 8007a9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da15      	bge.n	8007ad2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	211a      	movs	r1, #26
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	211a      	movs	r1, #26
 8007ac2:	fb01 f303 	mul.w	r3, r1, r3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007acc:	881a      	ldrh	r2, [r3, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f002 f88c 	bl	8009bf6 <USBH_AllocPipe>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7819      	ldrb	r1, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	7858      	ldrb	r0, [r3, #1]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	8952      	ldrh	r2, [r2, #10]
 8007afe:	9202      	str	r2, [sp, #8]
 8007b00:	2203      	movs	r2, #3
 8007b02:	9201      	str	r2, [sp, #4]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4623      	mov	r3, r4
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 f844 	bl	8009b98 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2200      	movs	r2, #0
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f005 ff5d 	bl	800d9d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	210a      	movs	r1, #10
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc37 	bl	8008398 <USBH_FindInterface>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	2bff      	cmp	r3, #255	; 0xff
 8007b32:	d002      	beq.n	8007b3a <USBH_CDC_InterfaceInit+0x11a>
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d901      	bls.n	8007b3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0c2      	b.n	8007cc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	211a      	movs	r1, #26
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da16      	bge.n	8007b84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	211a      	movs	r1, #26
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	211a      	movs	r1, #26
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b7c:	881a      	ldrh	r2, [r3, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	835a      	strh	r2, [r3, #26]
 8007b82:	e015      	b.n	8007bb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	211a      	movs	r1, #26
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	211a      	movs	r1, #26
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	211a      	movs	r1, #26
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da16      	bge.n	8007bf6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	211a      	movs	r1, #26
 8007bce:	fb01 f303 	mul.w	r3, r1, r3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	211a      	movs	r1, #26
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	835a      	strh	r2, [r3, #26]
 8007bf4:	e015      	b.n	8007c22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	211a      	movs	r1, #26
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	4413      	add	r3, r2
 8007c02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	211a      	movs	r1, #26
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c1c:	881a      	ldrh	r2, [r3, #0]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7b9b      	ldrb	r3, [r3, #14]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 ffe4 	bl	8009bf6 <USBH_AllocPipe>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	461a      	mov	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	7bdb      	ldrb	r3, [r3, #15]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 ffda 	bl	8009bf6 <USBH_AllocPipe>
 8007c42:	4603      	mov	r3, r0
 8007c44:	461a      	mov	r2, r3
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	7b59      	ldrb	r1, [r3, #13]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	7b98      	ldrb	r0, [r3, #14]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	8b12      	ldrh	r2, [r2, #24]
 8007c62:	9202      	str	r2, [sp, #8]
 8007c64:	2202      	movs	r2, #2
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	4623      	mov	r3, r4
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 ff92 	bl	8009b98 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	7b19      	ldrb	r1, [r3, #12]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	7bd8      	ldrb	r0, [r3, #15]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	8b52      	ldrh	r2, [r2, #26]
 8007c8c:	9202      	str	r2, [sp, #8]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4623      	mov	r3, r4
 8007c96:	4602      	mov	r2, r0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 ff7d 	bl	8009b98 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	7b5b      	ldrb	r3, [r3, #13]
 8007caa:	2200      	movs	r2, #0
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f005 fe92 	bl	800d9d8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	7b1b      	ldrb	r3, [r3, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f005 fe8b 	bl	800d9d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}

08007ccc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cda:	69db      	ldr	r3, [r3, #28]
 8007cdc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00e      	beq.n	8007d04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 ff72 	bl	8009bd6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 ff9d 	bl	8009c38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	7b1b      	ldrb	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00e      	beq.n	8007d2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	7b1b      	ldrb	r3, [r3, #12]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 ff5f 	bl	8009bd6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	7b1b      	ldrb	r3, [r3, #12]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 ff8a 	bl	8009c38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	7b5b      	ldrb	r3, [r3, #13]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	7b5b      	ldrb	r3, [r3, #13]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 ff4c 	bl	8009bd6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	7b5b      	ldrb	r3, [r3, #13]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 ff77 	bl	8009c38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f005 feef 	bl	800db48 <free>
    phost->pActiveClass->pData = 0U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d70:	2200      	movs	r2, #0
 8007d72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3340      	adds	r3, #64	; 0x40
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f8b1 	bl	8007efe <GetLineCoding>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dac:	2102      	movs	r1, #2
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007db2:	7afb      	ldrb	r3, [r7, #11]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d877      	bhi.n	8007ed0 <USBH_CDC_Process+0x114>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <USBH_CDC_Process+0x2c>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007dfd 	.word	0x08007dfd
 8007dec:	08007e03 	.word	0x08007e03
 8007df0:	08007e33 	.word	0x08007e33
 8007df4:	08007ea7 	.word	0x08007ea7
 8007df8:	08007eb5 	.word	0x08007eb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007e00:	e06d      	b.n	8007ede <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f897 	bl	8007f3c <SetLineCoding>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e20:	e058      	b.n	8007ed4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d055      	beq.n	8007ed4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007e30:	e050      	b.n	8007ed4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	3340      	adds	r3, #64	; 0x40
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f860 	bl	8007efe <GetLineCoding>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d126      	bne.n	8007e96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d13b      	bne.n	8007ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d133      	bne.n	8007ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d12b      	bne.n	8007ed8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d124      	bne.n	8007ed8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f982 	bl	8008198 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e94:	e020      	b.n	8007ed8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d01d      	beq.n	8007ed8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ea4:	e018      	b.n	8007ed8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f867 	bl	8007f7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f8f6 	bl	800809e <CDC_ProcessReception>
      break;
 8007eb2:	e014      	b.n	8007ede <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f94d 	bl	8009156 <USBH_ClrFeature>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10a      	bne.n	8007edc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007ece:	e005      	b.n	8007edc <USBH_CDC_Process+0x120>

    default:
      break;
 8007ed0:	bf00      	nop
 8007ed2:	e004      	b.n	8007ede <USBH_CDC_Process+0x122>
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e002      	b.n	8007ede <USBH_CDC_Process+0x122>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <USBH_CDC_Process+0x122>
      break;
 8007edc:	bf00      	nop

  }

  return status;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	22a1      	movs	r2, #161	; 0xa1
 8007f0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2207      	movs	r2, #7
 8007f24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2207      	movs	r2, #7
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 faf2 	bl	8009516 <USBH_CtlReq>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2221      	movs	r2, #33	; 0x21
 8007f4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2207      	movs	r2, #7
 8007f62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2207      	movs	r2, #7
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 fad3 	bl	8009516 <USBH_CtlReq>
 8007f70:	4603      	mov	r3, r0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af02      	add	r7, sp, #8
 8007f80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d002      	beq.n	8007fa0 <CDC_ProcessTransmission+0x26>
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d023      	beq.n	8007fe6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007f9e:	e07a      	b.n	8008096 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	8b12      	ldrh	r2, [r2, #24]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d90b      	bls.n	8007fc4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	69d9      	ldr	r1, [r3, #28]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8b1a      	ldrh	r2, [r3, #24]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	7b5b      	ldrb	r3, [r3, #13]
 8007fb8:	2001      	movs	r0, #1
 8007fba:	9000      	str	r0, [sp, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fda8 	bl	8009b12 <USBH_BulkSendData>
 8007fc2:	e00b      	b.n	8007fdc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	7b5b      	ldrb	r3, [r3, #13]
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	9000      	str	r0, [sp, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 fd9b 	bl	8009b12 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007fe4:	e057      	b.n	8008096 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	7b5b      	ldrb	r3, [r3, #13]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f005 fcc9 	bl	800d984 <USBH_LL_GetURBState>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d136      	bne.n	800806a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	8b12      	ldrh	r2, [r2, #24]
 8008004:	4293      	cmp	r3, r2
 8008006:	d90e      	bls.n	8008026 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	8b12      	ldrh	r2, [r2, #24]
 8008010:	1a9a      	subs	r2, r3, r2
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	8b12      	ldrh	r2, [r2, #24]
 800801e:	441a      	add	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	61da      	str	r2, [r3, #28]
 8008024:	e002      	b.n	800802c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800803c:	e006      	b.n	800804c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f892 	bl	8008170 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008060:	2300      	movs	r3, #0
 8008062:	2200      	movs	r2, #0
 8008064:	f001 ffd8 	bl	800a018 <osMessageQueuePut>
      break;
 8008068:	e014      	b.n	8008094 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d111      	bne.n	8008094 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2204      	movs	r2, #4
 800807c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800808c:	2300      	movs	r3, #0
 800808e:	2200      	movs	r2, #0
 8008090:	f001 ffc2 	bl	800a018 <osMessageQueuePut>
      break;
 8008094:	bf00      	nop
  }
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b086      	sub	sp, #24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d002      	beq.n	80080c4 <CDC_ProcessReception+0x26>
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d00e      	beq.n	80080e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80080c2:	e051      	b.n	8008168 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6a19      	ldr	r1, [r3, #32]
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	8b5a      	ldrh	r2, [r3, #26]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	7b1b      	ldrb	r3, [r3, #12]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fd43 	bl	8009b5c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2204      	movs	r2, #4
 80080da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80080de:	e043      	b.n	8008168 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	7b1b      	ldrb	r3, [r3, #12]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f005 fc4c 	bl	800d984 <USBH_LL_GetURBState>
 80080ec:	4603      	mov	r3, r0
 80080ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80080f0:	7cfb      	ldrb	r3, [r7, #19]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d137      	bne.n	8008166 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	7b1b      	ldrb	r3, [r3, #12]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f005 fbaf 	bl	800d860 <USBH_LL_GetLastXferSize>
 8008102:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d016      	beq.n	800813c <CDC_ProcessReception+0x9e>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	8b5b      	ldrh	r3, [r3, #26]
 8008112:	461a      	mov	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4293      	cmp	r3, r2
 8008118:	d910      	bls.n	800813c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	6a1a      	ldr	r2, [r3, #32]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	441a      	add	r2, r3
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2203      	movs	r2, #3
 8008136:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800813a:	e006      	b.n	800814a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f81d 	bl	8008184 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	f001 ff59 	bl	800a018 <osMessageQueuePut>
      break;
 8008166:	bf00      	nop
  }
}
 8008168:	bf00      	nop
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081c0:	2302      	movs	r3, #2
 80081c2:	e044      	b.n	800824e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	79fa      	ldrb	r2, [r7, #7]
 80081c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 f841 	bl	8008264 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8008210:	2200      	movs	r2, #0
 8008212:	2104      	movs	r1, #4
 8008214:	2010      	movs	r0, #16
 8008216:	f001 fe8c 	bl	8009f32 <osMessageQueueNew>
 800821a:	4602      	mov	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <USBH_Init+0xac>)
 8008224:	4a0d      	ldr	r2, [pc, #52]	; (800825c <USBH_Init+0xb0>)
 8008226:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008228:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <USBH_Init+0xac>)
 800822a:	2280      	movs	r2, #128	; 0x80
 800822c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <USBH_Init+0xac>)
 8008230:	2218      	movs	r2, #24
 8008232:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <USBH_Init+0xac>)
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	4809      	ldr	r0, [pc, #36]	; (8008260 <USBH_Init+0xb4>)
 800823a:	f001 fdcd 	bl	8009dd8 <osThreadNew>
 800823e:	4602      	mov	r2, r0
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f005 fa4c 	bl	800d6e4 <USBH_LL_Init>

  return USBH_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20004d50 	.word	0x20004d50
 800825c:	0800e534 	.word	0x0800e534
 8008260:	08008ecd 	.word	0x08008ecd

08008264 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e009      	b.n	800828a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	33e0      	adds	r3, #224	; 0xe0
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	2200      	movs	r2, #0
 8008282:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b0e      	cmp	r3, #14
 800828e:	d9f2      	bls.n	8008276 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e009      	b.n	80082aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b0:	d3f1      	bcc.n	8008296 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2240      	movs	r2, #64	; 0x40
 80082d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d016      	beq.n	800834e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10e      	bne.n	8008348 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008330:	1c59      	adds	r1, r3, #1
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	33de      	adds	r3, #222	; 0xde
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
 8008346:	e004      	b.n	8008352 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	73fb      	strb	r3, [r7, #15]
 800834c:	e001      	b.n	8008352 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800834e:	2302      	movs	r3, #2
 8008350:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	429a      	cmp	r2, r3
 800837a:	d204      	bcs.n	8008386 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008384:	e001      	b.n	800838a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008386:	2302      	movs	r3, #2
 8008388:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	4608      	mov	r0, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	461a      	mov	r2, r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	70fb      	strb	r3, [r7, #3]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70bb      	strb	r3, [r7, #2]
 80083ae:	4613      	mov	r3, r2
 80083b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083c2:	e025      	b.n	8008410 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	221a      	movs	r2, #26
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	3308      	adds	r3, #8
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	3302      	adds	r3, #2
 80083d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	795b      	ldrb	r3, [r3, #5]
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d002      	beq.n	80083e6 <USBH_FindInterface+0x4e>
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	2bff      	cmp	r3, #255	; 0xff
 80083e4:	d111      	bne.n	800840a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083ea:	78ba      	ldrb	r2, [r7, #2]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d002      	beq.n	80083f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083f0:	78bb      	ldrb	r3, [r7, #2]
 80083f2:	2bff      	cmp	r3, #255	; 0xff
 80083f4:	d109      	bne.n	800840a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083fa:	787a      	ldrb	r2, [r7, #1]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d002      	beq.n	8008406 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008400:	787b      	ldrb	r3, [r7, #1]
 8008402:	2bff      	cmp	r3, #255	; 0xff
 8008404:	d101      	bne.n	800840a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	e006      	b.n	8008418 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	3301      	adds	r3, #1
 800840e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d9d6      	bls.n	80083c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008416:	23ff      	movs	r3, #255	; 0xff
}
 8008418:	4618      	mov	r0, r3
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f005 f99f 	bl	800d770 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008432:	2101      	movs	r1, #1
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f005 fab8 	bl	800d9aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af04      	add	r7, sp, #16
 800844a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800844c:	2302      	movs	r3, #2
 800844e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b01      	cmp	r3, #1
 800845e:	d102      	bne.n	8008466 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2203      	movs	r2, #3
 8008464:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b0b      	cmp	r3, #11
 800846e:	f200 823c 	bhi.w	80088ea <USBH_Process+0x4a6>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBH_Process+0x34>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	080084a9 	.word	0x080084a9
 800847c:	080084f7 	.word	0x080084f7
 8008480:	0800857b 	.word	0x0800857b
 8008484:	08008869 	.word	0x08008869
 8008488:	080088eb 	.word	0x080088eb
 800848c:	0800863b 	.word	0x0800863b
 8008490:	080087f3 	.word	0x080087f3
 8008494:	0800868d 	.word	0x0800868d
 8008498:	080086c9 	.word	0x080086c9
 800849c:	08008703 	.word	0x08008703
 80084a0:	0800874b 	.word	0x0800874b
 80084a4:	08008851 	.word	0x08008851
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 821c 	beq.w	80088ee <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80084bc:	20c8      	movs	r0, #200	; 0xc8
 80084be:	f005 fabb 	bl	800da38 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f005 f9b1 	bl	800d82a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	f001 fd92 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80084f4:	e1fb      	b.n	80088ee <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d107      	bne.n	8008510 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	e025      	b.n	800855c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800851a:	d914      	bls.n	8008546 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008522:	3301      	adds	r3, #1
 8008524:	b2da      	uxtb	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008532:	2b03      	cmp	r3, #3
 8008534:	d903      	bls.n	800853e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	220d      	movs	r2, #13
 800853a:	701a      	strb	r2, [r3, #0]
 800853c:	e00e      	b.n	800855c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e00a      	b.n	800855c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800854c:	f103 020a 	add.w	r2, r3, #10
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008556:	200a      	movs	r0, #10
 8008558:	f005 fa6e 	bl	800da38 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008570:	2300      	movs	r3, #0
 8008572:	2200      	movs	r2, #0
 8008574:	f001 fd50 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 8008578:	e1c0      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800858a:	2104      	movs	r1, #4
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008590:	2064      	movs	r0, #100	; 0x64
 8008592:	f005 fa51 	bl	800da38 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f005 f920 	bl	800d7dc <USBH_LL_GetSpeed>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2205      	movs	r2, #5
 80085aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fb21 	bl	8009bf6 <USBH_AllocPipe>
 80085b4:	4603      	mov	r3, r0
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085bc:	2180      	movs	r1, #128	; 0x80
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fb19 	bl	8009bf6 <USBH_AllocPipe>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7919      	ldrb	r1, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085e0:	b292      	uxth	r2, r2
 80085e2:	9202      	str	r2, [sp, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	9201      	str	r2, [sp, #4]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4603      	mov	r3, r0
 80085ec:	2280      	movs	r2, #128	; 0x80
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 fad2 	bl	8009b98 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7959      	ldrb	r1, [r3, #5]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008608:	b292      	uxth	r2, r2
 800860a:	9202      	str	r2, [sp, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	9201      	str	r2, [sp, #4]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4603      	mov	r3, r0
 8008614:	2200      	movs	r2, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fabe 	bl	8009b98 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008630:	2300      	movs	r3, #0
 8008632:	2200      	movs	r2, #0
 8008634:	f001 fcf0 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 8008638:	e160      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f964 	bl	8008908 <USBH_HandleEnum>
 8008640:	4603      	mov	r3, r0
 8008642:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	f040 8152 	bne.w	80088f2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800865c:	2b01      	cmp	r3, #1
 800865e:	d103      	bne.n	8008668 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2208      	movs	r2, #8
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	e002      	b.n	800866e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2207      	movs	r2, #7
 800866c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2205      	movs	r2, #5
 8008672:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008682:	2300      	movs	r3, #0
 8008684:	2200      	movs	r2, #0
 8008686:	f001 fcc7 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800868a:	e132      	b.n	80088f2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 812f 	beq.w	80088f6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2208      	movs	r2, #8
 80086a8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2205      	movs	r2, #5
 80086ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086be:	2300      	movs	r3, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	f001 fca9 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 80086c6:	e116      	b.n	80088f6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fcf8 	bl	80090c8 <USBH_SetCfg>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d102      	bne.n	80086e4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2209      	movs	r2, #9
 80086e2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	f001 fc8c 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 8008700:	e0fc      	b.n	80088fc <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008710:	2101      	movs	r1, #1
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fcfb 	bl	800910e <USBH_SetFeature>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	220a      	movs	r2, #10
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e002      	b.n	800872c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	220a      	movs	r2, #10
 800872a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008740:	2300      	movs	r3, #0
 8008742:	2200      	movs	r2, #0
 8008744:	f001 fc68 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 8008748:	e0d8      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008750:	2b00      	cmp	r3, #0
 8008752:	d03f      	beq.n	80087d4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
 8008760:	e016      	b.n	8008790 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	32de      	adds	r2, #222	; 0xde
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	791a      	ldrb	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008774:	429a      	cmp	r2, r3
 8008776:	d108      	bne.n	800878a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008778:	7bfa      	ldrb	r2, [r7, #15]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	32de      	adds	r2, #222	; 0xde
 800877e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008788:	e005      	b.n	8008796 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	3301      	adds	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0e5      	beq.n	8008762 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d016      	beq.n	80087ce <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2206      	movs	r2, #6
 80087b6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087be:	2103      	movs	r1, #3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	4798      	blx	r3
 80087c4:	e006      	b.n	80087d4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	220d      	movs	r2, #13
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	e002      	b.n	80087d4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	220d      	movs	r2, #13
 80087d2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2205      	movs	r2, #5
 80087d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80087e8:	2300      	movs	r3, #0
 80087ea:	2200      	movs	r2, #0
 80087ec:	f001 fc14 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 80087f0:	e084      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d017      	beq.n	800882c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d103      	bne.n	800881c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	220b      	movs	r2, #11
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	e00a      	b.n	8008832 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d106      	bne.n	8008832 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	220d      	movs	r2, #13
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e002      	b.n	8008832 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	220d      	movs	r2, #13
 8008830:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2205      	movs	r2, #5
 8008836:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	f001 fbe5 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 800884e:	e055      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d04f      	beq.n	80088fa <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	4798      	blx	r3
      }
      break;
 8008866:	e048      	b.n	80088fa <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff fcf7 	bl	8008264 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800887c:	2b00      	cmp	r3, #0
 800887e:	d009      	beq.n	8008894 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088a4:	2105      	movs	r1, #5
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d107      	bne.n	80088c6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff fdb0 	bl	8008424 <USBH_Start>
 80088c4:	e002      	b.n	80088cc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f004 ff52 	bl	800d770 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088e0:	2300      	movs	r3, #0
 80088e2:	2200      	movs	r2, #0
 80088e4:	f001 fb98 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      break;
 80088e8:	e008      	b.n	80088fc <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 80088ea:	bf00      	nop
 80088ec:	e006      	b.n	80088fc <USBH_Process+0x4b8>
      break;
 80088ee:	bf00      	nop
 80088f0:	e004      	b.n	80088fc <USBH_Process+0x4b8>
      break;
 80088f2:	bf00      	nop
 80088f4:	e002      	b.n	80088fc <USBH_Process+0x4b8>
    break;
 80088f6:	bf00      	nop
 80088f8:	e000      	b.n	80088fc <USBH_Process+0x4b8>
      break;
 80088fa:	bf00      	nop
  }
  return USBH_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop

08008908 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af04      	add	r7, sp, #16
 800890e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008910:	2301      	movs	r3, #1
 8008912:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008914:	2301      	movs	r3, #1
 8008916:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b07      	cmp	r3, #7
 800891e:	f200 8208 	bhi.w	8008d32 <USBH_HandleEnum+0x42a>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBH_HandleEnum+0x20>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008949 	.word	0x08008949
 800892c:	08008a07 	.word	0x08008a07
 8008930:	08008a71 	.word	0x08008a71
 8008934:	08008aff 	.word	0x08008aff
 8008938:	08008b69 	.word	0x08008b69
 800893c:	08008bd9 	.word	0x08008bd9
 8008940:	08008c75 	.word	0x08008c75
 8008944:	08008cf3 	.word	0x08008cf3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008948:	2108      	movs	r1, #8
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 faec 	bl	8008f28 <USBH_Get_DevDesc>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d130      	bne.n	80089bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7919      	ldrb	r1, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800897e:	b292      	uxth	r2, r2
 8008980:	9202      	str	r2, [sp, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	9201      	str	r2, [sp, #4]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4603      	mov	r3, r0
 800898a:	2280      	movs	r2, #128	; 0x80
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 f903 	bl	8009b98 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	7959      	ldrb	r1, [r3, #5]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089a6:	b292      	uxth	r2, r2
 80089a8:	9202      	str	r2, [sp, #8]
 80089aa:	2200      	movs	r2, #0
 80089ac:	9201      	str	r2, [sp, #4]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	4603      	mov	r3, r0
 80089b2:	2200      	movs	r2, #0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f8ef 	bl	8009b98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089ba:	e1bc      	b.n	8008d36 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b03      	cmp	r3, #3
 80089c0:	f040 81b9 	bne.w	8008d36 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089ca:	3301      	adds	r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d903      	bls.n	80089e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	220d      	movs	r2, #13
 80089e2:	701a      	strb	r2, [r3, #0]
      break;
 80089e4:	e1a7      	b.n	8008d36 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	795b      	ldrb	r3, [r3, #5]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 f923 	bl	8009c38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	791b      	ldrb	r3, [r3, #4]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f91d 	bl	8009c38 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
      break;
 8008a04:	e197      	b.n	8008d36 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008a06:	2112      	movs	r1, #18
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fa8d 	bl	8008f28 <USBH_Get_DevDesc>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a1e:	e18c      	b.n	8008d3a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	f040 8189 	bne.w	8008d3a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a2e:	3301      	adds	r3, #1
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d903      	bls.n	8008a4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220d      	movs	r2, #13
 8008a46:	701a      	strb	r2, [r3, #0]
      break;
 8008a48:	e177      	b.n	8008d3a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	795b      	ldrb	r3, [r3, #5]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f8f1 	bl	8009c38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	791b      	ldrb	r3, [r3, #4]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f8eb 	bl	8009c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
      break;
 8008a6e:	e164      	b.n	8008d3a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008a70:	2101      	movs	r1, #1
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fb04 	bl	8009080 <USBH_SetAddress>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d132      	bne.n	8008ae8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008a82:	2002      	movs	r0, #2
 8008a84:	f004 ffd8 	bl	800da38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2203      	movs	r2, #3
 8008a94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7919      	ldrb	r1, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008aaa:	b292      	uxth	r2, r2
 8008aac:	9202      	str	r2, [sp, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	9201      	str	r2, [sp, #4]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2280      	movs	r2, #128	; 0x80
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 f86d 	bl	8009b98 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7959      	ldrb	r1, [r3, #5]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ad2:	b292      	uxth	r2, r2
 8008ad4:	9202      	str	r2, [sp, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	9201      	str	r2, [sp, #4]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	4603      	mov	r3, r0
 8008ade:	2200      	movs	r2, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 f859 	bl	8009b98 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ae6:	e12a      	b.n	8008d3e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	f040 8127 	bne.w	8008d3e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	220d      	movs	r2, #13
 8008af4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	705a      	strb	r2, [r3, #1]
      break;
 8008afc:	e11f      	b.n	8008d3e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008afe:	2109      	movs	r1, #9
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fa39 	bl	8008f78 <USBH_Get_CfgDesc>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2204      	movs	r2, #4
 8008b14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b16:	e114      	b.n	8008d42 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	f040 8111 	bne.w	8008d42 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b26:	3301      	adds	r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d903      	bls.n	8008b42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	220d      	movs	r2, #13
 8008b3e:	701a      	strb	r2, [r3, #0]
      break;
 8008b40:	e0ff      	b.n	8008d42 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	795b      	ldrb	r3, [r3, #5]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f875 	bl	8009c38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	791b      	ldrb	r3, [r3, #4]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f86f 	bl	8009c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
      break;
 8008b66:	e0ec      	b.n	8008d42 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fa01 	bl	8008f78 <USBH_Get_CfgDesc>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d103      	bne.n	8008b88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2205      	movs	r2, #5
 8008b84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b86:	e0de      	b.n	8008d46 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f040 80db 	bne.w	8008d46 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b96:	3301      	adds	r3, #1
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d903      	bls.n	8008bb2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	220d      	movs	r2, #13
 8008bae:	701a      	strb	r2, [r3, #0]
      break;
 8008bb0:	e0c9      	b.n	8008d46 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	795b      	ldrb	r3, [r3, #5]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f83d 	bl	8009c38 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	791b      	ldrb	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f837 	bl	8009c38 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	e0b6      	b.n	8008d46 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d036      	beq.n	8008c50 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bee:	23ff      	movs	r3, #255	; 0xff
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f9e5 	bl	8008fc0 <USBH_Get_StringDesc>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d111      	bne.n	8008c24 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2206      	movs	r2, #6
 8008c04:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2205      	movs	r2, #5
 8008c0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f001 f9fb 	bl	800a018 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c22:	e092      	b.n	8008d4a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	f040 808f 	bne.w	8008d4a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2206      	movs	r2, #6
 8008c30:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2205      	movs	r2, #5
 8008c36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008c46:	2300      	movs	r3, #0
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f001 f9e5 	bl	800a018 <osMessageQueuePut>
      break;
 8008c4e:	e07c      	b.n	8008d4a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2206      	movs	r2, #6
 8008c54:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2205      	movs	r2, #5
 8008c5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f001 f9d3 	bl	800a018 <osMessageQueuePut>
      break;
 8008c72:	e06a      	b.n	8008d4a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d027      	beq.n	8008cce <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c8a:	23ff      	movs	r3, #255	; 0xff
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f997 	bl	8008fc0 <USBH_Get_StringDesc>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d103      	bne.n	8008ca4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2207      	movs	r2, #7
 8008ca0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ca2:	e054      	b.n	8008d4e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d151      	bne.n	8008d4e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2207      	movs	r2, #7
 8008cae:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f001 f9a6 	bl	800a018 <osMessageQueuePut>
      break;
 8008ccc:	e03f      	b.n	8008d4e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2205      	movs	r2, #5
 8008cd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2200      	movs	r2, #0
 8008cec:	f001 f994 	bl	800a018 <osMessageQueuePut>
      break;
 8008cf0:	e02d      	b.n	8008d4e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d017      	beq.n	8008d2c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d08:	23ff      	movs	r3, #255	; 0xff
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f958 	bl	8008fc0 <USBH_Get_StringDesc>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008d1e:	e018      	b.n	8008d52 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d115      	bne.n	8008d52 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2a:	e012      	b.n	8008d52 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e00f      	b.n	8008d52 <USBH_HandleEnum+0x44a>

    default:
      break;
 8008d32:	bf00      	nop
 8008d34:	e00e      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d36:	bf00      	nop
 8008d38:	e00c      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e00a      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e008      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d42:	bf00      	nop
 8008d44:	e006      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d46:	bf00      	nop
 8008d48:	e004      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e002      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <USBH_HandleEnum+0x44c>
      break;
 8008d52:	bf00      	nop
  }
  return Status;
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f804 	bl	8008da2 <USBH_HandleSof>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b0b      	cmp	r3, #11
 8008db2:	d10a      	bne.n	8008dca <USBH_HandleSof+0x28>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
  }
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008df6:	2300      	movs	r3, #0
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f001 f90d 	bl	800a018 <osMessageQueuePut>
#endif
#endif

  return;
 8008dfe:	bf00      	nop
}
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e16:	bf00      	nop
}
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f001 f8dd 	bl	800a018 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f004 fc8c 	bl	800d7a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fecf 	bl	8009c38 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	795b      	ldrb	r3, [r3, #5]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fec9 	bl	8009c38 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f001 f8ab 	bl	800a018 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f001 f8f7 	bl	800a0d8 <osMessageQueueGet>
 8008eea:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff faa6 	bl	8008444 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008ef8:	e7ec      	b.n	8008ed4 <USBH_Process_OS+0x8>

08008efa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008f16:	2300      	movs	r3, #0
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f001 f87d 	bl	800a018 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f46:	2100      	movs	r1, #0
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f864 	bl	8009016 <USBH_GetDescriptor>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	b292      	uxth	r2, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f000 f918 	bl	800919e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	331c      	adds	r3, #28
 8008f88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008f8a:	887b      	ldrh	r3, [r7, #2]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f94:	2100      	movs	r1, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f83d 	bl	8009016 <USBH_GetDescriptor>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	72fb      	strb	r3, [r7, #11]
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d107      	bne.n	8008fb6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008fac:	887a      	ldrh	r2, [r7, #2]
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f964 	bl	800927e <USBH_ParseCfgDesc>
  }

  return status;
 8008fb6:	7afb      	ldrb	r3, [r7, #11]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	460b      	mov	r3, r1
 8008fce:	72fb      	strb	r3, [r7, #11]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008fd4:	7afb      	ldrb	r3, [r7, #11]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008fdc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	2100      	movs	r1, #0
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f812 	bl	8009016 <USBH_GetDescriptor>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	75fb      	strb	r3, [r7, #23]
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d107      	bne.n	800900c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009002:	893a      	ldrh	r2, [r7, #8]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fa37 	bl	800947a <USBH_ParseStringDesc>
  }

  return status;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	72fb      	strb	r3, [r7, #11]
 8009024:	4613      	mov	r3, r2
 8009026:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	789b      	ldrb	r3, [r3, #2]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d11c      	bne.n	800906a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009036:	b2da      	uxtb	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2206      	movs	r2, #6
 8009040:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	893a      	ldrh	r2, [r7, #8]
 8009046:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009048:	893b      	ldrh	r3, [r7, #8]
 800904a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800904e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009052:	d104      	bne.n	800905e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f240 4209 	movw	r2, #1033	; 0x409
 800905a:	829a      	strh	r2, [r3, #20]
 800905c:	e002      	b.n	8009064 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8b3a      	ldrh	r2, [r7, #24]
 8009068:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800906a:	8b3b      	ldrh	r3, [r7, #24]
 800906c:	461a      	mov	r2, r3
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fa50 	bl	8009516 <USBH_CtlReq>
 8009076:	4603      	mov	r3, r0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	789b      	ldrb	r3, [r3, #2]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d10f      	bne.n	80090b4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2205      	movs	r2, #5
 800909e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fa2c 	bl	8009516 <USBH_CtlReq>
 80090be:	4603      	mov	r3, r0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	789b      	ldrb	r3, [r3, #2]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d10e      	bne.n	80090fa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2209      	movs	r2, #9
 80090e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	887a      	ldrh	r2, [r7, #2]
 80090ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2100      	movs	r1, #0
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa09 	bl	8009516 <USBH_CtlReq>
 8009104:	4603      	mov	r3, r0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b082      	sub	sp, #8
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	789b      	ldrb	r3, [r3, #2]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10f      	bne.n	8009142 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2203      	movs	r2, #3
 800912c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800912e:	78fb      	ldrb	r3, [r7, #3]
 8009130:	b29a      	uxth	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009142:	2200      	movs	r2, #0
 8009144:	2100      	movs	r1, #0
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9e5 	bl	8009516 <USBH_CtlReq>
 800914c:	4603      	mov	r3, r0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	789b      	ldrb	r3, [r3, #2]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d10f      	bne.n	800918a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2202      	movs	r2, #2
 800916e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	b29a      	uxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800918a:	2200      	movs	r2, #0
 800918c:	2100      	movs	r1, #0
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9c1 	bl	8009516 <USBH_CtlReq>
 8009194:	4603      	mov	r3, r0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	4613      	mov	r3, r2
 80091aa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	781a      	ldrb	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	785a      	ldrb	r2, [r3, #1]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3302      	adds	r3, #2
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3303      	adds	r3, #3
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4313      	orrs	r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	791a      	ldrb	r2, [r3, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	795a      	ldrb	r2, [r3, #5]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	799a      	ldrb	r2, [r3, #6]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	79da      	ldrb	r2, [r3, #7]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d939      	bls.n	8009272 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3308      	adds	r3, #8
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b29a      	uxth	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	3309      	adds	r3, #9
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b29b      	uxth	r3, r3
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	b29b      	uxth	r3, r3
 8009212:	4313      	orrs	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	330a      	adds	r3, #10
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b29a      	uxth	r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	330b      	adds	r3, #11
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	b29b      	uxth	r3, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	330c      	adds	r3, #12
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b29a      	uxth	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	330d      	adds	r3, #13
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	7b9a      	ldrb	r2, [r3, #14]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	7bda      	ldrb	r2, [r3, #15]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	7c1a      	ldrb	r2, [r3, #16]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	7c5a      	ldrb	r2, [r3, #17]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	745a      	strb	r2, [r3, #17]
  }
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b08a      	sub	sp, #40	; 0x28
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	4613      	mov	r3, r2
 800928a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	781a      	ldrb	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	785a      	ldrb	r2, [r3, #1]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	3302      	adds	r3, #2
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	3303      	adds	r3, #3
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4313      	orrs	r3, r2
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	791a      	ldrb	r2, [r3, #4]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	795a      	ldrb	r2, [r3, #5]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	799a      	ldrb	r2, [r3, #6]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	79da      	ldrb	r2, [r3, #7]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	7a1a      	ldrb	r2, [r3, #8]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d95f      	bls.n	80093ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80092fa:	2309      	movs	r3, #9
 80092fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80092fe:	2300      	movs	r3, #0
 8009300:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009302:	e051      	b.n	80093a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009304:	f107 0316 	add.w	r3, r7, #22
 8009308:	4619      	mov	r1, r3
 800930a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800930c:	f000 f8e8 	bl	80094e0 <USBH_GetNextDesc>
 8009310:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	785b      	ldrb	r3, [r3, #1]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d146      	bne.n	80093a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800931a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800931e:	221a      	movs	r2, #26
 8009320:	fb02 f303 	mul.w	r3, r2, r3
 8009324:	3308      	adds	r3, #8
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4413      	add	r3, r2
 800932a:	3302      	adds	r3, #2
 800932c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800932e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009330:	69f8      	ldr	r0, [r7, #28]
 8009332:	f000 f846 	bl	80093c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800933c:	2300      	movs	r3, #0
 800933e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009340:	e022      	b.n	8009388 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009342:	f107 0316 	add.w	r3, r7, #22
 8009346:	4619      	mov	r1, r3
 8009348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800934a:	f000 f8c9 	bl	80094e0 <USBH_GetNextDesc>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	2b05      	cmp	r3, #5
 8009356:	d117      	bne.n	8009388 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800935c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009360:	3201      	adds	r2, #1
 8009362:	00d2      	lsls	r2, r2, #3
 8009364:	211a      	movs	r1, #26
 8009366:	fb01 f303 	mul.w	r3, r1, r3
 800936a:	4413      	add	r3, r2
 800936c:	3308      	adds	r3, #8
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	3304      	adds	r3, #4
 8009374:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009378:	69b8      	ldr	r0, [r7, #24]
 800937a:	f000 f851 	bl	8009420 <USBH_ParseEPDesc>
            ep_ix++;
 800937e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009382:	3301      	adds	r3, #1
 8009384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	791b      	ldrb	r3, [r3, #4]
 800938c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009390:	429a      	cmp	r2, r3
 8009392:	d204      	bcs.n	800939e <USBH_ParseCfgDesc+0x120>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	885a      	ldrh	r2, [r3, #2]
 8009398:	8afb      	ldrh	r3, [r7, #22]
 800939a:	429a      	cmp	r2, r3
 800939c:	d8d1      	bhi.n	8009342 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800939e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093a2:	3301      	adds	r3, #1
 80093a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d804      	bhi.n	80093ba <USBH_ParseCfgDesc+0x13c>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	885a      	ldrh	r2, [r3, #2]
 80093b4:	8afb      	ldrh	r3, [r7, #22]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d8a4      	bhi.n	8009304 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80093ba:	bf00      	nop
 80093bc:	3728      	adds	r7, #40	; 0x28
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781a      	ldrb	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	785a      	ldrb	r2, [r3, #1]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	789a      	ldrb	r2, [r3, #2]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	78da      	ldrb	r2, [r3, #3]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	791a      	ldrb	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	795a      	ldrb	r2, [r3, #5]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	799a      	ldrb	r2, [r3, #6]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	79da      	ldrb	r2, [r3, #7]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	7a1a      	ldrb	r2, [r3, #8]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	721a      	strb	r2, [r3, #8]
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	785a      	ldrb	r2, [r3, #1]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	789a      	ldrb	r2, [r3, #2]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	78da      	ldrb	r2, [r3, #3]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	3304      	adds	r3, #4
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b29a      	uxth	r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	3305      	adds	r3, #5
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	b29b      	uxth	r3, r3
 800945a:	021b      	lsls	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	4313      	orrs	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	799a      	ldrb	r2, [r3, #6]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	719a      	strb	r2, [r3, #6]
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800947a:	b480      	push	{r7}
 800947c:	b087      	sub	sp, #28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	4613      	mov	r3, r2
 8009486:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d120      	bne.n	80094d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	1e9a      	subs	r2, r3, #2
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	4293      	cmp	r3, r2
 800949c:	bf28      	it	cs
 800949e:	4613      	movcs	r3, r2
 80094a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3302      	adds	r3, #2
 80094a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80094a8:	2300      	movs	r3, #0
 80094aa:	82fb      	strh	r3, [r7, #22]
 80094ac:	e00b      	b.n	80094c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094ae:	8afb      	ldrh	r3, [r7, #22]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	3301      	adds	r3, #1
 80094be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094c0:	8afb      	ldrh	r3, [r7, #22]
 80094c2:	3302      	adds	r3, #2
 80094c4:	82fb      	strh	r3, [r7, #22]
 80094c6:	8afa      	ldrh	r2, [r7, #22]
 80094c8:	8abb      	ldrh	r3, [r7, #20]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d3ef      	bcc.n	80094ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
  }
}
 80094d4:	bf00      	nop
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	881a      	ldrh	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4413      	add	r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4413      	add	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009508:	68fb      	ldr	r3, [r7, #12]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	4613      	mov	r3, r2
 8009522:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009524:	2301      	movs	r3, #1
 8009526:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	789b      	ldrb	r3, [r3, #2]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d002      	beq.n	8009536 <USBH_CtlReq+0x20>
 8009530:	2b02      	cmp	r3, #2
 8009532:	d01d      	beq.n	8009570 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009534:	e043      	b.n	80095be <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	88fa      	ldrh	r2, [r7, #6]
 8009540:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2202      	movs	r2, #2
 800954c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2203      	movs	r2, #3
 8009556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	f000 fd55 	bl	800a018 <osMessageQueuePut>
      break;
 800956e:	e026      	b.n	80095be <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f829 	bl	80095c8 <USBH_HandleControl>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <USBH_CtlReq+0x70>
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d106      	bne.n	8009594 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	761a      	strb	r2, [r3, #24]
 8009592:	e005      	b.n	80095a0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	2b02      	cmp	r3, #2
 8009598:	d102      	bne.n	80095a0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2203      	movs	r2, #3
 80095a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80095b4:	2300      	movs	r3, #0
 80095b6:	2200      	movs	r2, #0
 80095b8:	f000 fd2e 	bl	800a018 <osMessageQueuePut>
      break;
 80095bc:	bf00      	nop
  }
  return status;
 80095be:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80095d0:	2301      	movs	r3, #1
 80095d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7e1b      	ldrb	r3, [r3, #24]
 80095dc:	3b01      	subs	r3, #1
 80095de:	2b0a      	cmp	r3, #10
 80095e0:	f200 8229 	bhi.w	8009a36 <USBH_HandleControl+0x46e>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBH_HandleControl+0x24>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009619 	.word	0x08009619
 80095f0:	08009633 	.word	0x08009633
 80095f4:	080096d5 	.word	0x080096d5
 80095f8:	080096fb 	.word	0x080096fb
 80095fc:	08009787 	.word	0x08009787
 8009600:	080097b1 	.word	0x080097b1
 8009604:	08009873 	.word	0x08009873
 8009608:	08009895 	.word	0x08009895
 800960c:	08009927 	.word	0x08009927
 8009610:	0800994d 	.word	0x0800994d
 8009614:	080099df 	.word	0x080099df
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0110 	add.w	r1, r3, #16
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	795b      	ldrb	r3, [r3, #5]
 8009622:	461a      	mov	r2, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa17 	bl	8009a58 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2202      	movs	r2, #2
 800962e:	761a      	strb	r2, [r3, #24]
      break;
 8009630:	e20c      	b.n	8009a4c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	795b      	ldrb	r3, [r3, #5]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f004 f9a3 	bl	800d984 <USBH_LL_GetURBState>
 800963e:	4603      	mov	r3, r0
 8009640:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d12c      	bne.n	80096a2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7c1b      	ldrb	r3, [r3, #16]
 800964c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009650:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	8adb      	ldrh	r3, [r3, #22]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800965a:	7b7b      	ldrb	r3, [r7, #13]
 800965c:	2b80      	cmp	r3, #128	; 0x80
 800965e:	d103      	bne.n	8009668 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2203      	movs	r2, #3
 8009664:	761a      	strb	r2, [r3, #24]
 8009666:	e00d      	b.n	8009684 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2205      	movs	r2, #5
 800966c:	761a      	strb	r2, [r3, #24]
 800966e:	e009      	b.n	8009684 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009670:	7b7b      	ldrb	r3, [r7, #13]
 8009672:	2b80      	cmp	r3, #128	; 0x80
 8009674:	d103      	bne.n	800967e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2209      	movs	r2, #9
 800967a:	761a      	strb	r2, [r3, #24]
 800967c:	e002      	b.n	8009684 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2207      	movs	r2, #7
 8009682:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2203      	movs	r2, #3
 8009688:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009698:	2300      	movs	r3, #0
 800969a:	2200      	movs	r2, #0
 800969c:	f000 fcbc 	bl	800a018 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096a0:	e1cb      	b.n	8009a3a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d003      	beq.n	80096b0 <USBH_HandleControl+0xe8>
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	f040 81c5 	bne.w	8009a3a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	220b      	movs	r2, #11
 80096b4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2203      	movs	r2, #3
 80096ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80096ca:	2300      	movs	r3, #0
 80096cc:	2200      	movs	r2, #0
 80096ce:	f000 fca3 	bl	800a018 <osMessageQueuePut>
      break;
 80096d2:	e1b2      	b.n	8009a3a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096da:	b29a      	uxth	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6899      	ldr	r1, [r3, #8]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	899a      	ldrh	r2, [r3, #12]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	791b      	ldrb	r3, [r3, #4]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f9f2 	bl	8009ad6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2204      	movs	r2, #4
 80096f6:	761a      	strb	r2, [r3, #24]
      break;
 80096f8:	e1a8      	b.n	8009a4c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f004 f93f 	bl	800d984 <USBH_LL_GetURBState>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d110      	bne.n	8009732 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2209      	movs	r2, #9
 8009714:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2203      	movs	r2, #3
 800971a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800972a:	2300      	movs	r3, #0
 800972c:	2200      	movs	r2, #0
 800972e:	f000 fc73 	bl	800a018 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d110      	bne.n	800975a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009738:	2303      	movs	r3, #3
 800973a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2203      	movs	r2, #3
 8009740:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009750:	2300      	movs	r3, #0
 8009752:	2200      	movs	r2, #0
 8009754:	f000 fc60 	bl	800a018 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009758:	e171      	b.n	8009a3e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b04      	cmp	r3, #4
 800975e:	f040 816e 	bne.w	8009a3e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	220b      	movs	r2, #11
 8009766:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2203      	movs	r2, #3
 800976c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	f000 fc4a 	bl	800a018 <osMessageQueuePut>
      break;
 8009784:	e15b      	b.n	8009a3e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6899      	ldr	r1, [r3, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	899a      	ldrh	r2, [r3, #12]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	795b      	ldrb	r3, [r3, #5]
 8009792:	2001      	movs	r0, #1
 8009794:	9000      	str	r0, [sp, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f978 	bl	8009a8c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2206      	movs	r2, #6
 80097ac:	761a      	strb	r2, [r3, #24]
      break;
 80097ae:	e14d      	b.n	8009a4c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	795b      	ldrb	r3, [r3, #5]
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f004 f8e4 	bl	800d984 <USBH_LL_GetURBState>
 80097bc:	4603      	mov	r3, r0
 80097be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d111      	bne.n	80097ea <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2207      	movs	r2, #7
 80097ca:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2203      	movs	r2, #3
 80097d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80097e0:	2300      	movs	r3, #0
 80097e2:	2200      	movs	r2, #0
 80097e4:	f000 fc18 	bl	800a018 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80097e8:	e12b      	b.n	8009a42 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	2b05      	cmp	r3, #5
 80097ee:	d113      	bne.n	8009818 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	220c      	movs	r2, #12
 80097f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80097f6:	2303      	movs	r3, #3
 80097f8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2203      	movs	r2, #3
 80097fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800980e:	2300      	movs	r3, #0
 8009810:	2200      	movs	r2, #0
 8009812:	f000 fc01 	bl	800a018 <osMessageQueuePut>
      break;
 8009816:	e114      	b.n	8009a42 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d111      	bne.n	8009842 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2205      	movs	r2, #5
 8009822:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2203      	movs	r2, #3
 8009828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009838:	2300      	movs	r3, #0
 800983a:	2200      	movs	r2, #0
 800983c:	f000 fbec 	bl	800a018 <osMessageQueuePut>
      break;
 8009840:	e0ff      	b.n	8009a42 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	2b04      	cmp	r3, #4
 8009846:	f040 80fc 	bne.w	8009a42 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	220b      	movs	r2, #11
 800984e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009850:	2302      	movs	r3, #2
 8009852:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2203      	movs	r2, #3
 8009858:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009868:	2300      	movs	r3, #0
 800986a:	2200      	movs	r2, #0
 800986c:	f000 fbd4 	bl	800a018 <osMessageQueuePut>
      break;
 8009870:	e0e7      	b.n	8009a42 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	2100      	movs	r1, #0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f92b 	bl	8009ad6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009886:	b29a      	uxth	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2208      	movs	r2, #8
 8009890:	761a      	strb	r2, [r3, #24]

      break;
 8009892:	e0db      	b.n	8009a4c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	791b      	ldrb	r3, [r3, #4]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f004 f872 	bl	800d984 <USBH_LL_GetURBState>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d113      	bne.n	80098d2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	220d      	movs	r2, #13
 80098ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2203      	movs	r2, #3
 80098b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80098c8:	2300      	movs	r3, #0
 80098ca:	2200      	movs	r2, #0
 80098cc:	f000 fba4 	bl	800a018 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098d0:	e0b9      	b.n	8009a46 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b04      	cmp	r3, #4
 80098d6:	d111      	bne.n	80098fc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	220b      	movs	r2, #11
 80098dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2203      	movs	r2, #3
 80098e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80098f2:	2300      	movs	r3, #0
 80098f4:	2200      	movs	r2, #0
 80098f6:	f000 fb8f 	bl	800a018 <osMessageQueuePut>
      break;
 80098fa:	e0a4      	b.n	8009a46 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b05      	cmp	r3, #5
 8009900:	f040 80a1 	bne.w	8009a46 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2203      	movs	r2, #3
 800990c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800991c:	2300      	movs	r3, #0
 800991e:	2200      	movs	r2, #0
 8009920:	f000 fb7a 	bl	800a018 <osMessageQueuePut>
      break;
 8009924:	e08f      	b.n	8009a46 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	795b      	ldrb	r3, [r3, #5]
 800992a:	2201      	movs	r2, #1
 800992c:	9200      	str	r2, [sp, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f8aa 	bl	8009a8c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800993e:	b29a      	uxth	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	220a      	movs	r2, #10
 8009948:	761a      	strb	r2, [r3, #24]
      break;
 800994a:	e07f      	b.n	8009a4c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	795b      	ldrb	r3, [r3, #5]
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f004 f816 	bl	800d984 <USBH_LL_GetURBState>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d113      	bne.n	800998a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	220d      	movs	r2, #13
 800996a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2203      	movs	r2, #3
 8009970:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8009980:	2300      	movs	r3, #0
 8009982:	2200      	movs	r2, #0
 8009984:	f000 fb48 	bl	800a018 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009988:	e05f      	b.n	8009a4a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d111      	bne.n	80099b4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2209      	movs	r2, #9
 8009994:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2203      	movs	r2, #3
 800999a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099aa:	2300      	movs	r3, #0
 80099ac:	2200      	movs	r2, #0
 80099ae:	f000 fb33 	bl	800a018 <osMessageQueuePut>
      break;
 80099b2:	e04a      	b.n	8009a4a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d147      	bne.n	8009a4a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220b      	movs	r2, #11
 80099be:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2203      	movs	r2, #3
 80099c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80099d4:	2300      	movs	r3, #0
 80099d6:	2200      	movs	r2, #0
 80099d8:	f000 fb1e 	bl	800a018 <osMessageQueuePut>
      break;
 80099dc:	e035      	b.n	8009a4a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7e5b      	ldrb	r3, [r3, #25]
 80099e2:	3301      	adds	r3, #1
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	765a      	strb	r2, [r3, #25]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7e5b      	ldrb	r3, [r3, #25]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d806      	bhi.n	8009a00 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80099fe:	e025      	b.n	8009a4c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a06:	2106      	movs	r1, #6
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	795b      	ldrb	r3, [r3, #5]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f90d 	bl	8009c38 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	791b      	ldrb	r3, [r3, #4]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f907 	bl	8009c38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a30:	2302      	movs	r3, #2
 8009a32:	73fb      	strb	r3, [r7, #15]
      break;
 8009a34:	e00a      	b.n	8009a4c <USBH_HandleControl+0x484>

    default:
      break;
 8009a36:	bf00      	nop
 8009a38:	e008      	b.n	8009a4c <USBH_HandleControl+0x484>
      break;
 8009a3a:	bf00      	nop
 8009a3c:	e006      	b.n	8009a4c <USBH_HandleControl+0x484>
      break;
 8009a3e:	bf00      	nop
 8009a40:	e004      	b.n	8009a4c <USBH_HandleControl+0x484>
      break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <USBH_HandleControl+0x484>
      break;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <USBH_HandleControl+0x484>
      break;
 8009a4a:	bf00      	nop
  }

  return status;
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop

08009a58 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009a66:	79f9      	ldrb	r1, [r7, #7]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	9302      	str	r3, [sp, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	2300      	movs	r3, #0
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	f003 ff50 	bl	800d922 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b088      	sub	sp, #32
 8009a90:	af04      	add	r7, sp, #16
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4611      	mov	r1, r2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	80fb      	strh	r3, [r7, #6]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ab0:	7979      	ldrb	r1, [r7, #5]
 8009ab2:	7e3b      	ldrb	r3, [r7, #24]
 8009ab4:	9303      	str	r3, [sp, #12]
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f003 ff2b 	bl	800d922 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af04      	add	r7, sp, #16
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	80fb      	strh	r3, [r7, #6]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009aec:	7979      	ldrb	r1, [r7, #5]
 8009aee:	2300      	movs	r3, #0
 8009af0:	9303      	str	r3, [sp, #12]
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	2301      	movs	r3, #1
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	2201      	movs	r2, #1
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f003 ff0d 	bl	800d922 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009b08:	2300      	movs	r3, #0

}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af04      	add	r7, sp, #16
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	60b9      	str	r1, [r7, #8]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	461a      	mov	r2, r3
 8009b20:	460b      	mov	r3, r1
 8009b22:	80fb      	strh	r3, [r7, #6]
 8009b24:	4613      	mov	r3, r2
 8009b26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b36:	7979      	ldrb	r1, [r7, #5]
 8009b38:	7e3b      	ldrb	r3, [r7, #24]
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	88fb      	ldrh	r3, [r7, #6]
 8009b3e:	9302      	str	r3, [sp, #8]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	2301      	movs	r3, #1
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	2302      	movs	r3, #2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f003 fee8 	bl	800d922 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af04      	add	r7, sp, #16
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4611      	mov	r1, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	80fb      	strh	r3, [r7, #6]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b72:	7979      	ldrb	r1, [r7, #5]
 8009b74:	2300      	movs	r3, #0
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	9301      	str	r3, [sp, #4]
 8009b80:	2301      	movs	r3, #1
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	2302      	movs	r3, #2
 8009b86:	2201      	movs	r2, #1
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f003 feca 	bl	800d922 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af04      	add	r7, sp, #16
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	70fb      	strb	r3, [r7, #3]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70bb      	strb	r3, [r7, #2]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009bb2:	7878      	ldrb	r0, [r7, #1]
 8009bb4:	78ba      	ldrb	r2, [r7, #2]
 8009bb6:	78f9      	ldrb	r1, [r7, #3]
 8009bb8:	8b3b      	ldrh	r3, [r7, #24]
 8009bba:	9302      	str	r3, [sp, #8]
 8009bbc:	7d3b      	ldrb	r3, [r7, #20]
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	7c3b      	ldrb	r3, [r7, #16]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f003 fe5d 	bl	800d886 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009be2:	78fb      	ldrb	r3, [r7, #3]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f003 fe7c 	bl	800d8e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f836 	bl	8009c74 <USBH_GetFreePipe>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d00a      	beq.n	8009c2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009c16:	78fa      	ldrb	r2, [r7, #3]
 8009c18:	89fb      	ldrh	r3, [r7, #14]
 8009c1a:	f003 030f 	and.w	r3, r3, #15
 8009c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	33e0      	adds	r3, #224	; 0xe0
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	b2db      	uxtb	r3, r3
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	2b0a      	cmp	r3, #10
 8009c48:	d80d      	bhi.n	8009c66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	33e0      	adds	r3, #224	; 0xe0
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	78fb      	ldrb	r3, [r7, #3]
 8009c58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	33e0      	adds	r3, #224	; 0xe0
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
 8009c84:	e00f      	b.n	8009ca6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	33e0      	adds	r3, #224	; 0xe0
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	e007      	b.n	8009cb0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	73fb      	strb	r3, [r7, #15]
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b0a      	cmp	r3, #10
 8009caa:	d9ec      	bls.n	8009c86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <__NVIC_SetPriority>:
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	db0a      	blt.n	8009ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	490c      	ldr	r1, [pc, #48]	; (8009d08 <__NVIC_SetPriority+0x4c>)
 8009cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cda:	0112      	lsls	r2, r2, #4
 8009cdc:	b2d2      	uxtb	r2, r2
 8009cde:	440b      	add	r3, r1
 8009ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ce4:	e00a      	b.n	8009cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4908      	ldr	r1, [pc, #32]	; (8009d0c <__NVIC_SetPriority+0x50>)
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	f003 030f 	and.w	r3, r3, #15
 8009cf2:	3b04      	subs	r3, #4
 8009cf4:	0112      	lsls	r2, r2, #4
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	761a      	strb	r2, [r3, #24]
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	e000e100 	.word	0xe000e100
 8009d0c:	e000ed00 	.word	0xe000ed00

08009d10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d14:	4b05      	ldr	r3, [pc, #20]	; (8009d2c <SysTick_Handler+0x1c>)
 8009d16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d18:	f001 ff12 	bl	800bb40 <xTaskGetSchedulerState>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d001      	beq.n	8009d26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d22:	f002 fcf9 	bl	800c718 <xPortSysTickHandler>
  }
}
 8009d26:	bf00      	nop
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	e000e010 	.word	0xe000e010

08009d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d34:	2100      	movs	r1, #0
 8009d36:	f06f 0004 	mvn.w	r0, #4
 8009d3a:	f7ff ffbf 	bl	8009cbc <__NVIC_SetPriority>
#endif
}
 8009d3e:	bf00      	nop
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d4a:	f3ef 8305 	mrs	r3, IPSR
 8009d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d56:	f06f 0305 	mvn.w	r3, #5
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	e00c      	b.n	8009d78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d5e:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <osKernelInitialize+0x44>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d66:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <osKernelInitialize+0x44>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	607b      	str	r3, [r7, #4]
 8009d70:	e002      	b.n	8009d78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d72:	f04f 33ff 	mov.w	r3, #4294967295
 8009d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d78:	687b      	ldr	r3, [r7, #4]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	200000c4 	.word	0x200000c4

08009d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	603b      	str	r3, [r7, #0]
  return(result);
 8009d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d9e:	f06f 0305 	mvn.w	r3, #5
 8009da2:	607b      	str	r3, [r7, #4]
 8009da4:	e010      	b.n	8009dc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <osKernelStart+0x48>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d109      	bne.n	8009dc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009dae:	f7ff ffbf 	bl	8009d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <osKernelStart+0x48>)
 8009db4:	2202      	movs	r2, #2
 8009db6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009db8:	f001 fa66 	bl	800b288 <vTaskStartScheduler>
      stat = osOK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	e002      	b.n	8009dc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dc8:	687b      	ldr	r3, [r7, #4]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200000c4 	.word	0x200000c4

08009dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	; 0x38
 8009ddc:	af04      	add	r7, sp, #16
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009de4:	2300      	movs	r3, #0
 8009de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de8:	f3ef 8305 	mrs	r3, IPSR
 8009dec:	617b      	str	r3, [r7, #20]
  return(result);
 8009dee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d17e      	bne.n	8009ef2 <osThreadNew+0x11a>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d07b      	beq.n	8009ef2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dfe:	2318      	movs	r3, #24
 8009e00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009e06:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d045      	beq.n	8009e9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <osThreadNew+0x48>
        name = attr->name;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d002      	beq.n	8009e2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d008      	beq.n	8009e46 <osThreadNew+0x6e>
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b38      	cmp	r3, #56	; 0x38
 8009e38:	d805      	bhi.n	8009e46 <osThreadNew+0x6e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <osThreadNew+0x72>
        return (NULL);
 8009e46:	2300      	movs	r3, #0
 8009e48:	e054      	b.n	8009ef4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	089b      	lsrs	r3, r3, #2
 8009e58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00e      	beq.n	8009e80 <osThreadNew+0xa8>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2bbb      	cmp	r3, #187	; 0xbb
 8009e68:	d90a      	bls.n	8009e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d006      	beq.n	8009e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <osThreadNew+0xa8>
        mem = 1;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	e010      	b.n	8009ea2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10c      	bne.n	8009ea2 <osThreadNew+0xca>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d108      	bne.n	8009ea2 <osThreadNew+0xca>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <osThreadNew+0xca>
          mem = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	e001      	b.n	8009ea2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d110      	bne.n	8009eca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009eb0:	9202      	str	r2, [sp, #8]
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6a3a      	ldr	r2, [r7, #32]
 8009ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fff6 	bl	800aeb0 <xTaskCreateStatic>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	613b      	str	r3, [r7, #16]
 8009ec8:	e013      	b.n	8009ef2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d110      	bne.n	8009ef2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	f107 0310 	add.w	r3, r7, #16
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f001 f841 	bl	800af6a <xTaskCreate>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d001      	beq.n	8009ef2 <osThreadNew+0x11a>
            hTask = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ef2:	693b      	ldr	r3, [r7, #16]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3728      	adds	r7, #40	; 0x28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f04:	f3ef 8305 	mrs	r3, IPSR
 8009f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <osDelay+0x1c>
    stat = osErrorISR;
 8009f10:	f06f 0305 	mvn.w	r3, #5
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	e007      	b.n	8009f28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 f97c 	bl	800b220 <vTaskDelay>
    }
  }

  return (stat);
 8009f28:	68fb      	ldr	r3, [r7, #12]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b08a      	sub	sp, #40	; 0x28
 8009f36:	af02      	add	r7, sp, #8
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f42:	f3ef 8305 	mrs	r3, IPSR
 8009f46:	613b      	str	r3, [r7, #16]
  return(result);
 8009f48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d15f      	bne.n	800a00e <osMessageQueueNew+0xdc>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d05c      	beq.n	800a00e <osMessageQueueNew+0xdc>
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d059      	beq.n	800a00e <osMessageQueueNew+0xdc>
    mem = -1;
 8009f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d029      	beq.n	8009fba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d012      	beq.n	8009f94 <osMessageQueueNew+0x62>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	2b4f      	cmp	r3, #79	; 0x4f
 8009f74:	d90e      	bls.n	8009f94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695a      	ldr	r2, [r3, #20]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d302      	bcc.n	8009f94 <osMessageQueueNew+0x62>
        mem = 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	61bb      	str	r3, [r7, #24]
 8009f92:	e014      	b.n	8009fbe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d110      	bne.n	8009fbe <osMessageQueueNew+0x8c>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10c      	bne.n	8009fbe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d108      	bne.n	8009fbe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d104      	bne.n	8009fbe <osMessageQueueNew+0x8c>
          mem = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e001      	b.n	8009fbe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d10b      	bne.n	8009fdc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691a      	ldr	r2, [r3, #16]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	9100      	str	r1, [sp, #0]
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 fa2e 	bl	800a434 <xQueueGenericCreateStatic>
 8009fd8:	61f8      	str	r0, [r7, #28]
 8009fda:	e008      	b.n	8009fee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fa9c 	bl	800a524 <xQueueGenericCreate>
 8009fec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00c      	beq.n	800a00e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	617b      	str	r3, [r7, #20]
 800a000:	e001      	b.n	800a006 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a006:	6979      	ldr	r1, [r7, #20]
 800a008:	69f8      	ldr	r0, [r7, #28]
 800a00a:	f000 fef3 	bl	800adf4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a00e:	69fb      	ldr	r3, [r7, #28]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a030:	f3ef 8305 	mrs	r3, IPSR
 800a034:	617b      	str	r3, [r7, #20]
  return(result);
 800a036:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d028      	beq.n	800a08e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <osMessageQueuePut+0x36>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <osMessageQueuePut+0x36>
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a04e:	f06f 0303 	mvn.w	r3, #3
 800a052:	61fb      	str	r3, [r7, #28]
 800a054:	e038      	b.n	800a0c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a056:	2300      	movs	r3, #0
 800a058:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a05a:	f107 0210 	add.w	r2, r7, #16
 800a05e:	2300      	movs	r3, #0
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	69b8      	ldr	r0, [r7, #24]
 800a064:	f000 fbba 	bl	800a7dc <xQueueGenericSendFromISR>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d003      	beq.n	800a076 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a06e:	f06f 0302 	mvn.w	r3, #2
 800a072:	61fb      	str	r3, [r7, #28]
 800a074:	e028      	b.n	800a0c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d025      	beq.n	800a0c8 <osMessageQueuePut+0xb0>
 800a07c:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <osMessageQueuePut+0xbc>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	e01c      	b.n	800a0c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <osMessageQueuePut+0x82>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d103      	bne.n	800a0a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a09a:	f06f 0303 	mvn.w	r3, #3
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e012      	b.n	800a0c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	69b8      	ldr	r0, [r7, #24]
 800a0aa:	f000 fa99 	bl	800a5e0 <xQueueGenericSend>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d009      	beq.n	800a0c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a0ba:	f06f 0301 	mvn.w	r3, #1
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	e002      	b.n	800a0c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a0c2:	f06f 0302 	mvn.w	r3, #2
 800a0c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a0c8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ee:	f3ef 8305 	mrs	r3, IPSR
 800a0f2:	617b      	str	r3, [r7, #20]
  return(result);
 800a0f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d028      	beq.n	800a14c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <osMessageQueueGet+0x34>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <osMessageQueueGet+0x34>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a10c:	f06f 0303 	mvn.w	r3, #3
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	e037      	b.n	800a184 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a118:	f107 0310 	add.w	r3, r7, #16
 800a11c:	461a      	mov	r2, r3
 800a11e:	68b9      	ldr	r1, [r7, #8]
 800a120:	69b8      	ldr	r0, [r7, #24]
 800a122:	f000 fcd7 	bl	800aad4 <xQueueReceiveFromISR>
 800a126:	4603      	mov	r3, r0
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d003      	beq.n	800a134 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a12c:	f06f 0302 	mvn.w	r3, #2
 800a130:	61fb      	str	r3, [r7, #28]
 800a132:	e027      	b.n	800a184 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d024      	beq.n	800a184 <osMessageQueueGet+0xac>
 800a13a:	4b15      	ldr	r3, [pc, #84]	; (800a190 <osMessageQueueGet+0xb8>)
 800a13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	e01b      	b.n	800a184 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <osMessageQueueGet+0x80>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a158:	f06f 0303 	mvn.w	r3, #3
 800a15c:	61fb      	str	r3, [r7, #28]
 800a15e:	e011      	b.n	800a184 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	69b8      	ldr	r0, [r7, #24]
 800a166:	f000 fbd5 	bl	800a914 <xQueueReceive>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d009      	beq.n	800a184 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a176:	f06f 0301 	mvn.w	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	e002      	b.n	800a184 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a17e:	f06f 0302 	mvn.w	r3, #2
 800a182:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a184:	69fb      	ldr	r3, [r7, #28]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	e000ed04 	.word	0xe000ed04

0800a194 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	4a06      	ldr	r2, [pc, #24]	; (800a1c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a1aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2280      	movs	r2, #128	; 0x80
 800a1b0:	601a      	str	r2, [r3, #0]
}
 800a1b2:	bf00      	nop
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	200000c8 	.word	0x200000c8
 800a1c4:	20000184 	.word	0x20000184

0800a1c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	4a07      	ldr	r2, [pc, #28]	; (800a1f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a1d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	4a06      	ldr	r2, [pc, #24]	; (800a1f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a1de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1e6:	601a      	str	r2, [r3, #0]
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	20000384 	.word	0x20000384
 800a1f8:	20000440 	.word	0x20000440

0800a1fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f103 0208 	add.w	r2, r3, #8
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f04f 32ff 	mov.w	r2, #4294967295
 800a214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f103 0208 	add.w	r2, r3, #8
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f103 0208 	add.w	r2, r3, #8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a24a:	bf00      	nop
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a256:	b480      	push	{r7}
 800a258:	b085      	sub	sp, #20
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	601a      	str	r2, [r3, #0]
}
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d103      	bne.n	800a2be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	e00c      	b.n	800a2d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e002      	b.n	800a2cc <vListInsert+0x2e>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d2f6      	bcs.n	800a2c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	601a      	str	r2, [r3, #0]
}
 800a304:	bf00      	nop
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	6892      	ldr	r2, [r2, #8]
 800a326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	6852      	ldr	r2, [r2, #4]
 800a330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d103      	bne.n	800a344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	1e5a      	subs	r2, r3, #1
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a38e:	f002 f931 	bl	800c5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a39e:	fb01 f303 	mul.w	r3, r1, r3
 800a3a2:	441a      	add	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	68f9      	ldr	r1, [r7, #12]
 800a3c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	441a      	add	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	22ff      	movs	r2, #255	; 0xff
 800a3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	22ff      	movs	r2, #255	; 0xff
 800a3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d114      	bne.n	800a40e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01a      	beq.n	800a422 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3310      	adds	r3, #16
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 f9e3 	bl	800b7bc <xTaskRemoveFromEventList>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d012      	beq.n	800a422 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <xQueueGenericReset+0xcc>)
 800a3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	e009      	b.n	800a422 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3310      	adds	r3, #16
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff fef2 	bl	800a1fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3324      	adds	r3, #36	; 0x24
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff feed 	bl	800a1fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a422:	f002 f917 	bl	800c654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a426:	2301      	movs	r3, #1
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	e000ed04 	.word	0xe000ed04

0800a434 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b08e      	sub	sp, #56	; 0x38
 800a438:	af02      	add	r7, sp, #8
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <xQueueGenericCreateStatic+0x52>
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <xQueueGenericCreateStatic+0x56>
 800a486:	2301      	movs	r3, #1
 800a488:	e000      	b.n	800a48c <xQueueGenericCreateStatic+0x58>
 800a48a:	2300      	movs	r3, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	623b      	str	r3, [r7, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <xQueueGenericCreateStatic+0x7e>
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <xQueueGenericCreateStatic+0x82>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueGenericCreateStatic+0x84>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	61fb      	str	r3, [r7, #28]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4d2:	2350      	movs	r3, #80	; 0x50
 800a4d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b50      	cmp	r3, #80	; 0x50
 800a4da:	d00a      	beq.n	800a4f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	61bb      	str	r3, [r7, #24]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00d      	beq.n	800a51a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a506:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	4613      	mov	r3, r2
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 f83f 	bl	800a598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3730      	adds	r7, #48	; 0x30
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08a      	sub	sp, #40	; 0x28
 800a528:	af02      	add	r7, sp, #8
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4613      	mov	r3, r2
 800a530:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	613b      	str	r3, [r7, #16]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3350      	adds	r3, #80	; 0x50
 800a55c:	4618      	mov	r0, r3
 800a55e:	f002 f96b 	bl	800c838 <pvPortMalloc>
 800a562:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d011      	beq.n	800a58e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	3350      	adds	r3, #80	; 0x50
 800a572:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a57c:	79fa      	ldrb	r2, [r7, #7]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	4613      	mov	r3, r2
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 f805 	bl	800a598 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a58e:	69bb      	ldr	r3, [r7, #24]
	}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d103      	bne.n	800a5b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	69b8      	ldr	r0, [r7, #24]
 800a5ca:	f7ff fecb 	bl	800a364 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5d6:	bf00      	nop
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
	...

0800a5e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10a      	bne.n	800a612 <xQueueGenericSend+0x32>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueGenericSend+0x40>
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueGenericSend+0x44>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueGenericSend+0x46>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <xQueueGenericSend+0x60>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d103      	bne.n	800a64e <xQueueGenericSend+0x6e>
 800a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <xQueueGenericSend+0x72>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueGenericSend+0x74>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xQueueGenericSend+0x8e>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	623b      	str	r3, [r7, #32]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a66e:	f001 fa67 	bl	800bb40 <xTaskGetSchedulerState>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d102      	bne.n	800a67e <xQueueGenericSend+0x9e>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueGenericSend+0xa2>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericSend+0xa4>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xQueueGenericSend+0xbe>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61fb      	str	r3, [r7, #28]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a69e:	f001 ffa9 	bl	800c5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d302      	bcc.n	800a6b4 <xQueueGenericSend+0xd4>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d129      	bne.n	800a708 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ba:	f000 fa8b 	bl	800abd4 <prvCopyDataToQueue>
 800a6be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d010      	beq.n	800a6ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 f875 	bl	800b7bc <xTaskRemoveFromEventList>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d013      	beq.n	800a700 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6d8:	4b3f      	ldr	r3, [pc, #252]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6de:	601a      	str	r2, [r3, #0]
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	e00a      	b.n	800a700 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6f0:	4b39      	ldr	r3, [pc, #228]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f6:	601a      	str	r2, [r3, #0]
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a700:	f001 ffa8 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a704:	2301      	movs	r3, #1
 800a706:	e063      	b.n	800a7d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a70e:	f001 ffa1 	bl	800c654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a712:	2300      	movs	r3, #0
 800a714:	e05c      	b.n	800a7d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d106      	bne.n	800a72a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a71c:	f107 0314 	add.w	r3, r7, #20
 800a720:	4618      	mov	r0, r3
 800a722:	f001 f8af 	bl	800b884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a726:	2301      	movs	r3, #1
 800a728:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a72a:	f001 ff93 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a72e:	f000 fe1b 	bl	800b368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a732:	f001 ff5f 	bl	800c5f4 <vPortEnterCritical>
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a73c:	b25b      	sxtb	r3, r3
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d103      	bne.n	800a74c <xQueueGenericSend+0x16c>
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a752:	b25b      	sxtb	r3, r3
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d103      	bne.n	800a762 <xQueueGenericSend+0x182>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a762:	f001 ff77 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a766:	1d3a      	adds	r2, r7, #4
 800a768:	f107 0314 	add.w	r3, r7, #20
 800a76c:	4611      	mov	r1, r2
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f89e 	bl	800b8b0 <xTaskCheckForTimeOut>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d124      	bne.n	800a7c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a77c:	f000 fb22 	bl	800adc4 <prvIsQueueFull>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3310      	adds	r3, #16
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 ffc4 	bl	800b71c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a796:	f000 faad 	bl	800acf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a79a:	f000 fdf3 	bl	800b384 <xTaskResumeAll>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f47f af7c 	bne.w	800a69e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <xQueueGenericSend+0x1f8>)
 800a7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	e772      	b.n	800a69e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ba:	f000 fa9b 	bl	800acf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7be:	f000 fde1 	bl	800b384 <xTaskResumeAll>
 800a7c2:	e76c      	b.n	800a69e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c6:	f000 fa95 	bl	800acf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ca:	f000 fddb 	bl	800b384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3738      	adds	r7, #56	; 0x38
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b090      	sub	sp, #64	; 0x40
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <xQueueGenericSendFromISR+0x3c>
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <xQueueGenericSendFromISR+0x40>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <xQueueGenericSendFromISR+0x42>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d103      	bne.n	800a846 <xQueueGenericSendFromISR+0x6a>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <xQueueGenericSendFromISR+0x6e>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <xQueueGenericSendFromISR+0x70>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	623b      	str	r3, [r7, #32]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a866:	f001 ffa7 	bl	800c7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a86a:	f3ef 8211 	mrs	r2, BASEPRI
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	61fa      	str	r2, [r7, #28]
 800a880:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a882:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <xQueueGenericSendFromISR+0xbc>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b02      	cmp	r3, #2
 800a896:	d12f      	bne.n	800a8f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8ae:	f000 f991 	bl	800abd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d112      	bne.n	800a8e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d016      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	3324      	adds	r3, #36	; 0x24
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 ff77 	bl	800b7bc <xTaskRemoveFromEventList>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00e      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00b      	beq.n	800a8f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e007      	b.n	800a8f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	b25a      	sxtb	r2, r3
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a8f6:	e001      	b.n	800a8fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a906:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3740      	adds	r7, #64	; 0x40
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a920:	2300      	movs	r3, #0
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10a      	bne.n	800a944 <xQueueReceive+0x30>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	623b      	str	r3, [r7, #32]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <xQueueReceive+0x3e>
 800a94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <xQueueReceive+0x42>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueReceive+0x44>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueReceive+0x5e>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	61fb      	str	r3, [r7, #28]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a972:	f001 f8e5 	bl	800bb40 <xTaskGetSchedulerState>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <xQueueReceive+0x6e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <xQueueReceive+0x72>
 800a982:	2301      	movs	r3, #1
 800a984:	e000      	b.n	800a988 <xQueueReceive+0x74>
 800a986:	2300      	movs	r3, #0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <xQueueReceive+0x8e>
	__asm volatile
 800a98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	61bb      	str	r3, [r7, #24]
}
 800a99e:	bf00      	nop
 800a9a0:	e7fe      	b.n	800a9a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9a2:	f001 fe27 	bl	800c5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d01f      	beq.n	800a9f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9b6:	f000 f977 	bl	800aca8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	1e5a      	subs	r2, r3, #1
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00f      	beq.n	800a9ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	3310      	adds	r3, #16
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fef4 	bl	800b7bc <xTaskRemoveFromEventList>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9da:	4b3d      	ldr	r3, [pc, #244]	; (800aad0 <xQueueReceive+0x1bc>)
 800a9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e0:	601a      	str	r2, [r3, #0]
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9ea:	f001 fe33 	bl	800c654 <vPortExitCritical>
				return pdPASS;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e069      	b.n	800aac6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9f8:	f001 fe2c 	bl	800c654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e062      	b.n	800aac6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa06:	f107 0310 	add.w	r3, r7, #16
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 ff3a 	bl	800b884 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa14:	f001 fe1e 	bl	800c654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa18:	f000 fca6 	bl	800b368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa1c:	f001 fdea 	bl	800c5f4 <vPortEnterCritical>
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d103      	bne.n	800aa36 <xQueueReceive+0x122>
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa3c:	b25b      	sxtb	r3, r3
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d103      	bne.n	800aa4c <xQueueReceive+0x138>
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa4c:	f001 fe02 	bl	800c654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa50:	1d3a      	adds	r2, r7, #4
 800aa52:	f107 0310 	add.w	r3, r7, #16
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 ff29 	bl	800b8b0 <xTaskCheckForTimeOut>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d123      	bne.n	800aaac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa66:	f000 f997 	bl	800ad98 <prvIsQueueEmpty>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d017      	beq.n	800aaa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	3324      	adds	r3, #36	; 0x24
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fe4f 	bl	800b71c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa80:	f000 f938 	bl	800acf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa84:	f000 fc7e 	bl	800b384 <xTaskResumeAll>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d189      	bne.n	800a9a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa8e:	4b10      	ldr	r3, [pc, #64]	; (800aad0 <xQueueReceive+0x1bc>)
 800aa90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	e780      	b.n	800a9a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa2:	f000 f927 	bl	800acf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa6:	f000 fc6d 	bl	800b384 <xTaskResumeAll>
 800aaaa:	e77a      	b.n	800a9a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aaac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaae:	f000 f921 	bl	800acf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aab2:	f000 fc67 	bl	800b384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab8:	f000 f96e 	bl	800ad98 <prvIsQueueEmpty>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f43f af6f 	beq.w	800a9a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3730      	adds	r7, #48	; 0x30
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	e000ed04 	.word	0xe000ed04

0800aad4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08e      	sub	sp, #56	; 0x38
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	623b      	str	r3, [r7, #32]
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d103      	bne.n	800ab0e <xQueueReceiveFromISR+0x3a>
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <xQueueReceiveFromISR+0x3e>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e000      	b.n	800ab14 <xQueueReceiveFromISR+0x40>
 800ab12:	2300      	movs	r3, #0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10a      	bne.n	800ab2e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	f383 8811 	msr	BASEPRI, r3
 800ab20:	f3bf 8f6f 	isb	sy
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	61fb      	str	r3, [r7, #28]
}
 800ab2a:	bf00      	nop
 800ab2c:	e7fe      	b.n	800ab2c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab2e:	f001 fe43 	bl	800c7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab32:	f3ef 8211 	mrs	r2, BASEPRI
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	61ba      	str	r2, [r7, #24]
 800ab48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d02f      	beq.n	800abba <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab68:	f000 f89e 	bl	800aca8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	1e5a      	subs	r2, r3, #1
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7c:	d112      	bne.n	800aba4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d016      	beq.n	800abb4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	3310      	adds	r3, #16
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 fe16 	bl	800b7bc <xTaskRemoveFromEventList>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00e      	beq.n	800abb4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e007      	b.n	800abb4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba8:	3301      	adds	r3, #1
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	b25a      	sxtb	r2, r3
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800abb4:	2301      	movs	r3, #1
 800abb6:	637b      	str	r3, [r7, #52]	; 0x34
 800abb8:	e001      	b.n	800abbe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800abba:	2300      	movs	r3, #0
 800abbc:	637b      	str	r3, [r7, #52]	; 0x34
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f383 8811 	msr	BASEPRI, r3
}
 800abc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3738      	adds	r7, #56	; 0x38
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10d      	bne.n	800ac0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d14d      	bne.n	800ac96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 ffbc 	bl	800bb7c <xTaskPriorityDisinherit>
 800ac04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	609a      	str	r2, [r3, #8]
 800ac0c:	e043      	b.n	800ac96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d119      	bne.n	800ac48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6858      	ldr	r0, [r3, #4]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	f002 ff9a 	bl	800db58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2c:	441a      	add	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d32b      	bcc.n	800ac96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	605a      	str	r2, [r3, #4]
 800ac46:	e026      	b.n	800ac96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	68d8      	ldr	r0, [r3, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac50:	461a      	mov	r2, r3
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	f002 ff80 	bl	800db58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	425b      	negs	r3, r3
 800ac62:	441a      	add	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d207      	bcs.n	800ac84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	441a      	add	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d105      	bne.n	800ac96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac9e:	697b      	ldr	r3, [r7, #20]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d018      	beq.n	800acec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	441a      	add	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d303      	bcc.n	800acdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68d9      	ldr	r1, [r3, #12]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	461a      	mov	r2, r3
 800ace6:	6838      	ldr	r0, [r7, #0]
 800ace8:	f002 ff36 	bl	800db58 <memcpy>
	}
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acfc:	f001 fc7a 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad08:	e011      	b.n	800ad2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d012      	beq.n	800ad38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3324      	adds	r3, #36	; 0x24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fd50 	bl	800b7bc <xTaskRemoveFromEventList>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad22:	f000 fe27 	bl	800b974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dce9      	bgt.n	800ad0a <prvUnlockQueue+0x16>
 800ad36:	e000      	b.n	800ad3a <prvUnlockQueue+0x46>
					break;
 800ad38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	22ff      	movs	r2, #255	; 0xff
 800ad3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad42:	f001 fc87 	bl	800c654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad46:	f001 fc55 	bl	800c5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad52:	e011      	b.n	800ad78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d012      	beq.n	800ad82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3310      	adds	r3, #16
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fd2b 	bl	800b7bc <xTaskRemoveFromEventList>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad6c:	f000 fe02 	bl	800b974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dce9      	bgt.n	800ad54 <prvUnlockQueue+0x60>
 800ad80:	e000      	b.n	800ad84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	22ff      	movs	r2, #255	; 0xff
 800ad88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad8c:	f001 fc62 	bl	800c654 <vPortExitCritical>
}
 800ad90:	bf00      	nop
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ada0:	f001 fc28 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adac:	2301      	movs	r3, #1
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	e001      	b.n	800adb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adb6:	f001 fc4d 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800adba:	68fb      	ldr	r3, [r7, #12]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adcc:	f001 fc12 	bl	800c5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add8:	429a      	cmp	r2, r3
 800adda:	d102      	bne.n	800ade2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	e001      	b.n	800ade6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ade6:	f001 fc35 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800adea:	68fb      	ldr	r3, [r7, #12]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	e014      	b.n	800ae2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae04:	4a0f      	ldr	r2, [pc, #60]	; (800ae44 <vQueueAddToRegistry+0x50>)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10b      	bne.n	800ae28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae10:	490c      	ldr	r1, [pc, #48]	; (800ae44 <vQueueAddToRegistry+0x50>)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae1a:	4a0a      	ldr	r2, [pc, #40]	; (800ae44 <vQueueAddToRegistry+0x50>)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	4413      	add	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae26:	e006      	b.n	800ae36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b07      	cmp	r3, #7
 800ae32:	d9e7      	bls.n	800ae04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20004d74 	.word	0x20004d74

0800ae48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae58:	f001 fbcc 	bl	800c5f4 <vPortEnterCritical>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d103      	bne.n	800ae72 <vQueueWaitForMessageRestricted+0x2a>
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	d103      	bne.n	800ae88 <vQueueWaitForMessageRestricted+0x40>
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae88:	f001 fbe4 	bl	800c654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fc61 	bl	800b764 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aea2:	6978      	ldr	r0, [r7, #20]
 800aea4:	f7ff ff26 	bl	800acf4 <prvUnlockQueue>
	}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	; 0x38
 800aeb4:	af04      	add	r7, sp, #16
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <xTaskCreateStatic+0x2a>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	623b      	str	r3, [r7, #32]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <xTaskCreateStatic+0x46>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	61fb      	str	r3, [r7, #28]
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aef6:	23bc      	movs	r3, #188	; 0xbc
 800aef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2bbc      	cmp	r3, #188	; 0xbc
 800aefe:	d00a      	beq.n	800af16 <xTaskCreateStatic+0x66>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	61bb      	str	r3, [r7, #24]
}
 800af12:	bf00      	nop
 800af14:	e7fe      	b.n	800af14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d01e      	beq.n	800af5c <xTaskCreateStatic+0xac>
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01b      	beq.n	800af5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af30:	2202      	movs	r2, #2
 800af32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af36:	2300      	movs	r3, #0
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	f107 0314 	add.w	r3, r7, #20
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 f850 	bl	800aff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af56:	f000 f8f3 	bl	800b140 <prvAddNewTaskToReadyList>
 800af5a:	e001      	b.n	800af60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af5c:	2300      	movs	r3, #0
 800af5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af60:	697b      	ldr	r3, [r7, #20]
	}
 800af62:	4618      	mov	r0, r3
 800af64:	3728      	adds	r7, #40	; 0x28
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b08c      	sub	sp, #48	; 0x30
 800af6e:	af04      	add	r7, sp, #16
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	603b      	str	r3, [r7, #0]
 800af76:	4613      	mov	r3, r2
 800af78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af7a:	88fb      	ldrh	r3, [r7, #6]
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4618      	mov	r0, r3
 800af80:	f001 fc5a 	bl	800c838 <pvPortMalloc>
 800af84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00e      	beq.n	800afaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af8c:	20bc      	movs	r0, #188	; 0xbc
 800af8e:	f001 fc53 	bl	800c838 <pvPortMalloc>
 800af92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	631a      	str	r2, [r3, #48]	; 0x30
 800afa0:	e005      	b.n	800afae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afa2:	6978      	ldr	r0, [r7, #20]
 800afa4:	f001 fd14 	bl	800c9d0 <vPortFree>
 800afa8:	e001      	b.n	800afae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d017      	beq.n	800afe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afbc:	88fa      	ldrh	r2, [r7, #6]
 800afbe:	2300      	movs	r3, #0
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f80e 	bl	800aff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afd8:	69f8      	ldr	r0, [r7, #28]
 800afda:	f000 f8b1 	bl	800b140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afde:	2301      	movs	r3, #1
 800afe0:	61bb      	str	r3, [r7, #24]
 800afe2:	e002      	b.n	800afea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800afe4:	f04f 33ff 	mov.w	r3, #4294967295
 800afe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800afea:	69bb      	ldr	r3, [r7, #24]
	}
 800afec:	4618      	mov	r0, r3
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b088      	sub	sp, #32
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	461a      	mov	r2, r3
 800b00c:	21a5      	movs	r1, #165	; 0xa5
 800b00e:	f002 fdcb 	bl	800dba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b01c:	3b01      	subs	r3, #1
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	f023 0307 	bic.w	r3, r3, #7
 800b02a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	617b      	str	r3, [r7, #20]
}
 800b048:	bf00      	nop
 800b04a:	e7fe      	b.n	800b04a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01f      	beq.n	800b092 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b052:	2300      	movs	r3, #0
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	e012      	b.n	800b07e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	7819      	ldrb	r1, [r3, #0]
 800b060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	4413      	add	r3, r2
 800b066:	3334      	adds	r3, #52	; 0x34
 800b068:	460a      	mov	r2, r1
 800b06a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	4413      	add	r3, r2
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d006      	beq.n	800b086 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3301      	adds	r3, #1
 800b07c:	61fb      	str	r3, [r7, #28]
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	2b0f      	cmp	r3, #15
 800b082:	d9e9      	bls.n	800b058 <prvInitialiseNewTask+0x64>
 800b084:	e000      	b.n	800b088 <prvInitialiseNewTask+0x94>
			{
				break;
 800b086:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b090:	e003      	b.n	800b09a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09c:	2b37      	cmp	r3, #55	; 0x37
 800b09e:	d901      	bls.n	800b0a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0a0:	2337      	movs	r3, #55	; 0x37
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff f8be 	bl	800a23c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff f8b9 	bl	800a23c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	3354      	adds	r3, #84	; 0x54
 800b0f4:	2260      	movs	r2, #96	; 0x60
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f002 fd55 	bl	800dba8 <memset>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	4a0c      	ldr	r2, [pc, #48]	; (800b134 <prvInitialiseNewTask+0x140>)
 800b102:	659a      	str	r2, [r3, #88]	; 0x58
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	4a0c      	ldr	r2, [pc, #48]	; (800b138 <prvInitialiseNewTask+0x144>)
 800b108:	65da      	str	r2, [r3, #92]	; 0x5c
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	4a0b      	ldr	r2, [pc, #44]	; (800b13c <prvInitialiseNewTask+0x148>)
 800b10e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	68f9      	ldr	r1, [r7, #12]
 800b114:	69b8      	ldr	r0, [r7, #24]
 800b116:	f001 f941 	bl	800c39c <pxPortInitialiseStack>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b12a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b12c:	bf00      	nop
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	0800ed40 	.word	0x0800ed40
 800b138:	0800ed60 	.word	0x0800ed60
 800b13c:	0800ed20 	.word	0x0800ed20

0800b140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b148:	f001 fa54 	bl	800c5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b14c:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b156:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b15e:	4a2a      	ldr	r2, [pc, #168]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b164:	4b27      	ldr	r3, [pc, #156]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d110      	bne.n	800b18e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b16c:	f000 fc26 	bl	800b9bc <prvInitialiseTaskLists>
 800b170:	e00d      	b.n	800b18e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b172:	4b26      	ldr	r3, [pc, #152]	; (800b20c <prvAddNewTaskToReadyList+0xcc>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b17a:	4b23      	ldr	r3, [pc, #140]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d802      	bhi.n	800b18e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b188:	4a1f      	ldr	r2, [pc, #124]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b18e:	4b20      	ldr	r3, [pc, #128]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3301      	adds	r3, #1
 800b194:	4a1e      	ldr	r2, [pc, #120]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b198:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4b1b      	ldr	r3, [pc, #108]	; (800b214 <prvAddNewTaskToReadyList+0xd4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <prvAddNewTaskToReadyList+0x74>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a18      	ldr	r2, [pc, #96]	; (800b214 <prvAddNewTaskToReadyList+0xd4>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a15      	ldr	r2, [pc, #84]	; (800b218 <prvAddNewTaskToReadyList+0xd8>)
 800b1c2:	441a      	add	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7ff f843 	bl	800a256 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1d0:	f001 fa40 	bl	800c654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <prvAddNewTaskToReadyList+0xcc>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00e      	beq.n	800b1fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d207      	bcs.n	800b1fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <prvAddNewTaskToReadyList+0xdc>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000d14 	.word	0x20000d14
 800b208:	20000840 	.word	0x20000840
 800b20c:	20000d20 	.word	0x20000d20
 800b210:	20000d30 	.word	0x20000d30
 800b214:	20000d1c 	.word	0x20000d1c
 800b218:	20000844 	.word	0x20000844
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d017      	beq.n	800b262 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b232:	4b13      	ldr	r3, [pc, #76]	; (800b280 <vTaskDelay+0x60>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <vTaskDelay+0x30>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	60bb      	str	r3, [r7, #8]
}
 800b24c:	bf00      	nop
 800b24e:	e7fe      	b.n	800b24e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b250:	f000 f88a 	bl	800b368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fcfe 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b25c:	f000 f892 	bl	800b384 <xTaskResumeAll>
 800b260:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d107      	bne.n	800b278 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b268:	4b06      	ldr	r3, [pc, #24]	; (800b284 <vTaskDelay+0x64>)
 800b26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b278:	bf00      	nop
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20000d3c 	.word	0x20000d3c
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b296:	463a      	mov	r2, r7
 800b298:	1d39      	adds	r1, r7, #4
 800b29a:	f107 0308 	add.w	r3, r7, #8
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe ff78 	bl	800a194 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	9202      	str	r2, [sp, #8]
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	460a      	mov	r2, r1
 800b2b6:	4924      	ldr	r1, [pc, #144]	; (800b348 <vTaskStartScheduler+0xc0>)
 800b2b8:	4824      	ldr	r0, [pc, #144]	; (800b34c <vTaskStartScheduler+0xc4>)
 800b2ba:	f7ff fdf9 	bl	800aeb0 <xTaskCreateStatic>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	4a23      	ldr	r2, [pc, #140]	; (800b350 <vTaskStartScheduler+0xc8>)
 800b2c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2c4:	4b22      	ldr	r3, [pc, #136]	; (800b350 <vTaskStartScheduler+0xc8>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e001      	b.n	800b2d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d102      	bne.n	800b2e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2dc:	f000 fd10 	bl	800bd00 <xTimerCreateTimerTask>
 800b2e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d11b      	bne.n	800b320 <vTaskStartScheduler+0x98>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	613b      	str	r3, [r7, #16]
}
 800b2fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2fc:	4b15      	ldr	r3, [pc, #84]	; (800b354 <vTaskStartScheduler+0xcc>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	3354      	adds	r3, #84	; 0x54
 800b302:	4a15      	ldr	r2, [pc, #84]	; (800b358 <vTaskStartScheduler+0xd0>)
 800b304:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b306:	4b15      	ldr	r3, [pc, #84]	; (800b35c <vTaskStartScheduler+0xd4>)
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b30e:	4b14      	ldr	r3, [pc, #80]	; (800b360 <vTaskStartScheduler+0xd8>)
 800b310:	2201      	movs	r2, #1
 800b312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b314:	4b13      	ldr	r3, [pc, #76]	; (800b364 <vTaskStartScheduler+0xdc>)
 800b316:	2200      	movs	r2, #0
 800b318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b31a:	f001 f8c9 	bl	800c4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b31e:	e00e      	b.n	800b33e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b326:	d10a      	bne.n	800b33e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	60fb      	str	r3, [r7, #12]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <vTaskStartScheduler+0xb4>
}
 800b33e:	bf00      	nop
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	0800e540 	.word	0x0800e540
 800b34c:	0800b98d 	.word	0x0800b98d
 800b350:	20000d38 	.word	0x20000d38
 800b354:	20000840 	.word	0x20000840
 800b358:	20000038 	.word	0x20000038
 800b35c:	20000d34 	.word	0x20000d34
 800b360:	20000d20 	.word	0x20000d20
 800b364:	20000d18 	.word	0x20000d18

0800b368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b36c:	4b04      	ldr	r3, [pc, #16]	; (800b380 <vTaskSuspendAll+0x18>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a03      	ldr	r2, [pc, #12]	; (800b380 <vTaskSuspendAll+0x18>)
 800b374:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b376:	bf00      	nop
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	20000d3c 	.word	0x20000d3c

0800b384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b392:	4b42      	ldr	r3, [pc, #264]	; (800b49c <xTaskResumeAll+0x118>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10a      	bne.n	800b3b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	603b      	str	r3, [r7, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3b0:	f001 f920 	bl	800c5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3b4:	4b39      	ldr	r3, [pc, #228]	; (800b49c <xTaskResumeAll+0x118>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	4a38      	ldr	r2, [pc, #224]	; (800b49c <xTaskResumeAll+0x118>)
 800b3bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3be:	4b37      	ldr	r3, [pc, #220]	; (800b49c <xTaskResumeAll+0x118>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d162      	bne.n	800b48c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3c6:	4b36      	ldr	r3, [pc, #216]	; (800b4a0 <xTaskResumeAll+0x11c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d05e      	beq.n	800b48c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ce:	e02f      	b.n	800b430 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d0:	4b34      	ldr	r3, [pc, #208]	; (800b4a4 <xTaskResumeAll+0x120>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3318      	adds	r3, #24
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7fe ff97 	bl	800a310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe ff92 	bl	800a310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f0:	4b2d      	ldr	r3, [pc, #180]	; (800b4a8 <xTaskResumeAll+0x124>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d903      	bls.n	800b400 <xTaskResumeAll+0x7c>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	4a2a      	ldr	r2, [pc, #168]	; (800b4a8 <xTaskResumeAll+0x124>)
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4a27      	ldr	r2, [pc, #156]	; (800b4ac <xTaskResumeAll+0x128>)
 800b40e:	441a      	add	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3304      	adds	r3, #4
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f7fe ff1d 	bl	800a256 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b420:	4b23      	ldr	r3, [pc, #140]	; (800b4b0 <xTaskResumeAll+0x12c>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	429a      	cmp	r2, r3
 800b428:	d302      	bcc.n	800b430 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b42a:	4b22      	ldr	r3, [pc, #136]	; (800b4b4 <xTaskResumeAll+0x130>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b430:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <xTaskResumeAll+0x120>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1cb      	bne.n	800b3d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b43e:	f000 fb5f 	bl	800bb00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b442:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <xTaskResumeAll+0x134>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d010      	beq.n	800b470 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b44e:	f000 f847 	bl	800b4e0 <xTaskIncrementTick>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b458:	4b16      	ldr	r3, [pc, #88]	; (800b4b4 <xTaskResumeAll+0x130>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3b01      	subs	r3, #1
 800b462:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1f1      	bne.n	800b44e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b46a:	4b13      	ldr	r3, [pc, #76]	; (800b4b8 <xTaskResumeAll+0x134>)
 800b46c:	2200      	movs	r2, #0
 800b46e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b470:	4b10      	ldr	r3, [pc, #64]	; (800b4b4 <xTaskResumeAll+0x130>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d009      	beq.n	800b48c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b478:	2301      	movs	r3, #1
 800b47a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <xTaskResumeAll+0x138>)
 800b47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b48c:	f001 f8e2 	bl	800c654 <vPortExitCritical>

	return xAlreadyYielded;
 800b490:	68bb      	ldr	r3, [r7, #8]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000d3c 	.word	0x20000d3c
 800b4a0:	20000d14 	.word	0x20000d14
 800b4a4:	20000cd4 	.word	0x20000cd4
 800b4a8:	20000d1c 	.word	0x20000d1c
 800b4ac:	20000844 	.word	0x20000844
 800b4b0:	20000840 	.word	0x20000840
 800b4b4:	20000d28 	.word	0x20000d28
 800b4b8:	20000d24 	.word	0x20000d24
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <xTaskGetTickCount+0x1c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4cc:	687b      	ldr	r3, [r7, #4]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20000d18 	.word	0x20000d18

0800b4e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ea:	4b4f      	ldr	r3, [pc, #316]	; (800b628 <xTaskIncrementTick+0x148>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f040 808f 	bne.w	800b612 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4f4:	4b4d      	ldr	r3, [pc, #308]	; (800b62c <xTaskIncrementTick+0x14c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4fc:	4a4b      	ldr	r2, [pc, #300]	; (800b62c <xTaskIncrementTick+0x14c>)
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d120      	bne.n	800b54a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b508:	4b49      	ldr	r3, [pc, #292]	; (800b630 <xTaskIncrementTick+0x150>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <xTaskIncrementTick+0x48>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	603b      	str	r3, [r7, #0]
}
 800b524:	bf00      	nop
 800b526:	e7fe      	b.n	800b526 <xTaskIncrementTick+0x46>
 800b528:	4b41      	ldr	r3, [pc, #260]	; (800b630 <xTaskIncrementTick+0x150>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	4b41      	ldr	r3, [pc, #260]	; (800b634 <xTaskIncrementTick+0x154>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a3f      	ldr	r2, [pc, #252]	; (800b630 <xTaskIncrementTick+0x150>)
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	4a3f      	ldr	r2, [pc, #252]	; (800b634 <xTaskIncrementTick+0x154>)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	4b3e      	ldr	r3, [pc, #248]	; (800b638 <xTaskIncrementTick+0x158>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3301      	adds	r3, #1
 800b542:	4a3d      	ldr	r2, [pc, #244]	; (800b638 <xTaskIncrementTick+0x158>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	f000 fadb 	bl	800bb00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b54a:	4b3c      	ldr	r3, [pc, #240]	; (800b63c <xTaskIncrementTick+0x15c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	429a      	cmp	r2, r3
 800b552:	d349      	bcc.n	800b5e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b554:	4b36      	ldr	r3, [pc, #216]	; (800b630 <xTaskIncrementTick+0x150>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d104      	bne.n	800b568 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b55e:	4b37      	ldr	r3, [pc, #220]	; (800b63c <xTaskIncrementTick+0x15c>)
 800b560:	f04f 32ff 	mov.w	r2, #4294967295
 800b564:	601a      	str	r2, [r3, #0]
					break;
 800b566:	e03f      	b.n	800b5e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b568:	4b31      	ldr	r3, [pc, #196]	; (800b630 <xTaskIncrementTick+0x150>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d203      	bcs.n	800b588 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b580:	4a2e      	ldr	r2, [pc, #184]	; (800b63c <xTaskIncrementTick+0x15c>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b586:	e02f      	b.n	800b5e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3304      	adds	r3, #4
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe febf 	bl	800a310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	3318      	adds	r3, #24
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe feb6 	bl	800a310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a8:	4b25      	ldr	r3, [pc, #148]	; (800b640 <xTaskIncrementTick+0x160>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d903      	bls.n	800b5b8 <xTaskIncrementTick+0xd8>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	4a22      	ldr	r2, [pc, #136]	; (800b640 <xTaskIncrementTick+0x160>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4a1f      	ldr	r2, [pc, #124]	; (800b644 <xTaskIncrementTick+0x164>)
 800b5c6:	441a      	add	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7fe fe41 	bl	800a256 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d8:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <xTaskIncrementTick+0x168>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d3b8      	bcc.n	800b554 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e6:	e7b5      	b.n	800b554 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5e8:	4b17      	ldr	r3, [pc, #92]	; (800b648 <xTaskIncrementTick+0x168>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ee:	4915      	ldr	r1, [pc, #84]	; (800b644 <xTaskIncrementTick+0x164>)
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	440b      	add	r3, r1
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d901      	bls.n	800b604 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b600:	2301      	movs	r3, #1
 800b602:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b604:	4b11      	ldr	r3, [pc, #68]	; (800b64c <xTaskIncrementTick+0x16c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e004      	b.n	800b61c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b612:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <xTaskIncrementTick+0x170>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3301      	adds	r3, #1
 800b618:	4a0d      	ldr	r2, [pc, #52]	; (800b650 <xTaskIncrementTick+0x170>)
 800b61a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b61c:	697b      	ldr	r3, [r7, #20]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20000d3c 	.word	0x20000d3c
 800b62c:	20000d18 	.word	0x20000d18
 800b630:	20000ccc 	.word	0x20000ccc
 800b634:	20000cd0 	.word	0x20000cd0
 800b638:	20000d2c 	.word	0x20000d2c
 800b63c:	20000d34 	.word	0x20000d34
 800b640:	20000d1c 	.word	0x20000d1c
 800b644:	20000844 	.word	0x20000844
 800b648:	20000840 	.word	0x20000840
 800b64c:	20000d28 	.word	0x20000d28
 800b650:	20000d24 	.word	0x20000d24

0800b654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b65a:	4b2a      	ldr	r3, [pc, #168]	; (800b704 <vTaskSwitchContext+0xb0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b662:	4b29      	ldr	r3, [pc, #164]	; (800b708 <vTaskSwitchContext+0xb4>)
 800b664:	2201      	movs	r2, #1
 800b666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b668:	e046      	b.n	800b6f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b66a:	4b27      	ldr	r3, [pc, #156]	; (800b708 <vTaskSwitchContext+0xb4>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b670:	4b26      	ldr	r3, [pc, #152]	; (800b70c <vTaskSwitchContext+0xb8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	e010      	b.n	800b69a <vTaskSwitchContext+0x46>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10a      	bne.n	800b694 <vTaskSwitchContext+0x40>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	607b      	str	r3, [r7, #4]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <vTaskSwitchContext+0x3e>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3b01      	subs	r3, #1
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	491d      	ldr	r1, [pc, #116]	; (800b710 <vTaskSwitchContext+0xbc>)
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	440b      	add	r3, r1
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d0e4      	beq.n	800b678 <vTaskSwitchContext+0x24>
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4a15      	ldr	r2, [pc, #84]	; (800b710 <vTaskSwitchContext+0xbc>)
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60bb      	str	r3, [r7, #8]
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	605a      	str	r2, [r3, #4]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d104      	bne.n	800b6de <vTaskSwitchContext+0x8a>
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	605a      	str	r2, [r3, #4]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	4a0b      	ldr	r2, [pc, #44]	; (800b714 <vTaskSwitchContext+0xc0>)
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	4a08      	ldr	r2, [pc, #32]	; (800b70c <vTaskSwitchContext+0xb8>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6ee:	4b09      	ldr	r3, [pc, #36]	; (800b714 <vTaskSwitchContext+0xc0>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3354      	adds	r3, #84	; 0x54
 800b6f4:	4a08      	ldr	r2, [pc, #32]	; (800b718 <vTaskSwitchContext+0xc4>)
 800b6f6:	6013      	str	r3, [r2, #0]
}
 800b6f8:	bf00      	nop
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr
 800b704:	20000d3c 	.word	0x20000d3c
 800b708:	20000d28 	.word	0x20000d28
 800b70c:	20000d1c 	.word	0x20000d1c
 800b710:	20000844 	.word	0x20000844
 800b714:	20000840 	.word	0x20000840
 800b718:	20000038 	.word	0x20000038

0800b71c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	60fb      	str	r3, [r7, #12]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b742:	4b07      	ldr	r3, [pc, #28]	; (800b760 <vTaskPlaceOnEventList+0x44>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3318      	adds	r3, #24
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7fe fda7 	bl	800a29e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b750:	2101      	movs	r1, #1
 800b752:	6838      	ldr	r0, [r7, #0]
 800b754:	f000 fa80 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
}
 800b758:	bf00      	nop
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000840 	.word	0x20000840

0800b764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10a      	bne.n	800b78c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	617b      	str	r3, [r7, #20]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3318      	adds	r3, #24
 800b792:	4619      	mov	r1, r3
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7fe fd5e 	bl	800a256 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	68b8      	ldr	r0, [r7, #8]
 800b7aa:	f000 fa55 	bl	800bc58 <prvAddCurrentTaskToDelayedList>
	}
 800b7ae:	bf00      	nop
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000840 	.word	0x20000840

0800b7bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60fb      	str	r3, [r7, #12]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe fd8f 	bl	800a310 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f2:	4b1e      	ldr	r3, [pc, #120]	; (800b86c <xTaskRemoveFromEventList+0xb0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d11d      	bne.n	800b836 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe fd86 	bl	800a310 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b808:	4b19      	ldr	r3, [pc, #100]	; (800b870 <xTaskRemoveFromEventList+0xb4>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d903      	bls.n	800b818 <xTaskRemoveFromEventList+0x5c>
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	4a16      	ldr	r2, [pc, #88]	; (800b870 <xTaskRemoveFromEventList+0xb4>)
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4a13      	ldr	r2, [pc, #76]	; (800b874 <xTaskRemoveFromEventList+0xb8>)
 800b826:	441a      	add	r2, r3
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fe fd11 	bl	800a256 <vListInsertEnd>
 800b834:	e005      	b.n	800b842 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	3318      	adds	r3, #24
 800b83a:	4619      	mov	r1, r3
 800b83c:	480e      	ldr	r0, [pc, #56]	; (800b878 <xTaskRemoveFromEventList+0xbc>)
 800b83e:	f7fe fd0a 	bl	800a256 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <xTaskRemoveFromEventList+0xc0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d905      	bls.n	800b85c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b854:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <xTaskRemoveFromEventList+0xc4>)
 800b856:	2201      	movs	r2, #1
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e001      	b.n	800b860 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b860:	697b      	ldr	r3, [r7, #20]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000d3c 	.word	0x20000d3c
 800b870:	20000d1c 	.word	0x20000d1c
 800b874:	20000844 	.word	0x20000844
 800b878:	20000cd4 	.word	0x20000cd4
 800b87c:	20000840 	.word	0x20000840
 800b880:	20000d28 	.word	0x20000d28

0800b884 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <vTaskInternalSetTimeOutState+0x24>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b894:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <vTaskInternalSetTimeOutState+0x28>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	605a      	str	r2, [r3, #4]
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	20000d2c 	.word	0x20000d2c
 800b8ac:	20000d18 	.word	0x20000d18

0800b8b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	613b      	str	r3, [r7, #16]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60fb      	str	r3, [r7, #12]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b8f2:	f000 fe7f 	bl	800c5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8f6:	4b1d      	ldr	r3, [pc, #116]	; (800b96c <xTaskCheckForTimeOut+0xbc>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90e:	d102      	bne.n	800b916 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	e023      	b.n	800b95e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b15      	ldr	r3, [pc, #84]	; (800b970 <xTaskCheckForTimeOut+0xc0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d007      	beq.n	800b932 <xTaskCheckForTimeOut+0x82>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e015      	b.n	800b95e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d20b      	bcs.n	800b954 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	1ad2      	subs	r2, r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ff9b 	bl	800b884 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	e004      	b.n	800b95e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b95a:	2301      	movs	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b95e:	f000 fe79 	bl	800c654 <vPortExitCritical>

	return xReturn;
 800b962:	69fb      	ldr	r3, [r7, #28]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3720      	adds	r7, #32
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20000d18 	.word	0x20000d18
 800b970:	20000d2c 	.word	0x20000d2c

0800b974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b974:	b480      	push	{r7}
 800b976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b978:	4b03      	ldr	r3, [pc, #12]	; (800b988 <vTaskMissedYield+0x14>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	601a      	str	r2, [r3, #0]
}
 800b97e:	bf00      	nop
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	20000d28 	.word	0x20000d28

0800b98c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b994:	f000 f852 	bl	800ba3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b998:	4b06      	ldr	r3, [pc, #24]	; (800b9b4 <prvIdleTask+0x28>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d9f9      	bls.n	800b994 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9a0:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <prvIdleTask+0x2c>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9b0:	e7f0      	b.n	800b994 <prvIdleTask+0x8>
 800b9b2:	bf00      	nop
 800b9b4:	20000844 	.word	0x20000844
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	607b      	str	r3, [r7, #4]
 800b9c6:	e00c      	b.n	800b9e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4a12      	ldr	r2, [pc, #72]	; (800ba1c <prvInitialiseTaskLists+0x60>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fc10 	bl	800a1fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b37      	cmp	r3, #55	; 0x37
 800b9e6:	d9ef      	bls.n	800b9c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9e8:	480d      	ldr	r0, [pc, #52]	; (800ba20 <prvInitialiseTaskLists+0x64>)
 800b9ea:	f7fe fc07 	bl	800a1fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9ee:	480d      	ldr	r0, [pc, #52]	; (800ba24 <prvInitialiseTaskLists+0x68>)
 800b9f0:	f7fe fc04 	bl	800a1fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9f4:	480c      	ldr	r0, [pc, #48]	; (800ba28 <prvInitialiseTaskLists+0x6c>)
 800b9f6:	f7fe fc01 	bl	800a1fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9fa:	480c      	ldr	r0, [pc, #48]	; (800ba2c <prvInitialiseTaskLists+0x70>)
 800b9fc:	f7fe fbfe 	bl	800a1fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba00:	480b      	ldr	r0, [pc, #44]	; (800ba30 <prvInitialiseTaskLists+0x74>)
 800ba02:	f7fe fbfb 	bl	800a1fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba06:	4b0b      	ldr	r3, [pc, #44]	; (800ba34 <prvInitialiseTaskLists+0x78>)
 800ba08:	4a05      	ldr	r2, [pc, #20]	; (800ba20 <prvInitialiseTaskLists+0x64>)
 800ba0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <prvInitialiseTaskLists+0x7c>)
 800ba0e:	4a05      	ldr	r2, [pc, #20]	; (800ba24 <prvInitialiseTaskLists+0x68>)
 800ba10:	601a      	str	r2, [r3, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20000844 	.word	0x20000844
 800ba20:	20000ca4 	.word	0x20000ca4
 800ba24:	20000cb8 	.word	0x20000cb8
 800ba28:	20000cd4 	.word	0x20000cd4
 800ba2c:	20000ce8 	.word	0x20000ce8
 800ba30:	20000d00 	.word	0x20000d00
 800ba34:	20000ccc 	.word	0x20000ccc
 800ba38:	20000cd0 	.word	0x20000cd0

0800ba3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba42:	e019      	b.n	800ba78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba44:	f000 fdd6 	bl	800c5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	4b10      	ldr	r3, [pc, #64]	; (800ba8c <prvCheckTasksWaitingTermination+0x50>)
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe fc5b 	bl	800a310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	; (800ba90 <prvCheckTasksWaitingTermination+0x54>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	4a0b      	ldr	r2, [pc, #44]	; (800ba90 <prvCheckTasksWaitingTermination+0x54>)
 800ba62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba64:	4b0b      	ldr	r3, [pc, #44]	; (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	4a0a      	ldr	r2, [pc, #40]	; (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba6e:	f000 fdf1 	bl	800c654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f810 	bl	800ba98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e1      	bne.n	800ba44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000ce8 	.word	0x20000ce8
 800ba90:	20000d14 	.word	0x20000d14
 800ba94:	20000cfc 	.word	0x20000cfc

0800ba98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3354      	adds	r3, #84	; 0x54
 800baa4:	4618      	mov	r0, r3
 800baa6:	f002 f93f 	bl	800dd28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d108      	bne.n	800bac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 ff89 	bl	800c9d0 <vPortFree>
				vPortFree( pxTCB );
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 ff86 	bl	800c9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bac4:	e018      	b.n	800baf8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d103      	bne.n	800bad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 ff7d 	bl	800c9d0 <vPortFree>
	}
 800bad6:	e00f      	b.n	800baf8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d00a      	beq.n	800baf8 <prvDeleteTCB+0x60>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60fb      	str	r3, [r7, #12]
}
 800baf4:	bf00      	nop
 800baf6:	e7fe      	b.n	800baf6 <prvDeleteTCB+0x5e>
	}
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb12:	f04f 32ff 	mov.w	r2, #4294967295
 800bb16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb18:	e008      	b.n	800bb2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1a:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4a04      	ldr	r2, [pc, #16]	; (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb2a:	6013      	str	r3, [r2, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	20000ccc 	.word	0x20000ccc
 800bb3c:	20000d34 	.word	0x20000d34

0800bb40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb46:	4b0b      	ldr	r3, [pc, #44]	; (800bb74 <xTaskGetSchedulerState+0x34>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	607b      	str	r3, [r7, #4]
 800bb52:	e008      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb54:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <xTaskGetSchedulerState+0x38>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	e001      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb66:	687b      	ldr	r3, [r7, #4]
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	20000d20 	.word	0x20000d20
 800bb78:	20000d3c 	.word	0x20000d3c

0800bb7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d056      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb92:	4b2e      	ldr	r3, [pc, #184]	; (800bc4c <xTaskPriorityDisinherit+0xd0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d00a      	beq.n	800bbb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d10a      	bne.n	800bbd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	60bb      	str	r3, [r7, #8]
}
 800bbcc:	bf00      	nop
 800bbce:	e7fe      	b.n	800bbce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d02c      	beq.n	800bc40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d128      	bne.n	800bc40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe fb8c 	bl	800a310 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d903      	bls.n	800bc20 <xTaskPriorityDisinherit+0xa4>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4a09      	ldr	r2, [pc, #36]	; (800bc54 <xTaskPriorityDisinherit+0xd8>)
 800bc2e:	441a      	add	r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7fe fb0d 	bl	800a256 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc40:	697b      	ldr	r3, [r7, #20]
	}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20000840 	.word	0x20000840
 800bc50:	20000d1c 	.word	0x20000d1c
 800bc54:	20000844 	.word	0x20000844

0800bc58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc68:	4b20      	ldr	r3, [pc, #128]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fb4e 	bl	800a310 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7a:	d10a      	bne.n	800bc92 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc82:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4819      	ldr	r0, [pc, #100]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc8c:	f7fe fae3 	bl	800a256 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc90:	e026      	b.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4413      	add	r3, r2
 800bc98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc9a:	4b14      	ldr	r3, [pc, #80]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d209      	bcs.n	800bcbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcaa:	4b12      	ldr	r3, [pc, #72]	; (800bcf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b0f      	ldr	r3, [pc, #60]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe faf1 	bl	800a29e <vListInsert>
}
 800bcbc:	e010      	b.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcbe:	4b0e      	ldr	r3, [pc, #56]	; (800bcf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	; (800bcec <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4610      	mov	r0, r2
 800bccc:	f7fe fae7 	bl	800a29e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d202      	bcs.n	800bce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcda:	4a08      	ldr	r2, [pc, #32]	; (800bcfc <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	6013      	str	r3, [r2, #0]
}
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20000d18 	.word	0x20000d18
 800bcec:	20000840 	.word	0x20000840
 800bcf0:	20000d00 	.word	0x20000d00
 800bcf4:	20000cd0 	.word	0x20000cd0
 800bcf8:	20000ccc 	.word	0x20000ccc
 800bcfc:	20000d34 	.word	0x20000d34

0800bd00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	; 0x28
 800bd04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd0a:	f000 fb07 	bl	800c31c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd0e:	4b1c      	ldr	r3, [pc, #112]	; (800bd80 <xTimerCreateTimerTask+0x80>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d021      	beq.n	800bd5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd1e:	1d3a      	adds	r2, r7, #4
 800bd20:	f107 0108 	add.w	r1, r7, #8
 800bd24:	f107 030c 	add.w	r3, r7, #12
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fa4d 	bl	800a1c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd2e:	6879      	ldr	r1, [r7, #4]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	9202      	str	r2, [sp, #8]
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	2302      	movs	r3, #2
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	460a      	mov	r2, r1
 800bd40:	4910      	ldr	r1, [pc, #64]	; (800bd84 <xTimerCreateTimerTask+0x84>)
 800bd42:	4811      	ldr	r0, [pc, #68]	; (800bd88 <xTimerCreateTimerTask+0x88>)
 800bd44:	f7ff f8b4 	bl	800aeb0 <xTaskCreateStatic>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <xTimerCreateTimerTask+0x8c>)
 800bd4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <xTimerCreateTimerTask+0x8c>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd56:	2301      	movs	r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	613b      	str	r3, [r7, #16]
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd76:	697b      	ldr	r3, [r7, #20]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	20000d70 	.word	0x20000d70
 800bd84:	0800e548 	.word	0x0800e548
 800bd88:	0800bec5 	.word	0x0800bec5
 800bd8c:	20000d74 	.word	0x20000d74

0800bd90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	623b      	str	r3, [r7, #32]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <xTimerGenericCommand+0x98>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d02a      	beq.n	800be1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2b05      	cmp	r3, #5
 800bdd6:	dc18      	bgt.n	800be0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdd8:	f7ff feb2 	bl	800bb40 <xTaskGetSchedulerState>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d109      	bne.n	800bdf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bde2:	4b11      	ldr	r3, [pc, #68]	; (800be28 <xTimerGenericCommand+0x98>)
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f107 0110 	add.w	r1, r7, #16
 800bdea:	2300      	movs	r3, #0
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	f7fe fbf7 	bl	800a5e0 <xQueueGenericSend>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24
 800bdf4:	e012      	b.n	800be1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <xTimerGenericCommand+0x98>)
 800bdf8:	6818      	ldr	r0, [r3, #0]
 800bdfa:	f107 0110 	add.w	r1, r7, #16
 800bdfe:	2300      	movs	r3, #0
 800be00:	2200      	movs	r2, #0
 800be02:	f7fe fbed 	bl	800a5e0 <xQueueGenericSend>
 800be06:	6278      	str	r0, [r7, #36]	; 0x24
 800be08:	e008      	b.n	800be1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <xTimerGenericCommand+0x98>)
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f107 0110 	add.w	r1, r7, #16
 800be12:	2300      	movs	r3, #0
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	f7fe fce1 	bl	800a7dc <xQueueGenericSendFromISR>
 800be1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20000d70 	.word	0x20000d70

0800be2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be36:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <prvProcessExpiredTimer+0x94>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	3304      	adds	r3, #4
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe fa63 	bl	800a310 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d022      	beq.n	800be9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	18d1      	adds	r1, r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	6978      	ldr	r0, [r7, #20]
 800be66:	f000 f8d1 	bl	800c00c <prvInsertTimerInActiveList>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01f      	beq.n	800beb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be70:	2300      	movs	r3, #0
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	2100      	movs	r1, #0
 800be7a:	6978      	ldr	r0, [r7, #20]
 800be7c:	f7ff ff88 	bl	800bd90 <xTimerGenericCommand>
 800be80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d113      	bne.n	800beb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	60fb      	str	r3, [r7, #12]
}
 800be9a:	bf00      	nop
 800be9c:	e7fe      	b.n	800be9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea4:	f023 0301 	bic.w	r3, r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	6978      	ldr	r0, [r7, #20]
 800beb6:	4798      	blx	r3
}
 800beb8:	bf00      	nop
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20000d68 	.word	0x20000d68

0800bec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 f857 	bl	800bf84 <prvGetNextExpireTime>
 800bed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4619      	mov	r1, r3
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f803 	bl	800bee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bee2:	f000 f8d5 	bl	800c090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bee6:	e7f1      	b.n	800becc <prvTimerTask+0x8>

0800bee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bef2:	f7ff fa39 	bl	800b368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4618      	mov	r0, r3
 800befc:	f000 f866 	bl	800bfcc <prvSampleTimeNow>
 800bf00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d130      	bne.n	800bf6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <prvProcessTimerOrBlockTask+0x3c>
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d806      	bhi.n	800bf24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf16:	f7ff fa35 	bl	800b384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff ff85 	bl	800be2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf22:	e024      	b.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d008      	beq.n	800bf3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf2a:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <prvProcessTimerOrBlockTask+0x90>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <prvProcessTimerOrBlockTask+0x50>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <prvProcessTimerOrBlockTask+0x52>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <prvProcessTimerOrBlockTask+0x94>)
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f7fe ff7d 	bl	800ae48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf4e:	f7ff fa19 	bl	800b384 <xTaskResumeAll>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf58:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <prvProcessTimerOrBlockTask+0x98>)
 800bf5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5e:	601a      	str	r2, [r3, #0]
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	f3bf 8f6f 	isb	sy
}
 800bf68:	e001      	b.n	800bf6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf6a:	f7ff fa0b 	bl	800b384 <xTaskResumeAll>
}
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20000d6c 	.word	0x20000d6c
 800bf7c:	20000d70 	.word	0x20000d70
 800bf80:	e000ed04 	.word	0xe000ed04

0800bf84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf8c:	4b0e      	ldr	r3, [pc, #56]	; (800bfc8 <prvGetNextExpireTime+0x44>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <prvGetNextExpireTime+0x16>
 800bf96:	2201      	movs	r2, #1
 800bf98:	e000      	b.n	800bf9c <prvGetNextExpireTime+0x18>
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d105      	bne.n	800bfb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfa8:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <prvGetNextExpireTime+0x44>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	e001      	b.n	800bfb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	20000d68 	.word	0x20000d68

0800bfcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfd4:	f7ff fa74 	bl	800b4c0 <xTaskGetTickCount>
 800bfd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfda:	4b0b      	ldr	r3, [pc, #44]	; (800c008 <prvSampleTimeNow+0x3c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d205      	bcs.n	800bff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfe4:	f000 f936 	bl	800c254 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	e002      	b.n	800bff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bff6:	4a04      	ldr	r2, [pc, #16]	; (800c008 <prvSampleTimeNow+0x3c>)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bffc:	68fb      	ldr	r3, [r7, #12]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	20000d78 	.word	0x20000d78

0800c00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d812      	bhi.n	800c058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	1ad2      	subs	r2, r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d302      	bcc.n	800c046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c040:	2301      	movs	r3, #1
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	e01b      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <prvInsertTimerInActiveList+0x7c>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7fe f924 	bl	800a29e <vListInsert>
 800c056:	e012      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d206      	bcs.n	800c06e <prvInsertTimerInActiveList+0x62>
 800c060:	68ba      	ldr	r2, [r7, #8]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	429a      	cmp	r2, r3
 800c066:	d302      	bcc.n	800c06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	617b      	str	r3, [r7, #20]
 800c06c:	e007      	b.n	800c07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c06e:	4b07      	ldr	r3, [pc, #28]	; (800c08c <prvInsertTimerInActiveList+0x80>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3304      	adds	r3, #4
 800c076:	4619      	mov	r1, r3
 800c078:	4610      	mov	r0, r2
 800c07a:	f7fe f910 	bl	800a29e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c07e:	697b      	ldr	r3, [r7, #20]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20000d6c 	.word	0x20000d6c
 800c08c:	20000d68 	.word	0x20000d68

0800c090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08e      	sub	sp, #56	; 0x38
 800c094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c096:	e0ca      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da18      	bge.n	800c0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c09e:	1d3b      	adds	r3, r7, #4
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61fb      	str	r3, [r7, #28]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c6:	6850      	ldr	r0, [r2, #4]
 800c0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0ca:	6892      	ldr	r2, [r2, #8]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f2c0 80aa 	blt.w	800c22c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	695b      	ldr	r3, [r3, #20]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe f911 	bl	800a310 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff ff6b 	bl	800bfcc <prvSampleTimeNow>
 800c0f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b09      	cmp	r3, #9
 800c0fc:	f200 8097 	bhi.w	800c22e <prvProcessReceivedCommands+0x19e>
 800c100:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <prvProcessReceivedCommands+0x78>)
 800c102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c106:	bf00      	nop
 800c108:	0800c131 	.word	0x0800c131
 800c10c:	0800c131 	.word	0x0800c131
 800c110:	0800c131 	.word	0x0800c131
 800c114:	0800c1a5 	.word	0x0800c1a5
 800c118:	0800c1b9 	.word	0x0800c1b9
 800c11c:	0800c203 	.word	0x0800c203
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c131 	.word	0x0800c131
 800c128:	0800c1a5 	.word	0x0800c1a5
 800c12c:	0800c1b9 	.word	0x0800c1b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c136:	f043 0301 	orr.w	r3, r3, #1
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	699b      	ldr	r3, [r3, #24]
 800c148:	18d1      	adds	r1, r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c150:	f7ff ff5c 	bl	800c00c <prvInsertTimerInActiveList>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d069      	beq.n	800c22e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c168:	f003 0304 	and.w	r3, r3, #4
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d05e      	beq.n	800c22e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	441a      	add	r2, r3
 800c178:	2300      	movs	r3, #0
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2300      	movs	r3, #0
 800c17e:	2100      	movs	r1, #0
 800c180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c182:	f7ff fe05 	bl	800bd90 <xTimerGenericCommand>
 800c186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d14f      	bne.n	800c22e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	61bb      	str	r3, [r7, #24]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1aa:	f023 0301 	bic.w	r3, r3, #1
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c1b6:	e03a      	b.n	800c22e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1be:	f043 0301 	orr.w	r3, r3, #1
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	617b      	str	r3, [r7, #20]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	18d1      	adds	r1, r2, r3
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1fc:	f7ff ff06 	bl	800c00c <prvInsertTimerInActiveList>
					break;
 800c200:	e015      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c212:	f000 fbdd 	bl	800c9d0 <vPortFree>
 800c216:	e00a      	b.n	800c22e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c21e:	f023 0301 	bic.w	r3, r3, #1
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c22a:	e000      	b.n	800c22e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c22c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c22e:	4b08      	ldr	r3, [pc, #32]	; (800c250 <prvProcessReceivedCommands+0x1c0>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	1d39      	adds	r1, r7, #4
 800c234:	2200      	movs	r2, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fb6c 	bl	800a914 <xQueueReceive>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af2a 	bne.w	800c098 <prvProcessReceivedCommands+0x8>
	}
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	3730      	adds	r7, #48	; 0x30
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000d70 	.word	0x20000d70

0800c254 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b088      	sub	sp, #32
 800c258:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c25a:	e048      	b.n	800c2ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c25c:	4b2d      	ldr	r3, [pc, #180]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c266:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3304      	adds	r3, #4
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe f84b 	bl	800a310 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d02e      	beq.n	800c2ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	693a      	ldr	r2, [r7, #16]
 800c296:	4413      	add	r3, r2
 800c298:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d90e      	bls.n	800c2c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2ae:	4b19      	ldr	r3, [pc, #100]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f7fd fff0 	bl	800a29e <vListInsert>
 800c2be:	e016      	b.n	800c2ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7ff fd60 	bl	800bd90 <xTimerGenericCommand>
 800c2d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10a      	bne.n	800c2ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	603b      	str	r3, [r7, #0]
}
 800c2ea:	bf00      	nop
 800c2ec:	e7fe      	b.n	800c2ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1b1      	bne.n	800c25c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2f8:	4b06      	ldr	r3, [pc, #24]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2fe:	4b06      	ldr	r3, [pc, #24]	; (800c318 <prvSwitchTimerLists+0xc4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a04      	ldr	r2, [pc, #16]	; (800c314 <prvSwitchTimerLists+0xc0>)
 800c304:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c306:	4a04      	ldr	r2, [pc, #16]	; (800c318 <prvSwitchTimerLists+0xc4>)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	6013      	str	r3, [r2, #0]
}
 800c30c:	bf00      	nop
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20000d68 	.word	0x20000d68
 800c318:	20000d6c 	.word	0x20000d6c

0800c31c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c322:	f000 f967 	bl	800c5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c326:	4b15      	ldr	r3, [pc, #84]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d120      	bne.n	800c370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c32e:	4814      	ldr	r0, [pc, #80]	; (800c380 <prvCheckForValidListAndQueue+0x64>)
 800c330:	f7fd ff64 	bl	800a1fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c334:	4813      	ldr	r0, [pc, #76]	; (800c384 <prvCheckForValidListAndQueue+0x68>)
 800c336:	f7fd ff61 	bl	800a1fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c33a:	4b13      	ldr	r3, [pc, #76]	; (800c388 <prvCheckForValidListAndQueue+0x6c>)
 800c33c:	4a10      	ldr	r2, [pc, #64]	; (800c380 <prvCheckForValidListAndQueue+0x64>)
 800c33e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c340:	4b12      	ldr	r3, [pc, #72]	; (800c38c <prvCheckForValidListAndQueue+0x70>)
 800c342:	4a10      	ldr	r2, [pc, #64]	; (800c384 <prvCheckForValidListAndQueue+0x68>)
 800c344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c346:	2300      	movs	r3, #0
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	4b11      	ldr	r3, [pc, #68]	; (800c390 <prvCheckForValidListAndQueue+0x74>)
 800c34c:	4a11      	ldr	r2, [pc, #68]	; (800c394 <prvCheckForValidListAndQueue+0x78>)
 800c34e:	2110      	movs	r1, #16
 800c350:	200a      	movs	r0, #10
 800c352:	f7fe f86f 	bl	800a434 <xQueueGenericCreateStatic>
 800c356:	4603      	mov	r3, r0
 800c358:	4a08      	ldr	r2, [pc, #32]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c35a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c35c:	4b07      	ldr	r3, [pc, #28]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d005      	beq.n	800c370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c364:	4b05      	ldr	r3, [pc, #20]	; (800c37c <prvCheckForValidListAndQueue+0x60>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	490b      	ldr	r1, [pc, #44]	; (800c398 <prvCheckForValidListAndQueue+0x7c>)
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe fd42 	bl	800adf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c370:	f000 f970 	bl	800c654 <vPortExitCritical>
}
 800c374:	bf00      	nop
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000d70 	.word	0x20000d70
 800c380:	20000d40 	.word	0x20000d40
 800c384:	20000d54 	.word	0x20000d54
 800c388:	20000d68 	.word	0x20000d68
 800c38c:	20000d6c 	.word	0x20000d6c
 800c390:	20000e1c 	.word	0x20000e1c
 800c394:	20000d7c 	.word	0x20000d7c
 800c398:	0800e550 	.word	0x0800e550

0800c39c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3b04      	subs	r3, #4
 800c3ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3b04      	subs	r3, #4
 800c3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	f023 0201 	bic.w	r2, r3, #1
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3b04      	subs	r3, #4
 800c3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3cc:	4a0c      	ldr	r2, [pc, #48]	; (800c400 <pxPortInitialiseStack+0x64>)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3b14      	subs	r3, #20
 800c3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3b04      	subs	r3, #4
 800c3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f06f 0202 	mvn.w	r2, #2
 800c3ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3b20      	subs	r3, #32
 800c3f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	0800c405 	.word	0x0800c405

0800c404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c40e:	4b12      	ldr	r3, [pc, #72]	; (800c458 <prvTaskExitError+0x54>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c416:	d00a      	beq.n	800c42e <prvTaskExitError+0x2a>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	60fb      	str	r3, [r7, #12]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <prvTaskExitError+0x28>
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	60bb      	str	r3, [r7, #8]
}
 800c440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c442:	bf00      	nop
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0fc      	beq.n	800c444 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c44a:	bf00      	nop
 800c44c:	bf00      	nop
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	2000002c 	.word	0x2000002c
 800c45c:	00000000 	.word	0x00000000

0800c460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c460:	4b07      	ldr	r3, [pc, #28]	; (800c480 <pxCurrentTCBConst2>)
 800c462:	6819      	ldr	r1, [r3, #0]
 800c464:	6808      	ldr	r0, [r1, #0]
 800c466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	f380 8809 	msr	PSP, r0
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	4770      	bx	lr
 800c47c:	f3af 8000 	nop.w

0800c480 <pxCurrentTCBConst2>:
 800c480:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop

0800c488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c488:	4808      	ldr	r0, [pc, #32]	; (800c4ac <prvPortStartFirstTask+0x24>)
 800c48a:	6800      	ldr	r0, [r0, #0]
 800c48c:	6800      	ldr	r0, [r0, #0]
 800c48e:	f380 8808 	msr	MSP, r0
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8814 	msr	CONTROL, r0
 800c49a:	b662      	cpsie	i
 800c49c:	b661      	cpsie	f
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	df00      	svc	0
 800c4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed08 	.word	0xe000ed08

0800c4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4b6:	4b46      	ldr	r3, [pc, #280]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a46      	ldr	r2, [pc, #280]	; (800c5d4 <xPortStartScheduler+0x124>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10a      	bne.n	800c4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4d6:	4b3e      	ldr	r3, [pc, #248]	; (800c5d0 <xPortStartScheduler+0x120>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a3f      	ldr	r2, [pc, #252]	; (800c5d8 <xPortStartScheduler+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10a      	bne.n	800c4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4f6:	4b39      	ldr	r3, [pc, #228]	; (800c5dc <xPortStartScheduler+0x12c>)
 800c4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	22ff      	movs	r2, #255	; 0xff
 800c506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <xPortStartScheduler+0x130>)
 800c51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c51e:	4b31      	ldr	r3, [pc, #196]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c524:	e009      	b.n	800c53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c526:	4b2f      	ldr	r3, [pc, #188]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	4a2d      	ldr	r2, [pc, #180]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c530:	78fb      	ldrb	r3, [r7, #3]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c53a:	78fb      	ldrb	r3, [r7, #3]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c542:	2b80      	cmp	r3, #128	; 0x80
 800c544:	d0ef      	beq.n	800c526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c546:	4b27      	ldr	r3, [pc, #156]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1c3 0307 	rsb	r3, r3, #7
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d00a      	beq.n	800c568 <xPortStartScheduler+0xb8>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	60bb      	str	r3, [r7, #8]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c568:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c572:	4b1c      	ldr	r3, [pc, #112]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <xPortStartScheduler+0x134>)
 800c57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	b2da      	uxtb	r2, r3
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c586:	4b18      	ldr	r3, [pc, #96]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c592:	4b15      	ldr	r3, [pc, #84]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a14      	ldr	r2, [pc, #80]	; (800c5e8 <xPortStartScheduler+0x138>)
 800c598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c59e:	f000 f8dd 	bl	800c75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <xPortStartScheduler+0x13c>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5a8:	f000 f8fc 	bl	800c7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a0f      	ldr	r2, [pc, #60]	; (800c5f0 <xPortStartScheduler+0x140>)
 800c5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5b8:	f7ff ff66 	bl	800c488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5bc:	f7ff f84a 	bl	800b654 <vTaskSwitchContext>
	prvTaskExitError();
 800c5c0:	f7ff ff20 	bl	800c404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3718      	adds	r7, #24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	e000ed00 	.word	0xe000ed00
 800c5d4:	410fc271 	.word	0x410fc271
 800c5d8:	410fc270 	.word	0x410fc270
 800c5dc:	e000e400 	.word	0xe000e400
 800c5e0:	20000e6c 	.word	0x20000e6c
 800c5e4:	20000e70 	.word	0x20000e70
 800c5e8:	e000ed20 	.word	0xe000ed20
 800c5ec:	2000002c 	.word	0x2000002c
 800c5f0:	e000ef34 	.word	0xe000ef34

0800c5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	607b      	str	r3, [r7, #4]
}
 800c60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c60e:	4b0f      	ldr	r3, [pc, #60]	; (800c64c <vPortEnterCritical+0x58>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <vPortEnterCritical+0x58>)
 800c616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c618:	4b0c      	ldr	r3, [pc, #48]	; (800c64c <vPortEnterCritical+0x58>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d10f      	bne.n	800c640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <vPortEnterCritical+0x5c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <vPortEnterCritical+0x4c>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	603b      	str	r3, [r7, #0]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <vPortEnterCritical+0x4a>
	}
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	2000002c 	.word	0x2000002c
 800c650:	e000ed04 	.word	0xe000ed04

0800c654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c65a:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <vPortExitCritical+0x50>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10a      	bne.n	800c678 <vPortExitCritical+0x24>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	607b      	str	r3, [r7, #4]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <vPortExitCritical+0x50>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	4a09      	ldr	r2, [pc, #36]	; (800c6a4 <vPortExitCritical+0x50>)
 800c680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d105      	bne.n	800c696 <vPortExitCritical+0x42>
 800c68a:	2300      	movs	r3, #0
 800c68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	f383 8811 	msr	BASEPRI, r3
}
 800c694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c696:	bf00      	nop
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	2000002c 	.word	0x2000002c
	...

0800c6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c6d4:	f380 8811 	msr	BASEPRI, r0
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f7fe ffb8 	bl	800b654 <vTaskSwitchContext>
 800c6e4:	f04f 0000 	mov.w	r0, #0
 800c6e8:	f380 8811 	msr	BASEPRI, r0
 800c6ec:	bc09      	pop	{r0, r3}
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6808      	ldr	r0, [r1, #0]
 800c6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f6:	f01e 0f10 	tst.w	lr, #16
 800c6fa:	bf08      	it	eq
 800c6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c700:	f380 8809 	msr	PSP, r0
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst>:
 800c710:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c732:	f7fe fed5 	bl	800b4e0 <xTaskIncrementTick>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c73c:	4b06      	ldr	r3, [pc, #24]	; (800c758 <xPortSysTickHandler+0x40>)
 800c73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f383 8811 	msr	BASEPRI, r3
}
 800c74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c760:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <vPortSetupTimerInterrupt+0x38>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <vPortSetupTimerInterrupt+0x3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a0a      	ldr	r2, [pc, #40]	; (800c79c <vPortSetupTimerInterrupt+0x40>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <vPortSetupTimerInterrupt+0x44>)
 800c77a:	3b01      	subs	r3, #1
 800c77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c77e:	4b04      	ldr	r3, [pc, #16]	; (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	e000e010 	.word	0xe000e010
 800c794:	e000e018 	.word	0xe000e018
 800c798:	20000000 	.word	0x20000000
 800c79c:	10624dd3 	.word	0x10624dd3
 800c7a0:	e000e014 	.word	0xe000e014

0800c7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7b4 <vPortEnableVFP+0x10>
 800c7a8:	6801      	ldr	r1, [r0, #0]
 800c7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7ae:	6001      	str	r1, [r0, #0]
 800c7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7b2:	bf00      	nop
 800c7b4:	e000ed88 	.word	0xe000ed88

0800c7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7be:	f3ef 8305 	mrs	r3, IPSR
 800c7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b0f      	cmp	r3, #15
 800c7c8:	d914      	bls.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <vPortValidateInterruptPriority+0x70>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7d4:	4b15      	ldr	r3, [pc, #84]	; (800c82c <vPortValidateInterruptPriority+0x74>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7afa      	ldrb	r2, [r7, #11]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d20a      	bcs.n	800c7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7f4:	4b0e      	ldr	r3, [pc, #56]	; (800c830 <vPortValidateInterruptPriority+0x78>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c7fc:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <vPortValidateInterruptPriority+0x7c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d90a      	bls.n	800c81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	603b      	str	r3, [r7, #0]
}
 800c816:	bf00      	nop
 800c818:	e7fe      	b.n	800c818 <vPortValidateInterruptPriority+0x60>
	}
 800c81a:	bf00      	nop
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	e000e3f0 	.word	0xe000e3f0
 800c82c:	20000e6c 	.word	0x20000e6c
 800c830:	e000ed0c 	.word	0xe000ed0c
 800c834:	20000e70 	.word	0x20000e70

0800c838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c844:	f7fe fd90 	bl	800b368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c848:	4b5b      	ldr	r3, [pc, #364]	; (800c9b8 <pvPortMalloc+0x180>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d101      	bne.n	800c854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c850:	f000 f920 	bl	800ca94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c854:	4b59      	ldr	r3, [pc, #356]	; (800c9bc <pvPortMalloc+0x184>)
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4013      	ands	r3, r2
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f040 8093 	bne.w	800c988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01d      	beq.n	800c8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c868:	2208      	movs	r2, #8
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4413      	add	r3, r2
 800c86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d014      	beq.n	800c8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f023 0307 	bic.w	r3, r3, #7
 800c880:	3308      	adds	r3, #8
 800c882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f003 0307 	and.w	r3, r3, #7
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	617b      	str	r3, [r7, #20]
}
 800c8a0:	bf00      	nop
 800c8a2:	e7fe      	b.n	800c8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d06e      	beq.n	800c988 <pvPortMalloc+0x150>
 800c8aa:	4b45      	ldr	r3, [pc, #276]	; (800c9c0 <pvPortMalloc+0x188>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d869      	bhi.n	800c988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8b4:	4b43      	ldr	r3, [pc, #268]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8b8:	4b42      	ldr	r3, [pc, #264]	; (800c9c4 <pvPortMalloc+0x18c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8be:	e004      	b.n	800c8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d903      	bls.n	800c8dc <pvPortMalloc+0xa4>
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1f1      	bne.n	800c8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8dc:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <pvPortMalloc+0x180>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d050      	beq.n	800c988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2208      	movs	r2, #8
 800c8ec:	4413      	add	r3, r2
 800c8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	2308      	movs	r3, #8
 800c902:	005b      	lsls	r3, r3, #1
 800c904:	429a      	cmp	r2, r3
 800c906:	d91f      	bls.n	800c948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00a      	beq.n	800c930 <pvPortMalloc+0xf8>
	__asm volatile
 800c91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91e:	f383 8811 	msr	BASEPRI, r3
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	f3bf 8f4f 	dsb	sy
 800c92a:	613b      	str	r3, [r7, #16]
}
 800c92c:	bf00      	nop
 800c92e:	e7fe      	b.n	800c92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c942:	69b8      	ldr	r0, [r7, #24]
 800c944:	f000 f908 	bl	800cb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c948:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <pvPortMalloc+0x188>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	4a1b      	ldr	r2, [pc, #108]	; (800c9c0 <pvPortMalloc+0x188>)
 800c954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <pvPortMalloc+0x188>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4b1b      	ldr	r3, [pc, #108]	; (800c9c8 <pvPortMalloc+0x190>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d203      	bcs.n	800c96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c962:	4b17      	ldr	r3, [pc, #92]	; (800c9c0 <pvPortMalloc+0x188>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <pvPortMalloc+0x190>)
 800c968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <pvPortMalloc+0x184>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	431a      	orrs	r2, r3
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <pvPortMalloc+0x194>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <pvPortMalloc+0x194>)
 800c986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c988:	f7fe fcfc 	bl	800b384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	f003 0307 	and.w	r3, r3, #7
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00a      	beq.n	800c9ac <pvPortMalloc+0x174>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60fb      	str	r3, [r7, #12]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <pvPortMalloc+0x172>
	return pvReturn;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3728      	adds	r7, #40	; 0x28
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20004a7c 	.word	0x20004a7c
 800c9bc:	20004a90 	.word	0x20004a90
 800c9c0:	20004a80 	.word	0x20004a80
 800c9c4:	20004a74 	.word	0x20004a74
 800c9c8:	20004a84 	.word	0x20004a84
 800c9cc:	20004a88 	.word	0x20004a88

0800c9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d04d      	beq.n	800ca7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	4b24      	ldr	r3, [pc, #144]	; (800ca88 <vPortFree+0xb8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10a      	bne.n	800ca14 <vPortFree+0x44>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	60fb      	str	r3, [r7, #12]
}
 800ca10:	bf00      	nop
 800ca12:	e7fe      	b.n	800ca12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00a      	beq.n	800ca32 <vPortFree+0x62>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	60bb      	str	r3, [r7, #8]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <vPortFree+0xb8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01e      	beq.n	800ca7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <vPortFree+0xb8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	43db      	mvns	r3, r3
 800ca52:	401a      	ands	r2, r3
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca58:	f7fe fc86 	bl	800b368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <vPortFree+0xbc>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4413      	add	r3, r2
 800ca66:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <vPortFree+0xbc>)
 800ca68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca6a:	6938      	ldr	r0, [r7, #16]
 800ca6c:	f000 f874 	bl	800cb58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca70:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <vPortFree+0xc0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	4a06      	ldr	r2, [pc, #24]	; (800ca90 <vPortFree+0xc0>)
 800ca78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca7a:	f7fe fc83 	bl	800b384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca7e:	bf00      	nop
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20004a90 	.word	0x20004a90
 800ca8c:	20004a80 	.word	0x20004a80
 800ca90:	20004a8c 	.word	0x20004a8c

0800ca94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caa0:	4b27      	ldr	r3, [pc, #156]	; (800cb40 <prvHeapInit+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00c      	beq.n	800cac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3307      	adds	r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	4a1f      	ldr	r2, [pc, #124]	; (800cb40 <prvHeapInit+0xac>)
 800cac4:	4413      	add	r3, r2
 800cac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cacc:	4a1d      	ldr	r2, [pc, #116]	; (800cb44 <prvHeapInit+0xb0>)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <prvHeapInit+0xb0>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cae0:	2208      	movs	r2, #8
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f023 0307 	bic.w	r3, r3, #7
 800caee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a15      	ldr	r2, [pc, #84]	; (800cb48 <prvHeapInit+0xb4>)
 800caf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <prvHeapInit+0xb4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvHeapInit+0xb4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <prvHeapInit+0xb8>)
 800cb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <prvHeapInit+0xbc>)
 800cb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <prvHeapInit+0xc0>)
 800cb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20000e74 	.word	0x20000e74
 800cb44:	20004a74 	.word	0x20004a74
 800cb48:	20004a7c 	.word	0x20004a7c
 800cb4c:	20004a84 	.word	0x20004a84
 800cb50:	20004a80 	.word	0x20004a80
 800cb54:	20004a90 	.word	0x20004a90

0800cb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb60:	4b28      	ldr	r3, [pc, #160]	; (800cc04 <prvInsertBlockIntoFreeList+0xac>)
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	e002      	b.n	800cb6c <prvInsertBlockIntoFreeList+0x14>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8f7      	bhi.n	800cb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	4413      	add	r3, r2
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d108      	bne.n	800cb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	441a      	add	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d118      	bne.n	800cbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d00d      	beq.n	800cbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	441a      	add	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	e008      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e003      	b.n	800cbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d002      	beq.n	800cbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20004a74 	.word	0x20004a74
 800cc08:	20004a7c 	.word	0x20004a7c

0800cc0c <tk_drawchars>:
uint16_t	tk_console_actual_column = 0;
uint8_t		tk_console_newline = 0;



void tk_drawchars(int xpos, int ypos, FontDef *font, uint16_t color, uint16_t bgcolor, char *str) {
 800cc0c:	b480      	push	{r7}
 800cc0e:	b08b      	sub	sp, #44	; 0x2c
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	807b      	strh	r3, [r7, #2]
	uint8_t ch;
	uint16_t c;

	uint32_t inc1 = VIDEODISP_WIDTH - font->FontWidth;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800cc22:	61bb      	str	r3, [r7, #24]
	uint32_t inc2 = font->FontWidth - font->FontHeight*VIDEODISP_WIDTH;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	785b      	ldrb	r3, [r3, #1]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	4613      	mov	r3, r2
 800cc32:	0112      	lsls	r2, r2, #4
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	011b      	lsls	r3, r3, #4
 800cc38:	440b      	add	r3, r1
 800cc3a:	617b      	str	r3, [r7, #20]

	__IO uint16_t *vmem = (uint16_t *)(VIDEOMEM_ADDR_LAYER1 + ypos * VIDEOMEM_LINE_SIZE + xpos * VIDEOMEM_PIXEL_SIZE);
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	015b      	lsls	r3, r3, #5
 800cc46:	461a      	mov	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 800cc52:	623b      	str	r3, [r7, #32]

	while ((ch = *str++) != 0) {
 800cc54:	e04d      	b.n	800ccf2 <tk_drawchars+0xe6>
	    for(uint16_t i = 0; i < font->FontHeight; i++) {
 800cc56:	2300      	movs	r3, #0
 800cc58:	83fb      	strh	r3, [r7, #30]
 800cc5a:	e03f      	b.n	800ccdc <tk_drawchars+0xd0>
	    	if ((ch < ' ') || (ch > '~'))
 800cc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc60:	2b1f      	cmp	r3, #31
 800cc62:	d903      	bls.n	800cc6c <tk_drawchars+0x60>
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc68:	2b7e      	cmp	r3, #126	; 0x7e
 800cc6a:	d902      	bls.n	800cc72 <tk_drawchars+0x66>
	    		ch = ' ';
 800cc6c:	2320      	movs	r3, #32
 800cc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        uint16_t b = font->data[(ch - 32) * font->FontHeight + i];
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc7a:	3b20      	subs	r3, #32
 800cc7c:	6879      	ldr	r1, [r7, #4]
 800cc7e:	7849      	ldrb	r1, [r1, #1]
 800cc80:	fb01 f103 	mul.w	r1, r1, r3
 800cc84:	8bfb      	ldrh	r3, [r7, #30]
 800cc86:	440b      	add	r3, r1
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	827b      	strh	r3, [r7, #18]
	        for(uint16_t j = 0; j < font->FontWidth; j++) {
 800cc90:	2300      	movs	r3, #0
 800cc92:	83bb      	strh	r3, [r7, #28]
 800cc94:	e014      	b.n	800ccc0 <tk_drawchars+0xb4>
	            if((b << j) & 0x8000)  {
 800cc96:	8a7a      	ldrh	r2, [r7, #18]
 800cc98:	8bbb      	ldrh	r3, [r7, #28]
 800cc9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <tk_drawchars+0xa0>
	            	c = color;
 800cca6:	887b      	ldrh	r3, [r7, #2]
 800cca8:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ccaa:	e001      	b.n	800ccb0 <tk_drawchars+0xa4>
	            } else {
		        	c = bgcolor;
 800ccac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ccae:	84bb      	strh	r3, [r7, #36]	; 0x24
	            }
	            *vmem++ = c;
 800ccb0:	6a3b      	ldr	r3, [r7, #32]
 800ccb2:	1c9a      	adds	r2, r3, #2
 800ccb4:	623a      	str	r2, [r7, #32]
 800ccb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccb8:	801a      	strh	r2, [r3, #0]
	        for(uint16_t j = 0; j < font->FontWidth; j++) {
 800ccba:	8bbb      	ldrh	r3, [r7, #28]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	83bb      	strh	r3, [r7, #28]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	8bba      	ldrh	r2, [r7, #28]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d3e4      	bcc.n	800cc96 <tk_drawchars+0x8a>
	        }
	        vmem += inc1;
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	623b      	str	r3, [r7, #32]
	    for(uint16_t i = 0; i < font->FontHeight; i++) {
 800ccd6:	8bfb      	ldrh	r3, [r7, #30]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	83fb      	strh	r3, [r7, #30]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8bfa      	ldrh	r2, [r7, #30]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d3b9      	bcc.n	800cc5c <tk_drawchars+0x50>
	    }
	    vmem += inc2;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	6a3a      	ldr	r2, [r7, #32]
 800ccee:	4413      	add	r3, r2
 800ccf0:	623b      	str	r3, [r7, #32]
	while ((ch = *str++) != 0) {
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	637a      	str	r2, [r7, #52]	; 0x34
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1a7      	bne.n	800cc56 <tk_drawchars+0x4a>
	};

}
 800cd06:	bf00      	nop
 800cd08:	bf00      	nop
 800cd0a:	372c      	adds	r7, #44	; 0x2c
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <tk_grs_fillrect>:
 *   8 bits - green
 *   8 bits - blue
 *
 *
 */
void tk_grs_fillrect(int xpos, int ypos, int width, int height, uint32_t color_argb) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b096      	sub	sp, #88	; 0x58
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
  DMA2D_HandleTypeDef hdma2d;

  hdma2d.Instance = DMA2D;
 800cd22:	4b17      	ldr	r3, [pc, #92]	; (800cd80 <tk_grs_fillrect+0x6c>)
 800cd24:	613b      	str	r3, [r7, #16]
  hdma2d.Init.Mode = DMA2D_R2M;
 800cd26:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800cd2a:	617b      	str	r3, [r7, #20]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	61bb      	str	r3, [r7, #24]
  hdma2d.Init.OutputOffset = VIDEODISP_WIDTH - width;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800cd36:	61fb      	str	r3, [r7, #28]

  HAL_DMA2D_Init(&hdma2d);
 800cd38:	f107 0310 	add.w	r3, r7, #16
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7f4 fe2f 	bl	80019a0 <HAL_DMA2D_Init>
  HAL_DMA2D_Start_IT(&hdma2d, color_argb, VIDEOMEM_ADDR_LAYER1 + ypos * VIDEOMEM_LINE_SIZE + xpos * VIDEOMEM_PIXEL_SIZE, width, height);
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	4613      	mov	r3, r2
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	1a9b      	subs	r3, r3, r2
 800cd4a:	015b      	lsls	r3, r3, #5
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	f103 4250 	add.w	r2, r3, #3489660928	; 0xd0000000
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	f107 0010 	add.w	r0, r7, #16
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	460b      	mov	r3, r1
 800cd64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd66:	f7f4 fe64 	bl	8001a32 <HAL_DMA2D_Start_IT>
  HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 800cd6a:	f107 0310 	add.w	r3, r7, #16
 800cd6e:	2164      	movs	r1, #100	; 0x64
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f4 fe91 	bl	8001a98 <HAL_DMA2D_PollForTransfer>
}
 800cd76:	bf00      	nop
 800cd78:	3750      	adds	r7, #80	; 0x50
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	4002b000 	.word	0x4002b000

0800cd84 <tk_console_next_line>:


void tk_console_next_line() {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af02      	add	r7, sp, #8
	int x;

	for (x = tk_console_actual_column; x < CONSOLE_COLUMNS; x++)
 800cd8a:	4b32      	ldr	r3, [pc, #200]	; (800ce54 <tk_console_next_line+0xd0>)
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e00c      	b.n	800cdac <tk_console_next_line+0x28>
		tk_console_data[tk_console_pos++] = ' ';
 800cd92:	4b31      	ldr	r3, [pc, #196]	; (800ce58 <tk_console_next_line+0xd4>)
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	b291      	uxth	r1, r2
 800cd9a:	4a2f      	ldr	r2, [pc, #188]	; (800ce58 <tk_console_next_line+0xd4>)
 800cd9c:	8011      	strh	r1, [r2, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	4b2e      	ldr	r3, [pc, #184]	; (800ce5c <tk_console_next_line+0xd8>)
 800cda2:	2120      	movs	r1, #32
 800cda4:	5499      	strb	r1, [r3, r2]
	for (x = tk_console_actual_column; x < CONSOLE_COLUMNS; x++)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b21      	cmp	r3, #33	; 0x21
 800cdb0:	ddef      	ble.n	800cd92 <tk_console_next_line+0xe>

	tk_console_actual_column = 0;
 800cdb2:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <tk_console_next_line+0xd0>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	801a      	strh	r2, [r3, #0]

	if (tk_console_actual_line < CONSOLE_LINES - 1) {
 800cdb8:	4b29      	ldr	r3, [pc, #164]	; (800ce60 <tk_console_next_line+0xdc>)
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	2b0f      	cmp	r3, #15
 800cdbe:	d806      	bhi.n	800cdce <tk_console_next_line+0x4a>
		tk_console_actual_line++;
 800cdc0:	4b27      	ldr	r3, [pc, #156]	; (800ce60 <tk_console_next_line+0xdc>)
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	4b25      	ldr	r3, [pc, #148]	; (800ce60 <tk_console_next_line+0xdc>)
 800cdca:	801a      	strh	r2, [r3, #0]
		return;
 800cdcc:	e03e      	b.n	800ce4c <tk_console_next_line+0xc8>
	};

	//scroll
	tk_console_pos -= CONSOLE_COLUMNS;
 800cdce:	4b22      	ldr	r3, [pc, #136]	; (800ce58 <tk_console_next_line+0xd4>)
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	3b22      	subs	r3, #34	; 0x22
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	4b20      	ldr	r3, [pc, #128]	; (800ce58 <tk_console_next_line+0xd4>)
 800cdd8:	801a      	strh	r2, [r3, #0]
	memset((uint8_t *)&tk_console_data[tk_console_pos], 0, CONSOLE_COLUMNS);
 800cdda:	4b1f      	ldr	r3, [pc, #124]	; (800ce58 <tk_console_next_line+0xd4>)
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	461a      	mov	r2, r3
 800cde0:	4b1e      	ldr	r3, [pc, #120]	; (800ce5c <tk_console_next_line+0xd8>)
 800cde2:	4413      	add	r3, r2
 800cde4:	2222      	movs	r2, #34	; 0x22
 800cde6:	2100      	movs	r1, #0
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 fedd 	bl	800dba8 <memset>

	__IO uint16_t *vmem_dst = (uint16_t *)(VIDEOMEM_ADDR_LAYER1 + CONSOLE_YPOS * VIDEOMEM_LINE_SIZE + CONSOLE_XPOS * VIDEOMEM_PIXEL_SIZE);
 800cdee:	4b1d      	ldr	r3, [pc, #116]	; (800ce64 <tk_console_next_line+0xe0>)
 800cdf0:	60bb      	str	r3, [r7, #8]
	__IO uint16_t *vmem_src = (uint16_t *)(VIDEOMEM_ADDR_LAYER1 + (CONSOLE_YPOS + CONSOLE_FONT->FontHeight) * VIDEOMEM_LINE_SIZE + CONSOLE_XPOS * VIDEOMEM_PIXEL_SIZE);
 800cdf2:	4b1d      	ldr	r3, [pc, #116]	; (800ce68 <tk_console_next_line+0xe4>)
 800cdf4:	785b      	ldrb	r3, [r3, #1]
 800cdf6:	f103 0296 	add.w	r2, r3, #150	; 0x96
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	011b      	lsls	r3, r3, #4
 800cdfe:	1a9b      	subs	r3, r3, r2
 800ce00:	015b      	lsls	r3, r3, #5
 800ce02:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 800ce06:	607b      	str	r3, [r7, #4]

	// todo: DMA
	memmove((uint16_t *)vmem_dst, (uint16_t *)vmem_src, (CONSOLE_LINES - 1) * CONSOLE_FONT->FontHeight * VIDEOMEM_LINE_SIZE);
 800ce08:	4b17      	ldr	r3, [pc, #92]	; (800ce68 <tk_console_next_line+0xe4>)
 800ce0a:	785b      	ldrb	r3, [r3, #1]
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	4613      	mov	r3, r2
 800ce10:	011b      	lsls	r3, r3, #4
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	025b      	lsls	r3, r3, #9
 800ce16:	461a      	mov	r2, r3
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	68b8      	ldr	r0, [r7, #8]
 800ce1c:	f000 feaa 	bl	800db74 <memmove>


	// clear last line
	tk_grs_fillrect(CONSOLE_XPOS,		// xpos
			CONSOLE_YPOS + (CONSOLE_LINES - 1) * CONSOLE_FONT->FontHeight,	// ypos
 800ce20:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <tk_console_next_line+0xe4>)
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	011b      	lsls	r3, r3, #4
	tk_grs_fillrect(CONSOLE_XPOS,		// xpos
 800ce26:	f103 0196 	add.w	r1, r3, #150	; 0x96
			CONSOLE_COLUMNS*CONSOLE_FONT->FontWidth, // width
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <tk_console_next_line+0xe4>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
	tk_grs_fillrect(CONSOLE_XPOS,		// xpos
 800ce30:	4613      	mov	r3, r2
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	4413      	add	r3, r2
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	461a      	mov	r2, r3
			CONSOLE_FONT->FontHeight, // height
 800ce3a:	4b0b      	ldr	r3, [pc, #44]	; (800ce68 <tk_console_next_line+0xe4>)
 800ce3c:	785b      	ldrb	r3, [r3, #1]
	tk_grs_fillrect(CONSOLE_XPOS,		// xpos
 800ce3e:	4618      	mov	r0, r3
 800ce40:	2300      	movs	r3, #0
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4603      	mov	r3, r0
 800ce46:	2000      	movs	r0, #0
 800ce48:	f7ff ff64 	bl	800cd14 <tk_grs_fillrect>





}
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20004a98 	.word	0x20004a98
 800ce58:	20004a94 	.word	0x20004a94
 800ce5c:	20004db4 	.word	0x20004db4
 800ce60:	20004a96 	.word	0x20004a96
 800ce64:	d0011940 	.word	0xd0011940
 800ce68:	20000030 	.word	0x20000030

0800ce6c <tk_console_append>:

void tk_console_append(char *str) {
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af02      	add	r7, sp, #8
 800ce72:	6078      	str	r0, [r7, #4]
	uint8_t ch;
	char buf[2];


	buf[1] = '\0';
 800ce74:	2300      	movs	r3, #0
 800ce76:	727b      	strb	r3, [r7, #9]


	while ((ch = *str++) != 0) {
 800ce78:	e050      	b.n	800cf1c <tk_console_append+0xb0>

		if (ch == '\n') {
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	2b0a      	cmp	r3, #10
 800ce7e:	d109      	bne.n	800ce94 <tk_console_append+0x28>
			// process previous \n request
			if (tk_console_newline == 1)
 800ce80:	4b2d      	ldr	r3, [pc, #180]	; (800cf38 <tk_console_append+0xcc>)
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d101      	bne.n	800ce8c <tk_console_append+0x20>
				tk_console_next_line();
 800ce88:	f7ff ff7c 	bl	800cd84 <tk_console_next_line>
			//
			tk_console_newline = 1;
 800ce8c:	4b2a      	ldr	r3, [pc, #168]	; (800cf38 <tk_console_append+0xcc>)
 800ce8e:	2201      	movs	r2, #1
 800ce90:	701a      	strb	r2, [r3, #0]
			continue;
 800ce92:	e043      	b.n	800cf1c <tk_console_append+0xb0>
		}

		// do not display control chars
		if (ch < ' ')
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b1f      	cmp	r3, #31
 800ce98:	d800      	bhi.n	800ce9c <tk_console_append+0x30>
			continue;
 800ce9a:	e03f      	b.n	800cf1c <tk_console_append+0xb0>

		if (tk_console_newline != 0) {
 800ce9c:	4b26      	ldr	r3, [pc, #152]	; (800cf38 <tk_console_append+0xcc>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d004      	beq.n	800ceae <tk_console_append+0x42>
			tk_console_newline = 0;
 800cea4:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <tk_console_append+0xcc>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	701a      	strb	r2, [r3, #0]
			tk_console_next_line();
 800ceaa:	f7ff ff6b 	bl	800cd84 <tk_console_next_line>
		};

		uint16_t xpos = tk_console_actual_column * CONSOLE_FONT->FontWidth + CONSOLE_XPOS;
 800ceae:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <tk_console_append+0xd0>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	4b22      	ldr	r3, [pc, #136]	; (800cf40 <tk_console_append+0xd4>)
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	fb12 f303 	smulbb	r3, r2, r3
 800cebc:	81bb      	strh	r3, [r7, #12]
		uint16_t ypos = tk_console_actual_line * CONSOLE_FONT->FontHeight + CONSOLE_YPOS;
 800cebe:	4b1f      	ldr	r3, [pc, #124]	; (800cf3c <tk_console_append+0xd0>)
 800cec0:	785b      	ldrb	r3, [r3, #1]
 800cec2:	b29a      	uxth	r2, r3
 800cec4:	4b1f      	ldr	r3, [pc, #124]	; (800cf44 <tk_console_append+0xd8>)
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	fb12 f303 	smulbb	r3, r2, r3
 800cecc:	b29b      	uxth	r3, r3
 800cece:	3396      	adds	r3, #150	; 0x96
 800ced0:	817b      	strh	r3, [r7, #10]
		buf[0] = ch;
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	723b      	strb	r3, [r7, #8]
		tk_drawchars(xpos, ypos, CONSOLE_FONT, 0xFFFF, 0x0000, (char *)&buf);
 800ced6:	89b8      	ldrh	r0, [r7, #12]
 800ced8:	8979      	ldrh	r1, [r7, #10]
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	9301      	str	r3, [sp, #4]
 800cee0:	2300      	movs	r3, #0
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cee8:	4a14      	ldr	r2, [pc, #80]	; (800cf3c <tk_console_append+0xd0>)
 800ceea:	f7ff fe8f 	bl	800cc0c <tk_drawchars>

		tk_console_data[tk_console_pos++] = ch;
 800ceee:	4b16      	ldr	r3, [pc, #88]	; (800cf48 <tk_console_append+0xdc>)
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	1c5a      	adds	r2, r3, #1
 800cef4:	b291      	uxth	r1, r2
 800cef6:	4a14      	ldr	r2, [pc, #80]	; (800cf48 <tk_console_append+0xdc>)
 800cef8:	8011      	strh	r1, [r2, #0]
 800cefa:	4619      	mov	r1, r3
 800cefc:	4a13      	ldr	r2, [pc, #76]	; (800cf4c <tk_console_append+0xe0>)
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	5453      	strb	r3, [r2, r1]
		tk_console_actual_column++;
 800cf02:	4b0f      	ldr	r3, [pc, #60]	; (800cf40 <tk_console_append+0xd4>)
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	4b0d      	ldr	r3, [pc, #52]	; (800cf40 <tk_console_append+0xd4>)
 800cf0c:	801a      	strh	r2, [r3, #0]

		if (tk_console_actual_column >= CONSOLE_COLUMNS - 1)
 800cf0e:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <tk_console_append+0xd4>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b20      	cmp	r3, #32
 800cf14:	d902      	bls.n	800cf1c <tk_console_append+0xb0>
			tk_console_newline = 2;
 800cf16:	4b08      	ldr	r3, [pc, #32]	; (800cf38 <tk_console_append+0xcc>)
 800cf18:	2202      	movs	r2, #2
 800cf1a:	701a      	strb	r2, [r3, #0]
	while ((ch = *str++) != 0) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	1c5a      	adds	r2, r3, #1
 800cf20:	607a      	str	r2, [r7, #4]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	73fb      	strb	r3, [r7, #15]
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1a6      	bne.n	800ce7a <tk_console_append+0xe>

	};



}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20004a9a 	.word	0x20004a9a
 800cf3c:	20000030 	.word	0x20000030
 800cf40:	20004a98 	.word	0x20004a98
 800cf44:	20004a96 	.word	0x20004a96
 800cf48:	20004a94 	.word	0x20004a94
 800cf4c:	20004db4 	.word	0x20004db4

0800cf50 <tk_grs_clear>:



void tk_grs_clear() {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af02      	add	r7, sp, #8
	/* no DMA2D version */
	//for (uint32_t x = 0; x < 240*320; x++)
	//	*(__IO uint16_t*) (VIDEOMEM_ADDR_LAYER1 + x*2) = 0x0;

	/* DMA2D version */
	tk_grs_fillrect(0, 0, VIDEODISP_WIDTH, VIDEODISP_HEIGHT, 0);
 800cf56:	2300      	movs	r3, #0
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800cf5e:	22f0      	movs	r2, #240	; 0xf0
 800cf60:	2100      	movs	r1, #0
 800cf62:	2000      	movs	r0, #0
 800cf64:	f7ff fed6 	bl	800cd14 <tk_grs_fillrect>
}
 800cf68:	bf00      	nop
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <tk_grs_testscreen>:

void tk_grs_testscreen() {
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0

	  /* RGB */
	  for (uint32_t y = 0; y < 150; y++) {
 800cf74:	2300      	movs	r3, #0
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	e027      	b.n	800cfca <tk_grs_testscreen+0x5c>

		  uint16_t col = 0b1111100000000000;
 800cf7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800cf7e:	817b      	strh	r3, [r7, #10]
		  if (y > 50)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b32      	cmp	r3, #50	; 0x32
 800cf84:	d902      	bls.n	800cf8c <tk_grs_testscreen+0x1e>
			  col = 0b0000011111100000;
 800cf86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800cf8a:	817b      	strh	r3, [r7, #10]
		  if (y > 100)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b64      	cmp	r3, #100	; 0x64
 800cf90:	d901      	bls.n	800cf96 <tk_grs_testscreen+0x28>
			  col = 0b0000000000011111;
 800cf92:	231f      	movs	r3, #31
 800cf94:	817b      	strh	r3, [r7, #10]

		  for (uint32_t x = 0; x < 240; x++) {
 800cf96:	2300      	movs	r3, #0
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	e010      	b.n	800cfbe <tk_grs_testscreen+0x50>
			  *(__IO uint16_t*) (VIDEOMEM_ADDR_LAYER1 + 2*(y*240+x)) = col;
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	011b      	lsls	r3, r3, #4
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	011b      	lsls	r3, r3, #4
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f103 43d0 	add.w	r3, r3, #1744830464	; 0x68000000
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	897b      	ldrh	r3, [r7, #10]
 800cfb6:	8013      	strh	r3, [r2, #0]
		  for (uint32_t x = 0; x < 240; x++) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	607b      	str	r3, [r7, #4]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2bef      	cmp	r3, #239	; 0xef
 800cfc2:	d9eb      	bls.n	800cf9c <tk_grs_testscreen+0x2e>
	  for (uint32_t y = 0; y < 150; y++) {
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b95      	cmp	r3, #149	; 0x95
 800cfce:	d9d4      	bls.n	800cf7a <tk_grs_testscreen+0xc>
		  }
	  }
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <tk_printf>:

void tk_printf(char *fmt, ...) {
 800cfde:	b40f      	push	{r0, r1, r2, r3}
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b092      	sub	sp, #72	; 0x48
 800cfe4:	af00      	add	r7, sp, #0
	char buf[64];

	buf[sizeof(buf) - 1] = '\0';
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	va_list ap;
	va_start(ap, fmt);
 800cfec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cff0:	607b      	str	r3, [r7, #4]
	vsnprintf(buf, sizeof(buf) - 1, fmt, ap);
 800cff2:	f107 0008 	add.w	r0, r7, #8
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cffa:	213f      	movs	r1, #63	; 0x3f
 800cffc:	f000 ff2c 	bl	800de58 <vsniprintf>
	tk_console_append((char *)&buf);
 800d000:	f107 0308 	add.w	r3, r7, #8
 800d004:	4618      	mov	r0, r3
 800d006:	f7ff ff31 	bl	800ce6c <tk_console_append>
	va_end(ap);

}
 800d00a:	bf00      	nop
 800d00c:	3748      	adds	r7, #72	; 0x48
 800d00e:	46bd      	mov	sp, r7
 800d010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d014:	b004      	add	sp, #16
 800d016:	4770      	bx	lr

0800d018 <TK_ILI9341_Cmd>:
#define	TK_ILI9341_D3(c, d1, d2, d3)			tmp[0] = d1; tmp[1] = d2; tmp[2] = d3; TK_ILI9341_Cmd(c, (uint8_t *)&tmp, 3);
#define	TK_ILI9341_D4(c, d1, d2, d3, d4) 		tmp[0] = d1; tmp[1] = d2; tmp[2] = d3; tmp[3] = d4; TK_ILI9341_Cmd(c, (uint8_t *)&tmp, 4);
#define	TK_ILI9341_D5(c, d1, d2, d3, d4, d5)	tmp[0] = d1; tmp[1] = d2; tmp[2] = d3; tmp[3] = d4; tmp[4] = d5; TK_ILI9341_Cmd(c, (uint8_t *)&tmp, 5);


uint8_t TK_ILI9341_Cmd(uint8_t cmd, uint8_t *data, int dlen) {
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	4603      	mov	r3, r0
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	73fb      	strb	r3, [r7, #15]

	ILI9341_WRX_RESET;
 800d026:	2200      	movs	r2, #0
 800d028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d02c:	4826      	ldr	r0, [pc, #152]	; (800d0c8 <TK_ILI9341_Cmd+0xb0>)
 800d02e:	f7f5 f975 	bl	800231c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800d032:	2200      	movs	r2, #0
 800d034:	2104      	movs	r1, #4
 800d036:	4825      	ldr	r0, [pc, #148]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d038:	f7f5 f970 	bl	800231c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ILI9341_HSPI, &cmd, 1, 1000) != HAL_OK) {
 800d03c:	f107 010f 	add.w	r1, r7, #15
 800d040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d044:	2201      	movs	r2, #1
 800d046:	4822      	ldr	r0, [pc, #136]	; (800d0d0 <TK_ILI9341_Cmd+0xb8>)
 800d048:	f7f8 fb53 	bl	80056f2 <HAL_SPI_Transmit>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d006      	beq.n	800d060 <TK_ILI9341_Cmd+0x48>
		ILI9341_CS_SET;
 800d052:	2201      	movs	r2, #1
 800d054:	2104      	movs	r1, #4
 800d056:	481d      	ldr	r0, [pc, #116]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d058:	f7f5 f960 	bl	800231c <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e02f      	b.n	800d0c0 <TK_ILI9341_Cmd+0xa8>
	};
	ILI9341_CS_SET;
 800d060:	2201      	movs	r2, #1
 800d062:	2104      	movs	r1, #4
 800d064:	4819      	ldr	r0, [pc, #100]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d066:	f7f5 f959 	bl	800231c <HAL_GPIO_WritePin>


	// there are no data to send?
	if ((dlen == 0) || (data == NULL))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <TK_ILI9341_Cmd+0x5e>
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <TK_ILI9341_Cmd+0x62>
		return HAL_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	e022      	b.n	800d0c0 <TK_ILI9341_Cmd+0xa8>

	ILI9341_WRX_SET;
 800d07a:	2201      	movs	r2, #1
 800d07c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d080:	4811      	ldr	r0, [pc, #68]	; (800d0c8 <TK_ILI9341_Cmd+0xb0>)
 800d082:	f7f5 f94b 	bl	800231c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800d086:	2200      	movs	r2, #0
 800d088:	2104      	movs	r1, #4
 800d08a:	4810      	ldr	r0, [pc, #64]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d08c:	f7f5 f946 	bl	800231c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ILI9341_HSPI, data, dlen, 1000) != HAL_OK) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	b29a      	uxth	r2, r3
 800d094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d098:	68b9      	ldr	r1, [r7, #8]
 800d09a:	480d      	ldr	r0, [pc, #52]	; (800d0d0 <TK_ILI9341_Cmd+0xb8>)
 800d09c:	f7f8 fb29 	bl	80056f2 <HAL_SPI_Transmit>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d006      	beq.n	800d0b4 <TK_ILI9341_Cmd+0x9c>
		ILI9341_CS_SET;
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	2104      	movs	r1, #4
 800d0aa:	4808      	ldr	r0, [pc, #32]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d0ac:	f7f5 f936 	bl	800231c <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e005      	b.n	800d0c0 <TK_ILI9341_Cmd+0xa8>
	};
	ILI9341_CS_SET;
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	2104      	movs	r1, #4
 800d0b8:	4804      	ldr	r0, [pc, #16]	; (800d0cc <TK_ILI9341_Cmd+0xb4>)
 800d0ba:	f7f5 f92f 	bl	800231c <HAL_GPIO_WritePin>
	return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	40020c00 	.word	0x40020c00
 800d0cc:	40020800 	.word	0x40020800
 800d0d0:	20004afc 	.word	0x20004afc

0800d0d4 <TK_ILI9341_Init>:
/*
 *
 * Place TK_ILI9341_Init function after MX_SPI5_Init_function.
 *
 */
void TK_ILI9341_Init() {
 800d0d4:	b590      	push	{r4, r7, lr}
 800d0d6:	b097      	sub	sp, #92	; 0x5c
 800d0d8:	af00      	add	r7, sp, #0
	uint8_t tmp[32];

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]
 800d0e2:	605a      	str	r2, [r3, #4]
 800d0e4:	609a      	str	r2, [r3, #8]
 800d0e6:	60da      	str	r2, [r3, #12]
 800d0e8:	611a      	str	r2, [r3, #16]


	/* Init WRX pin */
    GPIO_InitStruct.Pin = ILI9341_WRX_PIN;
 800d0ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ILI9341_WRX_PORT, &GPIO_InitStruct);
 800d0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d100:	4619      	mov	r1, r3
 800d102:	48c1      	ldr	r0, [pc, #772]	; (800d408 <TK_ILI9341_Init+0x334>)
 800d104:	f7f4 ff5e 	bl	8001fc4 <HAL_GPIO_Init>

	/* Init CS pin */
    GPIO_InitStruct.Pin = ILI9341_CS_PIN;
 800d108:	2304      	movs	r3, #4
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d10c:	2301      	movs	r3, #1
 800d10e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d110:	2300      	movs	r3, #0
 800d112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d114:	2301      	movs	r3, #1
 800d116:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ILI9341_CS_PORT, &GPIO_InitStruct);
 800d118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d11c:	4619      	mov	r1, r3
 800d11e:	48bb      	ldr	r0, [pc, #748]	; (800d40c <TK_ILI9341_Init+0x338>)
 800d120:	f7f4 ff50 	bl	8001fc4 <HAL_GPIO_Init>


    ILI9341_CS_SET;
 800d124:	2201      	movs	r2, #1
 800d126:	2104      	movs	r1, #4
 800d128:	48b8      	ldr	r0, [pc, #736]	; (800d40c <TK_ILI9341_Init+0x338>)
 800d12a:	f7f5 f8f7 	bl	800231c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800d12e:	200a      	movs	r0, #10
 800d130:	f7f4 fb14 	bl	800175c <HAL_Delay>

	/* software reset */
	TK_ILI9341_D0(ILI9341_RESET);
 800d134:	2200      	movs	r2, #0
 800d136:	2100      	movs	r1, #0
 800d138:	2001      	movs	r0, #1
 800d13a:	f7ff ff6d 	bl	800d018 <TK_ILI9341_Cmd>
	HAL_Delay(10);
 800d13e:	200a      	movs	r0, #10
 800d140:	f7f4 fb0c 	bl	800175c <HAL_Delay>


	TK_ILI9341_D3(0xCA, 0xC3, 0x08, 0x50);
 800d144:	23c3      	movs	r3, #195	; 0xc3
 800d146:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d14a:	2308      	movs	r3, #8
 800d14c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d150:	2350      	movs	r3, #80	; 0x50
 800d152:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d15a:	2203      	movs	r2, #3
 800d15c:	4619      	mov	r1, r3
 800d15e:	20ca      	movs	r0, #202	; 0xca
 800d160:	f7ff ff5a 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D3(ILI9341_POWERB, 0x00, 0xC1, 0x30);
 800d164:	2300      	movs	r3, #0
 800d166:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d16a:	23c1      	movs	r3, #193	; 0xc1
 800d16c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d170:	2330      	movs	r3, #48	; 0x30
 800d172:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d17a:	2203      	movs	r2, #3
 800d17c:	4619      	mov	r1, r3
 800d17e:	20cf      	movs	r0, #207	; 0xcf
 800d180:	f7ff ff4a 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D4(ILI9341_POWER_SEQ, 0x64, 0x03, 0x12, 0x81);
 800d184:	2364      	movs	r3, #100	; 0x64
 800d186:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d18a:	2303      	movs	r3, #3
 800d18c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d190:	2312      	movs	r3, #18
 800d192:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d196:	2381      	movs	r3, #129	; 0x81
 800d198:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d19c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	20ed      	movs	r0, #237	; 0xed
 800d1a6:	f7ff ff37 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D3(ILI9341_DTCA,0x85,0x00,0x78);
 800d1aa:	2385      	movs	r3, #133	; 0x85
 800d1ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d1b6:	2378      	movs	r3, #120	; 0x78
 800d1b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d1bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	20e8      	movs	r0, #232	; 0xe8
 800d1c6:	f7ff ff27 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D5(ILI9341_POWERA,0x39,0x2C,0x00,0x34,0x02);
 800d1ca:	2339      	movs	r3, #57	; 0x39
 800d1cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d1d0:	232c      	movs	r3, #44	; 0x2c
 800d1d2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d1dc:	2334      	movs	r3, #52	; 0x34
 800d1de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800d1e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d1ec:	2205      	movs	r2, #5
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	20cb      	movs	r0, #203	; 0xcb
 800d1f2:	f7ff ff11 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_PRC,0x20);
 800d1f6:	2320      	movs	r3, #32
 800d1f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d1fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d200:	2201      	movs	r2, #1
 800d202:	4619      	mov	r1, r3
 800d204:	20f7      	movs	r0, #247	; 0xf7
 800d206:	f7ff ff07 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D2(ILI9341_DTCB,0x00,0x00);
 800d20a:	2300      	movs	r3, #0
 800d20c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d210:	2300      	movs	r3, #0
 800d212:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d216:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d21a:	2202      	movs	r2, #2
 800d21c:	4619      	mov	r1, r3
 800d21e:	20ea      	movs	r0, #234	; 0xea
 800d220:	f7ff fefa 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D2(ILI9341_FRC,0x00,0x1B);
 800d224:	2300      	movs	r3, #0
 800d226:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d22a:	231b      	movs	r3, #27
 800d22c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d234:	2202      	movs	r2, #2
 800d236:	4619      	mov	r1, r3
 800d238:	20b1      	movs	r0, #177	; 0xb1
 800d23a:	f7ff feed 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D2(ILI9341_DFC,0x0A,0xA2);
 800d23e:	230a      	movs	r3, #10
 800d240:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d244:	23a2      	movs	r3, #162	; 0xa2
 800d246:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d24a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d24e:	2202      	movs	r2, #2
 800d250:	4619      	mov	r1, r3
 800d252:	20b6      	movs	r0, #182	; 0xb6
 800d254:	f7ff fee0 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_POWER1,0x10);
 800d258:	2310      	movs	r3, #16
 800d25a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d25e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d262:	2201      	movs	r2, #1
 800d264:	4619      	mov	r1, r3
 800d266:	20c0      	movs	r0, #192	; 0xc0
 800d268:	f7ff fed6 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_POWER2,0x10);
 800d26c:	2310      	movs	r3, #16
 800d26e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d276:	2201      	movs	r2, #1
 800d278:	4619      	mov	r1, r3
 800d27a:	20c1      	movs	r0, #193	; 0xc1
 800d27c:	f7ff fecc 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D2(ILI9341_VCOM1,0x45,0x15);
 800d280:	2345      	movs	r3, #69	; 0x45
 800d282:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d286:	2315      	movs	r3, #21
 800d288:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d28c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d290:	2202      	movs	r2, #2
 800d292:	4619      	mov	r1, r3
 800d294:	20c5      	movs	r0, #197	; 0xc5
 800d296:	f7ff febf 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_VCOM2,0x90);
 800d29a:	2390      	movs	r3, #144	; 0x90
 800d29c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d2a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	20c7      	movs	r0, #199	; 0xc7
 800d2aa:	f7ff feb5 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_MAC,0xC8);
 800d2ae:	23c8      	movs	r3, #200	; 0xc8
 800d2b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d2b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	2036      	movs	r0, #54	; 0x36
 800d2be:	f7ff feab 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_3GAMMA_EN,0x00);
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d2c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	20f2      	movs	r0, #242	; 0xf2
 800d2d2:	f7ff fea1 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D1(ILI9341_RGB_INTERFACE,0xC2);
 800d2d6:	23c2      	movs	r3, #194	; 0xc2
 800d2d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d2dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	20b0      	movs	r0, #176	; 0xb0
 800d2e6:	f7ff fe97 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D4(ILI9341_DFC,0x0A,0xA7,0x27,0x04);
 800d2ea:	230a      	movs	r3, #10
 800d2ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d2f0:	23a7      	movs	r3, #167	; 0xa7
 800d2f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d2f6:	2327      	movs	r3, #39	; 0x27
 800d2f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d2fc:	2304      	movs	r3, #4
 800d2fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d306:	2204      	movs	r2, #4
 800d308:	4619      	mov	r1, r3
 800d30a:	20b6      	movs	r0, #182	; 0xb6
 800d30c:	f7ff fe84 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D4(ILI9341_COLUMN_ADDR,0x00,0x00,0x00,0xEF);
 800d310:	2300      	movs	r3, #0
 800d312:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d316:	2300      	movs	r3, #0
 800d318:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d322:	23ef      	movs	r3, #239	; 0xef
 800d324:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d32c:	2204      	movs	r2, #4
 800d32e:	4619      	mov	r1, r3
 800d330:	202a      	movs	r0, #42	; 0x2a
 800d332:	f7ff fe71 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D4(ILI9341_PAGE_ADDR,0x00,0x00,0x01,0x3F);
 800d336:	2300      	movs	r3, #0
 800d338:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d33c:	2300      	movs	r3, #0
 800d33e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d342:	2301      	movs	r3, #1
 800d344:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d348:	233f      	movs	r3, #63	; 0x3f
 800d34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800d34e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d352:	2204      	movs	r2, #4
 800d354:	4619      	mov	r1, r3
 800d356:	202b      	movs	r0, #43	; 0x2b
 800d358:	f7ff fe5e 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D3(ILI9341_INTERFACE,0x01,0x00,0x06);
 800d35c:	2301      	movs	r3, #1
 800d35e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d362:	2300      	movs	r3, #0
 800d364:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d368:	2306      	movs	r3, #6
 800d36a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800d36e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d372:	2203      	movs	r2, #3
 800d374:	4619      	mov	r1, r3
 800d376:	20f6      	movs	r0, #246	; 0xf6
 800d378:	f7ff fe4e 	bl	800d018 <TK_ILI9341_Cmd>
    TK_ILI9341_D0(ILI9341_GRAM);
 800d37c:	2200      	movs	r2, #0
 800d37e:	2100      	movs	r1, #0
 800d380:	202c      	movs	r0, #44	; 0x2c
 800d382:	f7ff fe49 	bl	800d018 <TK_ILI9341_Cmd>
    HAL_Delay(200);
 800d386:	20c8      	movs	r0, #200	; 0xc8
 800d388:	f7f4 f9e8 	bl	800175c <HAL_Delay>

    TK_ILI9341_D1(ILI9341_GAMMA,0x01);
 800d38c:	2301      	movs	r3, #1
 800d38e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d396:	2201      	movs	r2, #1
 800d398:	4619      	mov	r1, r3
 800d39a:	2026      	movs	r0, #38	; 0x26
 800d39c:	f7ff fe3c 	bl	800d018 <TK_ILI9341_Cmd>

    /* pgamma */
    uint8_t buf1[15] = { 0x0F,0x29,0x24,0x0C,0x0E,0x09,0x4E,0x78,0x3C,0x09,0x13,0x05,0x17,0x11,0x00 };
 800d3a0:	4b1b      	ldr	r3, [pc, #108]	; (800d410 <TK_ILI9341_Init+0x33c>)
 800d3a2:	f107 0414 	add.w	r4, r7, #20
 800d3a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3a8:	c407      	stmia	r4!, {r0, r1, r2}
 800d3aa:	8023      	strh	r3, [r4, #0]
 800d3ac:	3402      	adds	r4, #2
 800d3ae:	0c1b      	lsrs	r3, r3, #16
 800d3b0:	7023      	strb	r3, [r4, #0]
    TK_ILI9341_Cmd(ILI9341_PGAMMA, (uint8_t *)&buf1, 15);
 800d3b2:	f107 0314 	add.w	r3, r7, #20
 800d3b6:	220f      	movs	r2, #15
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	20e0      	movs	r0, #224	; 0xe0
 800d3bc:	f7ff fe2c 	bl	800d018 <TK_ILI9341_Cmd>

    /* ngamma */
    uint8_t buf2[15] = { 0x00,0x16,0x1B,0x04,0x11,0x07,0x31,0x33,0x42,0x05,0x0C,0x0A,0x28,0x2F,0x0F };
 800d3c0:	4b14      	ldr	r3, [pc, #80]	; (800d414 <TK_ILI9341_Init+0x340>)
 800d3c2:	1d3c      	adds	r4, r7, #4
 800d3c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3c6:	c407      	stmia	r4!, {r0, r1, r2}
 800d3c8:	8023      	strh	r3, [r4, #0]
 800d3ca:	3402      	adds	r4, #2
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	7023      	strb	r3, [r4, #0]
    TK_ILI9341_Cmd(ILI9341_NGAMMA, (uint8_t *)&buf2, 15);
 800d3d0:	1d3b      	adds	r3, r7, #4
 800d3d2:	220f      	movs	r2, #15
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	20e1      	movs	r0, #225	; 0xe1
 800d3d8:	f7ff fe1e 	bl	800d018 <TK_ILI9341_Cmd>


    TK_ILI9341_D0(ILI9341_SLEEP_OUT);
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2100      	movs	r1, #0
 800d3e0:	2011      	movs	r0, #17
 800d3e2:	f7ff fe19 	bl	800d018 <TK_ILI9341_Cmd>
    HAL_Delay(200);
 800d3e6:	20c8      	movs	r0, #200	; 0xc8
 800d3e8:	f7f4 f9b8 	bl	800175c <HAL_Delay>

    TK_ILI9341_D0(ILI9341_DISPLAY_ON);
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	2029      	movs	r0, #41	; 0x29
 800d3f2:	f7ff fe11 	bl	800d018 <TK_ILI9341_Cmd>


    /* GRAM start writing */
    TK_ILI9341_D0(ILI9341_GRAM);
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	202c      	movs	r0, #44	; 0x2c
 800d3fc:	f7ff fe0c 	bl	800d018 <TK_ILI9341_Cmd>
}
 800d400:	bf00      	nop
 800d402:	375c      	adds	r7, #92	; 0x5c
 800d404:	46bd      	mov	sp, r7
 800d406:	bd90      	pop	{r4, r7, pc}
 800d408:	40020c00 	.word	0x40020c00
 800d40c:	40020800 	.word	0x40020800
 800d410:	0800e558 	.word	0x0800e558
 800d414:	0800e568 	.word	0x0800e568

0800d418 <TK_DIMM_InitSequence>:
 *
 * Place TK_DIMM_InitSequence function at the bottom of MX_FMC_Init function.
 * It is must be called before MX_LTDC_Init function.
 *
 */
void TK_DIMM_InitSequence() {
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
	FMC_SDRAM_CommandTypeDef fmc_cmd;

    while(HAL_IS_BIT_SET(FMC_SDRAM_DEVICE->SDSR, FMC_SDSR_BUSY)) {};
 800d41e:	bf00      	nop
 800d420:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	f003 0320 	and.w	r3, r3, #32
 800d428:	2b20      	cmp	r3, #32
 800d42a:	d0f9      	beq.n	800d420 <TK_DIMM_InitSequence+0x8>


	/* Configure a clock configuration enable command */
	fmc_cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800d42c:	2301      	movs	r3, #1
 800d42e:	603b      	str	r3, [r7, #0]
	fmc_cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800d430:	2308      	movs	r3, #8
 800d432:	607b      	str	r3, [r7, #4]
	fmc_cmd.AutoRefreshNumber = 1;
 800d434:	2301      	movs	r3, #1
 800d436:	60bb      	str	r3, [r7, #8]
	fmc_cmd.ModeRegisterDefinition = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	60fb      	str	r3, [r7, #12]
	FMC_SDRAM_SendCommand(FMC_SDRAM_DEVICE, &fmc_cmd, HAL_MAX_DELAY);
 800d43c:	463b      	mov	r3, r7
 800d43e:	f04f 32ff 	mov.w	r2, #4294967295
 800d442:	4619      	mov	r1, r3
 800d444:	4821      	ldr	r0, [pc, #132]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d446:	f7f9 fae5 	bl	8006a14 <FMC_SDRAM_SendCommand>

	HAL_Delay(100);
 800d44a:	2064      	movs	r0, #100	; 0x64
 800d44c:	f7f4 f986 	bl	800175c <HAL_Delay>

	/* Configure a PALL (precharge all) command */
	fmc_cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 800d450:	2302      	movs	r3, #2
 800d452:	603b      	str	r3, [r7, #0]
	fmc_cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800d454:	2308      	movs	r3, #8
 800d456:	607b      	str	r3, [r7, #4]
	fmc_cmd.AutoRefreshNumber = 1;
 800d458:	2301      	movs	r3, #1
 800d45a:	60bb      	str	r3, [r7, #8]
	fmc_cmd.ModeRegisterDefinition = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]
	FMC_SDRAM_SendCommand(FMC_SDRAM_DEVICE, &fmc_cmd, HAL_MAX_DELAY);
 800d460:	463b      	mov	r3, r7
 800d462:	f04f 32ff 	mov.w	r2, #4294967295
 800d466:	4619      	mov	r1, r3
 800d468:	4818      	ldr	r0, [pc, #96]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d46a:	f7f9 fad3 	bl	8006a14 <FMC_SDRAM_SendCommand>

	/* Configure a Auto-Refresh command */
	fmc_cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800d46e:	2303      	movs	r3, #3
 800d470:	603b      	str	r3, [r7, #0]
	fmc_cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800d472:	2308      	movs	r3, #8
 800d474:	607b      	str	r3, [r7, #4]
	fmc_cmd.AutoRefreshNumber = 4;
 800d476:	2304      	movs	r3, #4
 800d478:	60bb      	str	r3, [r7, #8]
	fmc_cmd.ModeRegisterDefinition = 0;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60fb      	str	r3, [r7, #12]
	FMC_SDRAM_SendCommand(FMC_SDRAM_DEVICE, &fmc_cmd, HAL_MAX_DELAY);
 800d47e:	463b      	mov	r3, r7
 800d480:	f04f 32ff 	mov.w	r2, #4294967295
 800d484:	4619      	mov	r1, r3
 800d486:	4811      	ldr	r0, [pc, #68]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d488:	f7f9 fac4 	bl	8006a14 <FMC_SDRAM_SendCommand>
	/* Send the second command */
	FMC_SDRAM_SendCommand(FMC_SDRAM_DEVICE, &fmc_cmd, HAL_MAX_DELAY);
 800d48c:	463b      	mov	r3, r7
 800d48e:	f04f 32ff 	mov.w	r2, #4294967295
 800d492:	4619      	mov	r1, r3
 800d494:	480d      	ldr	r0, [pc, #52]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d496:	f7f9 fabd 	bl	8006a14 <FMC_SDRAM_SendCommand>


	/* Configure a load Mode register command*/
	fmc_cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800d49a:	2304      	movs	r3, #4
 800d49c:	603b      	str	r3, [r7, #0]
	fmc_cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800d49e:	2308      	movs	r3, #8
 800d4a0:	607b      	str	r3, [r7, #4]
	fmc_cmd.AutoRefreshNumber = 1;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	60bb      	str	r3, [r7, #8]
	/* SDRAM_MODEREG_BURST_LENGTH_2 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_3 */
	/* SDRAM_MODEREG_OPERATING_MODE_STANDARD | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE */
	fmc_cmd.ModeRegisterDefinition = 0x0231;
 800d4a6:	f240 2331 	movw	r3, #561	; 0x231
 800d4aa:	60fb      	str	r3, [r7, #12]
	FMC_SDRAM_SendCommand(FMC_SDRAM_DEVICE, &fmc_cmd, HAL_MAX_DELAY);
 800d4ac:	463b      	mov	r3, r7
 800d4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4805      	ldr	r0, [pc, #20]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d4b6:	f7f9 faad 	bl	8006a14 <FMC_SDRAM_SendCommand>
	/* Set the refresh rate counter */
	/* 15.52us * 90Mhz(HCLK) - 20 = 1385,8 */
	//FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_DEVICE, 1386);

	/* 15.52us * 84Mhz(HCLK) - 20 = 1292,08 */
	FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_DEVICE, 1292);
 800d4ba:	f240 510c 	movw	r1, #1292	; 0x50c
 800d4be:	4803      	ldr	r0, [pc, #12]	; (800d4cc <TK_DIMM_InitSequence+0xb4>)
 800d4c0:	f7f9 fae4 	bl	8006a8c <FMC_SDRAM_ProgramRefreshRate>
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	a0000140 	.word	0xa0000140

0800d4d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	490e      	ldr	r1, [pc, #56]	; (800d510 <MX_USB_HOST_Init+0x40>)
 800d4d8:	480e      	ldr	r0, [pc, #56]	; (800d514 <MX_USB_HOST_Init+0x44>)
 800d4da:	f7fa fe67 	bl	80081ac <USBH_Init>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d4e4:	f7f3 fc48 	bl	8000d78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d4e8:	490b      	ldr	r1, [pc, #44]	; (800d518 <MX_USB_HOST_Init+0x48>)
 800d4ea:	480a      	ldr	r0, [pc, #40]	; (800d514 <MX_USB_HOST_Init+0x44>)
 800d4ec:	f7fa ff0e 	bl	800830c <USBH_RegisterClass>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d4f6:	f7f3 fc3f 	bl	8000d78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d4fa:	4806      	ldr	r0, [pc, #24]	; (800d514 <MX_USB_HOST_Init+0x44>)
 800d4fc:	f7fa ff92 	bl	8008424 <USBH_Start>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d506:	f7f3 fc37 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d50a:	bf00      	nop
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	0800d51d 	.word	0x0800d51d
 800d514:	20004ff8 	.word	0x20004ff8
 800d518:	2000000c 	.word	0x2000000c

0800d51c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d528:	78fb      	ldrb	r3, [r7, #3]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d819      	bhi.n	800d564 <USBH_UserProcess+0x48>
 800d530:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <USBH_UserProcess+0x1c>)
 800d532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d536:	bf00      	nop
 800d538:	0800d565 	.word	0x0800d565
 800d53c:	0800d555 	.word	0x0800d555
 800d540:	0800d565 	.word	0x0800d565
 800d544:	0800d55d 	.word	0x0800d55d
 800d548:	0800d54d 	.word	0x0800d54d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d54c:	4b09      	ldr	r3, [pc, #36]	; (800d574 <USBH_UserProcess+0x58>)
 800d54e:	2203      	movs	r2, #3
 800d550:	701a      	strb	r2, [r3, #0]
  break;
 800d552:	e008      	b.n	800d566 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d554:	4b07      	ldr	r3, [pc, #28]	; (800d574 <USBH_UserProcess+0x58>)
 800d556:	2202      	movs	r2, #2
 800d558:	701a      	strb	r2, [r3, #0]
  break;
 800d55a:	e004      	b.n	800d566 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d55c:	4b05      	ldr	r3, [pc, #20]	; (800d574 <USBH_UserProcess+0x58>)
 800d55e:	2201      	movs	r2, #1
 800d560:	701a      	strb	r2, [r3, #0]
  break;
 800d562:	e000      	b.n	800d566 <USBH_UserProcess+0x4a>

  default:
  break;
 800d564:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	20004a9b 	.word	0x20004a9b

0800d578 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08a      	sub	sp, #40	; 0x28
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	605a      	str	r2, [r3, #4]
 800d58a:	609a      	str	r2, [r3, #8]
 800d58c:	60da      	str	r2, [r3, #12]
 800d58e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a24      	ldr	r2, [pc, #144]	; (800d628 <HAL_HCD_MspInit+0xb0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d141      	bne.n	800d61e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]
 800d59e:	4b23      	ldr	r3, [pc, #140]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a2:	4a22      	ldr	r2, [pc, #136]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d5a4:	f043 0302 	orr.w	r3, r3, #2
 800d5a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d5aa:	4b20      	ldr	r3, [pc, #128]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ae:	f003 0302 	and.w	r3, r3, #2
 800d5b2:	613b      	str	r3, [r7, #16]
 800d5b4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d5b6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d5ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5bc:	2302      	movs	r3, #2
 800d5be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d5c8:	230c      	movs	r3, #12
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4817      	ldr	r0, [pc, #92]	; (800d630 <HAL_HCD_MspInit+0xb8>)
 800d5d4:	f7f4 fcf6 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d5d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d5e6:	f107 0314 	add.w	r3, r7, #20
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4810      	ldr	r0, [pc, #64]	; (800d630 <HAL_HCD_MspInit+0xb8>)
 800d5ee:	f7f4 fce9 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5fa:	4a0c      	ldr	r2, [pc, #48]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d5fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d600:	6313      	str	r3, [r2, #48]	; 0x30
 800d602:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <HAL_HCD_MspInit+0xb4>)
 800d604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d60e:	2200      	movs	r2, #0
 800d610:	2105      	movs	r1, #5
 800d612:	204d      	movs	r0, #77	; 0x4d
 800d614:	f7f4 f97e 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d618:	204d      	movs	r0, #77	; 0x4d
 800d61a:	f7f4 f997 	bl	800194c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d61e:	bf00      	nop
 800d620:	3728      	adds	r7, #40	; 0x28
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	40040000 	.word	0x40040000
 800d62c:	40023800 	.word	0x40023800
 800d630:	40020400 	.word	0x40020400

0800d634 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d642:	4618      	mov	r0, r3
 800d644:	f7fb fb9b 	bl	8008d7e <USBH_LL_IncTimer>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fb fbdf 	bl	8008e22 <USBH_LL_Connect>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fb fbf4 	bl	8008e68 <USBH_LL_Disconnect>
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
 800d694:	4613      	mov	r3, r2
 800d696:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fb fc2b 	bl	8008efa <USBH_LL_NotifyURBChange>
#endif
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fb fb89 	bl	8008dd2 <USBH_LL_PortEnabled>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fb fb95 	bl	8008e06 <USBH_LL_PortDisabled>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d132      	bne.n	800d75c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d6f6:	4a1c      	ldr	r2, [pc, #112]	; (800d768 <USBH_LL_Init+0x84>)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a19      	ldr	r2, [pc, #100]	; (800d768 <USBH_LL_Init+0x84>)
 800d702:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d706:	4b18      	ldr	r3, [pc, #96]	; (800d768 <USBH_LL_Init+0x84>)
 800d708:	4a18      	ldr	r2, [pc, #96]	; (800d76c <USBH_LL_Init+0x88>)
 800d70a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d70c:	4b16      	ldr	r3, [pc, #88]	; (800d768 <USBH_LL_Init+0x84>)
 800d70e:	220c      	movs	r2, #12
 800d710:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d712:	4b15      	ldr	r3, [pc, #84]	; (800d768 <USBH_LL_Init+0x84>)
 800d714:	2201      	movs	r2, #1
 800d716:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d718:	4b13      	ldr	r3, [pc, #76]	; (800d768 <USBH_LL_Init+0x84>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d71e:	4b12      	ldr	r3, [pc, #72]	; (800d768 <USBH_LL_Init+0x84>)
 800d720:	2202      	movs	r2, #2
 800d722:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d724:	4b10      	ldr	r3, [pc, #64]	; (800d768 <USBH_LL_Init+0x84>)
 800d726:	2200      	movs	r2, #0
 800d728:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <USBH_LL_Init+0x84>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d730:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <USBH_LL_Init+0x84>)
 800d732:	2200      	movs	r2, #0
 800d734:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d736:	4b0c      	ldr	r3, [pc, #48]	; (800d768 <USBH_LL_Init+0x84>)
 800d738:	2200      	movs	r2, #0
 800d73a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d73c:	480a      	ldr	r0, [pc, #40]	; (800d768 <USBH_LL_Init+0x84>)
 800d73e:	f7f4 fe1f 	bl	8002380 <HAL_HCD_Init>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d748:	f7f3 fb16 	bl	8000d78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d74c:	4806      	ldr	r0, [pc, #24]	; (800d768 <USBH_LL_Init+0x84>)
 800d74e:	f7f5 fa02 	bl	8002b56 <HAL_HCD_GetCurrentFrame>
 800d752:	4603      	mov	r3, r0
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7fb fb02 	bl	8008d60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	200053dc 	.word	0x200053dc
 800d76c:	40040000 	.word	0x40040000

0800d770 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d786:	4618      	mov	r0, r3
 800d788:	f7f5 f96f 	bl	8002a6a <HAL_HCD_Start>
 800d78c:	4603      	mov	r3, r0
 800d78e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d790:	7bfb      	ldrb	r3, [r7, #15]
 800d792:	4618      	mov	r0, r3
 800d794:	f000 f95c 	bl	800da50 <USBH_Get_USB_Status>
 800d798:	4603      	mov	r3, r0
 800d79a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d79c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f5 f977 	bl	8002ab0 <HAL_HCD_Stop>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 f941 	bl	800da50 <USBH_Get_USB_Status>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7f5 f9bf 	bl	8002b72 <HAL_HCD_GetCurrentSpeed>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d00c      	beq.n	800d814 <USBH_LL_GetSpeed+0x38>
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d80d      	bhi.n	800d81a <USBH_LL_GetSpeed+0x3e>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d002      	beq.n	800d808 <USBH_LL_GetSpeed+0x2c>
 800d802:	2b01      	cmp	r3, #1
 800d804:	d003      	beq.n	800d80e <USBH_LL_GetSpeed+0x32>
 800d806:	e008      	b.n	800d81a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
    break;
 800d80c:	e008      	b.n	800d820 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d80e:	2301      	movs	r3, #1
 800d810:	73fb      	strb	r3, [r7, #15]
    break;
 800d812:	e005      	b.n	800d820 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d814:	2302      	movs	r3, #2
 800d816:	73fb      	strb	r3, [r7, #15]
    break;
 800d818:	e002      	b.n	800d820 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d81a:	2301      	movs	r3, #1
 800d81c:	73fb      	strb	r3, [r7, #15]
    break;
 800d81e:	bf00      	nop
  }
  return  speed;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d840:	4618      	mov	r0, r3
 800d842:	f7f5 f952 	bl	8002aea <HAL_HCD_ResetPort>
 800d846:	4603      	mov	r3, r0
 800d848:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d84a:	7bfb      	ldrb	r3, [r7, #15]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 f8ff 	bl	800da50 <USBH_Get_USB_Status>
 800d852:	4603      	mov	r3, r0
 800d854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d856:	7bbb      	ldrb	r3, [r7, #14]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d872:	78fa      	ldrb	r2, [r7, #3]
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f7f5 f959 	bl	8002b2e <HAL_HCD_HC_GetXferCount>
 800d87c:	4603      	mov	r3, r0
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d886:	b590      	push	{r4, r7, lr}
 800d888:	b089      	sub	sp, #36	; 0x24
 800d88a:	af04      	add	r7, sp, #16
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	4608      	mov	r0, r1
 800d890:	4611      	mov	r1, r2
 800d892:	461a      	mov	r2, r3
 800d894:	4603      	mov	r3, r0
 800d896:	70fb      	strb	r3, [r7, #3]
 800d898:	460b      	mov	r3, r1
 800d89a:	70bb      	strb	r3, [r7, #2]
 800d89c:	4613      	mov	r3, r2
 800d89e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d8ae:	787c      	ldrb	r4, [r7, #1]
 800d8b0:	78ba      	ldrb	r2, [r7, #2]
 800d8b2:	78f9      	ldrb	r1, [r7, #3]
 800d8b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8b6:	9302      	str	r3, [sp, #8]
 800d8b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	f7f4 fdbd 	bl	8002444 <HAL_HCD_HC_Init>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 f8bd 	bl	800da50 <USBH_Get_USB_Status>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3714      	adds	r7, #20
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}

0800d8e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8fe:	78fa      	ldrb	r2, [r7, #3]
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f7f4 fe2d 	bl	8002562 <HAL_HCD_HC_Halt>
 800d908:	4603      	mov	r3, r0
 800d90a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 f89e 	bl	800da50 <USBH_Get_USB_Status>
 800d914:	4603      	mov	r3, r0
 800d916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d918:	7bbb      	ldrb	r3, [r7, #14]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d922:	b590      	push	{r4, r7, lr}
 800d924:	b089      	sub	sp, #36	; 0x24
 800d926:	af04      	add	r7, sp, #16
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	4608      	mov	r0, r1
 800d92c:	4611      	mov	r1, r2
 800d92e:	461a      	mov	r2, r3
 800d930:	4603      	mov	r3, r0
 800d932:	70fb      	strb	r3, [r7, #3]
 800d934:	460b      	mov	r3, r1
 800d936:	70bb      	strb	r3, [r7, #2]
 800d938:	4613      	mov	r3, r2
 800d93a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d940:	2300      	movs	r3, #0
 800d942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d94a:	787c      	ldrb	r4, [r7, #1]
 800d94c:	78ba      	ldrb	r2, [r7, #2]
 800d94e:	78f9      	ldrb	r1, [r7, #3]
 800d950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d954:	9303      	str	r3, [sp, #12]
 800d956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d958:	9302      	str	r3, [sp, #8]
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	9301      	str	r3, [sp, #4]
 800d95e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	4623      	mov	r3, r4
 800d966:	f7f4 fe1f 	bl	80025a8 <HAL_HCD_HC_SubmitRequest>
 800d96a:	4603      	mov	r3, r0
 800d96c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f86d 	bl	800da50 <USBH_Get_USB_Status>
 800d976:	4603      	mov	r3, r0
 800d978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	bd90      	pop	{r4, r7, pc}

0800d984 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d996:	78fa      	ldrb	r2, [r7, #3]
 800d998:	4611      	mov	r1, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7f5 f8b3 	bl	8002b06 <HAL_HCD_HC_GetURBState>
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b082      	sub	sp, #8
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d103      	bne.n	800d9c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f870 	bl	800daa8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d9c8:	20c8      	movs	r0, #200	; 0xc8
 800d9ca:	f7f3 fec7 	bl	800175c <HAL_Delay>
  return USBH_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	70fb      	strb	r3, [r7, #3]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d9f0:	78fb      	ldrb	r3, [r7, #3]
 800d9f2:	68fa      	ldr	r2, [r7, #12]
 800d9f4:	212c      	movs	r1, #44	; 0x2c
 800d9f6:	fb01 f303 	mul.w	r3, r1, r3
 800d9fa:	4413      	add	r3, r2
 800d9fc:	333b      	adds	r3, #59	; 0x3b
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d009      	beq.n	800da18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	212c      	movs	r1, #44	; 0x2c
 800da0a:	fb01 f303 	mul.w	r3, r1, r3
 800da0e:	4413      	add	r3, r2
 800da10:	3354      	adds	r3, #84	; 0x54
 800da12:	78ba      	ldrb	r2, [r7, #2]
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	e008      	b.n	800da2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	212c      	movs	r1, #44	; 0x2c
 800da1e:	fb01 f303 	mul.w	r3, r1, r3
 800da22:	4413      	add	r3, r2
 800da24:	3355      	adds	r3, #85	; 0x55
 800da26:	78ba      	ldrb	r2, [r7, #2]
 800da28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3714      	adds	r7, #20
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7f3 fe8b 	bl	800175c <HAL_Delay>
}
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	2b03      	cmp	r3, #3
 800da62:	d817      	bhi.n	800da94 <USBH_Get_USB_Status+0x44>
 800da64:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <USBH_Get_USB_Status+0x1c>)
 800da66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6a:	bf00      	nop
 800da6c:	0800da7d 	.word	0x0800da7d
 800da70:	0800da83 	.word	0x0800da83
 800da74:	0800da89 	.word	0x0800da89
 800da78:	0800da8f 	.word	0x0800da8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	73fb      	strb	r3, [r7, #15]
    break;
 800da80:	e00b      	b.n	800da9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da82:	2302      	movs	r3, #2
 800da84:	73fb      	strb	r3, [r7, #15]
    break;
 800da86:	e008      	b.n	800da9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da88:	2301      	movs	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]
    break;
 800da8c:	e005      	b.n	800da9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da8e:	2302      	movs	r3, #2
 800da90:	73fb      	strb	r3, [r7, #15]
    break;
 800da92:	e002      	b.n	800da9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da94:	2302      	movs	r3, #2
 800da96:	73fb      	strb	r3, [r7, #15]
    break;
 800da98:	bf00      	nop
  }
  return usb_status;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dabc:	2301      	movs	r3, #1
 800dabe:	73fb      	strb	r3, [r7, #15]
 800dac0:	e001      	b.n	800dac6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
 800dac8:	461a      	mov	r2, r3
 800daca:	2110      	movs	r1, #16
 800dacc:	4803      	ldr	r0, [pc, #12]	; (800dadc <MX_DriverVbusHS+0x34>)
 800dace:	f7f4 fc25 	bl	800231c <HAL_GPIO_WritePin>
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	40020800 	.word	0x40020800

0800dae0 <__errno>:
 800dae0:	4b01      	ldr	r3, [pc, #4]	; (800dae8 <__errno+0x8>)
 800dae2:	6818      	ldr	r0, [r3, #0]
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	20000038 	.word	0x20000038

0800daec <__libc_init_array>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	4d0d      	ldr	r5, [pc, #52]	; (800db24 <__libc_init_array+0x38>)
 800daf0:	4c0d      	ldr	r4, [pc, #52]	; (800db28 <__libc_init_array+0x3c>)
 800daf2:	1b64      	subs	r4, r4, r5
 800daf4:	10a4      	asrs	r4, r4, #2
 800daf6:	2600      	movs	r6, #0
 800daf8:	42a6      	cmp	r6, r4
 800dafa:	d109      	bne.n	800db10 <__libc_init_array+0x24>
 800dafc:	4d0b      	ldr	r5, [pc, #44]	; (800db2c <__libc_init_array+0x40>)
 800dafe:	4c0c      	ldr	r4, [pc, #48]	; (800db30 <__libc_init_array+0x44>)
 800db00:	f000 fce2 	bl	800e4c8 <_init>
 800db04:	1b64      	subs	r4, r4, r5
 800db06:	10a4      	asrs	r4, r4, #2
 800db08:	2600      	movs	r6, #0
 800db0a:	42a6      	cmp	r6, r4
 800db0c:	d105      	bne.n	800db1a <__libc_init_array+0x2e>
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	f855 3b04 	ldr.w	r3, [r5], #4
 800db14:	4798      	blx	r3
 800db16:	3601      	adds	r6, #1
 800db18:	e7ee      	b.n	800daf8 <__libc_init_array+0xc>
 800db1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db1e:	4798      	blx	r3
 800db20:	3601      	adds	r6, #1
 800db22:	e7f2      	b.n	800db0a <__libc_init_array+0x1e>
 800db24:	0800edbc 	.word	0x0800edbc
 800db28:	0800edbc 	.word	0x0800edbc
 800db2c:	0800edbc 	.word	0x0800edbc
 800db30:	0800edc0 	.word	0x0800edc0

0800db34 <__retarget_lock_acquire_recursive>:
 800db34:	4770      	bx	lr

0800db36 <__retarget_lock_release_recursive>:
 800db36:	4770      	bx	lr

0800db38 <malloc>:
 800db38:	4b02      	ldr	r3, [pc, #8]	; (800db44 <malloc+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f000 b88b 	b.w	800dc58 <_malloc_r>
 800db42:	bf00      	nop
 800db44:	20000038 	.word	0x20000038

0800db48 <free>:
 800db48:	4b02      	ldr	r3, [pc, #8]	; (800db54 <free+0xc>)
 800db4a:	4601      	mov	r1, r0
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	f000 b833 	b.w	800dbb8 <_free_r>
 800db52:	bf00      	nop
 800db54:	20000038 	.word	0x20000038

0800db58 <memcpy>:
 800db58:	440a      	add	r2, r1
 800db5a:	4291      	cmp	r1, r2
 800db5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800db60:	d100      	bne.n	800db64 <memcpy+0xc>
 800db62:	4770      	bx	lr
 800db64:	b510      	push	{r4, lr}
 800db66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db6e:	4291      	cmp	r1, r2
 800db70:	d1f9      	bne.n	800db66 <memcpy+0xe>
 800db72:	bd10      	pop	{r4, pc}

0800db74 <memmove>:
 800db74:	4288      	cmp	r0, r1
 800db76:	b510      	push	{r4, lr}
 800db78:	eb01 0402 	add.w	r4, r1, r2
 800db7c:	d902      	bls.n	800db84 <memmove+0x10>
 800db7e:	4284      	cmp	r4, r0
 800db80:	4623      	mov	r3, r4
 800db82:	d807      	bhi.n	800db94 <memmove+0x20>
 800db84:	1e43      	subs	r3, r0, #1
 800db86:	42a1      	cmp	r1, r4
 800db88:	d008      	beq.n	800db9c <memmove+0x28>
 800db8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db92:	e7f8      	b.n	800db86 <memmove+0x12>
 800db94:	4402      	add	r2, r0
 800db96:	4601      	mov	r1, r0
 800db98:	428a      	cmp	r2, r1
 800db9a:	d100      	bne.n	800db9e <memmove+0x2a>
 800db9c:	bd10      	pop	{r4, pc}
 800db9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dba6:	e7f7      	b.n	800db98 <memmove+0x24>

0800dba8 <memset>:
 800dba8:	4402      	add	r2, r0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d100      	bne.n	800dbb2 <memset+0xa>
 800dbb0:	4770      	bx	lr
 800dbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb6:	e7f9      	b.n	800dbac <memset+0x4>

0800dbb8 <_free_r>:
 800dbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	d048      	beq.n	800dc50 <_free_r+0x98>
 800dbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc2:	9001      	str	r0, [sp, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800dbca:	bfb8      	it	lt
 800dbcc:	18e4      	addlt	r4, r4, r3
 800dbce:	f000 f951 	bl	800de74 <__malloc_lock>
 800dbd2:	4a20      	ldr	r2, [pc, #128]	; (800dc54 <_free_r+0x9c>)
 800dbd4:	9801      	ldr	r0, [sp, #4]
 800dbd6:	6813      	ldr	r3, [r2, #0]
 800dbd8:	4615      	mov	r5, r2
 800dbda:	b933      	cbnz	r3, 800dbea <_free_r+0x32>
 800dbdc:	6063      	str	r3, [r4, #4]
 800dbde:	6014      	str	r4, [r2, #0]
 800dbe0:	b003      	add	sp, #12
 800dbe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe6:	f000 b94b 	b.w	800de80 <__malloc_unlock>
 800dbea:	42a3      	cmp	r3, r4
 800dbec:	d90b      	bls.n	800dc06 <_free_r+0x4e>
 800dbee:	6821      	ldr	r1, [r4, #0]
 800dbf0:	1862      	adds	r2, r4, r1
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	bf04      	itt	eq
 800dbf6:	681a      	ldreq	r2, [r3, #0]
 800dbf8:	685b      	ldreq	r3, [r3, #4]
 800dbfa:	6063      	str	r3, [r4, #4]
 800dbfc:	bf04      	itt	eq
 800dbfe:	1852      	addeq	r2, r2, r1
 800dc00:	6022      	streq	r2, [r4, #0]
 800dc02:	602c      	str	r4, [r5, #0]
 800dc04:	e7ec      	b.n	800dbe0 <_free_r+0x28>
 800dc06:	461a      	mov	r2, r3
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	b10b      	cbz	r3, 800dc10 <_free_r+0x58>
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d9fa      	bls.n	800dc06 <_free_r+0x4e>
 800dc10:	6811      	ldr	r1, [r2, #0]
 800dc12:	1855      	adds	r5, r2, r1
 800dc14:	42a5      	cmp	r5, r4
 800dc16:	d10b      	bne.n	800dc30 <_free_r+0x78>
 800dc18:	6824      	ldr	r4, [r4, #0]
 800dc1a:	4421      	add	r1, r4
 800dc1c:	1854      	adds	r4, r2, r1
 800dc1e:	42a3      	cmp	r3, r4
 800dc20:	6011      	str	r1, [r2, #0]
 800dc22:	d1dd      	bne.n	800dbe0 <_free_r+0x28>
 800dc24:	681c      	ldr	r4, [r3, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	6053      	str	r3, [r2, #4]
 800dc2a:	4421      	add	r1, r4
 800dc2c:	6011      	str	r1, [r2, #0]
 800dc2e:	e7d7      	b.n	800dbe0 <_free_r+0x28>
 800dc30:	d902      	bls.n	800dc38 <_free_r+0x80>
 800dc32:	230c      	movs	r3, #12
 800dc34:	6003      	str	r3, [r0, #0]
 800dc36:	e7d3      	b.n	800dbe0 <_free_r+0x28>
 800dc38:	6825      	ldr	r5, [r4, #0]
 800dc3a:	1961      	adds	r1, r4, r5
 800dc3c:	428b      	cmp	r3, r1
 800dc3e:	bf04      	itt	eq
 800dc40:	6819      	ldreq	r1, [r3, #0]
 800dc42:	685b      	ldreq	r3, [r3, #4]
 800dc44:	6063      	str	r3, [r4, #4]
 800dc46:	bf04      	itt	eq
 800dc48:	1949      	addeq	r1, r1, r5
 800dc4a:	6021      	streq	r1, [r4, #0]
 800dc4c:	6054      	str	r4, [r2, #4]
 800dc4e:	e7c7      	b.n	800dbe0 <_free_r+0x28>
 800dc50:	b003      	add	sp, #12
 800dc52:	bd30      	pop	{r4, r5, pc}
 800dc54:	20004a9c 	.word	0x20004a9c

0800dc58 <_malloc_r>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	1ccd      	adds	r5, r1, #3
 800dc5c:	f025 0503 	bic.w	r5, r5, #3
 800dc60:	3508      	adds	r5, #8
 800dc62:	2d0c      	cmp	r5, #12
 800dc64:	bf38      	it	cc
 800dc66:	250c      	movcc	r5, #12
 800dc68:	2d00      	cmp	r5, #0
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	db01      	blt.n	800dc72 <_malloc_r+0x1a>
 800dc6e:	42a9      	cmp	r1, r5
 800dc70:	d903      	bls.n	800dc7a <_malloc_r+0x22>
 800dc72:	230c      	movs	r3, #12
 800dc74:	6033      	str	r3, [r6, #0]
 800dc76:	2000      	movs	r0, #0
 800dc78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc7a:	f000 f8fb 	bl	800de74 <__malloc_lock>
 800dc7e:	4921      	ldr	r1, [pc, #132]	; (800dd04 <_malloc_r+0xac>)
 800dc80:	680a      	ldr	r2, [r1, #0]
 800dc82:	4614      	mov	r4, r2
 800dc84:	b99c      	cbnz	r4, 800dcae <_malloc_r+0x56>
 800dc86:	4f20      	ldr	r7, [pc, #128]	; (800dd08 <_malloc_r+0xb0>)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	b923      	cbnz	r3, 800dc96 <_malloc_r+0x3e>
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f000 f8a6 	bl	800dde0 <_sbrk_r>
 800dc94:	6038      	str	r0, [r7, #0]
 800dc96:	4629      	mov	r1, r5
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f000 f8a1 	bl	800dde0 <_sbrk_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	d123      	bne.n	800dcea <_malloc_r+0x92>
 800dca2:	230c      	movs	r3, #12
 800dca4:	6033      	str	r3, [r6, #0]
 800dca6:	4630      	mov	r0, r6
 800dca8:	f000 f8ea 	bl	800de80 <__malloc_unlock>
 800dcac:	e7e3      	b.n	800dc76 <_malloc_r+0x1e>
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	1b5b      	subs	r3, r3, r5
 800dcb2:	d417      	bmi.n	800dce4 <_malloc_r+0x8c>
 800dcb4:	2b0b      	cmp	r3, #11
 800dcb6:	d903      	bls.n	800dcc0 <_malloc_r+0x68>
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	441c      	add	r4, r3
 800dcbc:	6025      	str	r5, [r4, #0]
 800dcbe:	e004      	b.n	800dcca <_malloc_r+0x72>
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	42a2      	cmp	r2, r4
 800dcc4:	bf0c      	ite	eq
 800dcc6:	600b      	streq	r3, [r1, #0]
 800dcc8:	6053      	strne	r3, [r2, #4]
 800dcca:	4630      	mov	r0, r6
 800dccc:	f000 f8d8 	bl	800de80 <__malloc_unlock>
 800dcd0:	f104 000b 	add.w	r0, r4, #11
 800dcd4:	1d23      	adds	r3, r4, #4
 800dcd6:	f020 0007 	bic.w	r0, r0, #7
 800dcda:	1ac2      	subs	r2, r0, r3
 800dcdc:	d0cc      	beq.n	800dc78 <_malloc_r+0x20>
 800dcde:	1a1b      	subs	r3, r3, r0
 800dce0:	50a3      	str	r3, [r4, r2]
 800dce2:	e7c9      	b.n	800dc78 <_malloc_r+0x20>
 800dce4:	4622      	mov	r2, r4
 800dce6:	6864      	ldr	r4, [r4, #4]
 800dce8:	e7cc      	b.n	800dc84 <_malloc_r+0x2c>
 800dcea:	1cc4      	adds	r4, r0, #3
 800dcec:	f024 0403 	bic.w	r4, r4, #3
 800dcf0:	42a0      	cmp	r0, r4
 800dcf2:	d0e3      	beq.n	800dcbc <_malloc_r+0x64>
 800dcf4:	1a21      	subs	r1, r4, r0
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f000 f872 	bl	800dde0 <_sbrk_r>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d1dd      	bne.n	800dcbc <_malloc_r+0x64>
 800dd00:	e7cf      	b.n	800dca2 <_malloc_r+0x4a>
 800dd02:	bf00      	nop
 800dd04:	20004a9c 	.word	0x20004a9c
 800dd08:	20004aa0 	.word	0x20004aa0

0800dd0c <cleanup_glue>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	460c      	mov	r4, r1
 800dd10:	6809      	ldr	r1, [r1, #0]
 800dd12:	4605      	mov	r5, r0
 800dd14:	b109      	cbz	r1, 800dd1a <cleanup_glue+0xe>
 800dd16:	f7ff fff9 	bl	800dd0c <cleanup_glue>
 800dd1a:	4621      	mov	r1, r4
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd22:	f7ff bf49 	b.w	800dbb8 <_free_r>
	...

0800dd28 <_reclaim_reent>:
 800dd28:	4b2c      	ldr	r3, [pc, #176]	; (800dddc <_reclaim_reent+0xb4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4283      	cmp	r3, r0
 800dd2e:	b570      	push	{r4, r5, r6, lr}
 800dd30:	4604      	mov	r4, r0
 800dd32:	d051      	beq.n	800ddd8 <_reclaim_reent+0xb0>
 800dd34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dd36:	b143      	cbz	r3, 800dd4a <_reclaim_reent+0x22>
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d14a      	bne.n	800ddd4 <_reclaim_reent+0xac>
 800dd3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd40:	6819      	ldr	r1, [r3, #0]
 800dd42:	b111      	cbz	r1, 800dd4a <_reclaim_reent+0x22>
 800dd44:	4620      	mov	r0, r4
 800dd46:	f7ff ff37 	bl	800dbb8 <_free_r>
 800dd4a:	6961      	ldr	r1, [r4, #20]
 800dd4c:	b111      	cbz	r1, 800dd54 <_reclaim_reent+0x2c>
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f7ff ff32 	bl	800dbb8 <_free_r>
 800dd54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd56:	b111      	cbz	r1, 800dd5e <_reclaim_reent+0x36>
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7ff ff2d 	bl	800dbb8 <_free_r>
 800dd5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd60:	b111      	cbz	r1, 800dd68 <_reclaim_reent+0x40>
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7ff ff28 	bl	800dbb8 <_free_r>
 800dd68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dd6a:	b111      	cbz	r1, 800dd72 <_reclaim_reent+0x4a>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f7ff ff23 	bl	800dbb8 <_free_r>
 800dd72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dd74:	b111      	cbz	r1, 800dd7c <_reclaim_reent+0x54>
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7ff ff1e 	bl	800dbb8 <_free_r>
 800dd7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dd7e:	b111      	cbz	r1, 800dd86 <_reclaim_reent+0x5e>
 800dd80:	4620      	mov	r0, r4
 800dd82:	f7ff ff19 	bl	800dbb8 <_free_r>
 800dd86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dd88:	b111      	cbz	r1, 800dd90 <_reclaim_reent+0x68>
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f7ff ff14 	bl	800dbb8 <_free_r>
 800dd90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd92:	b111      	cbz	r1, 800dd9a <_reclaim_reent+0x72>
 800dd94:	4620      	mov	r0, r4
 800dd96:	f7ff ff0f 	bl	800dbb8 <_free_r>
 800dd9a:	69a3      	ldr	r3, [r4, #24]
 800dd9c:	b1e3      	cbz	r3, 800ddd8 <_reclaim_reent+0xb0>
 800dd9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dda0:	4620      	mov	r0, r4
 800dda2:	4798      	blx	r3
 800dda4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dda6:	b1b9      	cbz	r1, 800ddd8 <_reclaim_reent+0xb0>
 800dda8:	4620      	mov	r0, r4
 800ddaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddae:	f7ff bfad 	b.w	800dd0c <cleanup_glue>
 800ddb2:	5949      	ldr	r1, [r1, r5]
 800ddb4:	b941      	cbnz	r1, 800ddc8 <_reclaim_reent+0xa0>
 800ddb6:	3504      	adds	r5, #4
 800ddb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddba:	2d80      	cmp	r5, #128	; 0x80
 800ddbc:	68d9      	ldr	r1, [r3, #12]
 800ddbe:	d1f8      	bne.n	800ddb2 <_reclaim_reent+0x8a>
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f7ff fef9 	bl	800dbb8 <_free_r>
 800ddc6:	e7ba      	b.n	800dd3e <_reclaim_reent+0x16>
 800ddc8:	680e      	ldr	r6, [r1, #0]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f7ff fef4 	bl	800dbb8 <_free_r>
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	e7ef      	b.n	800ddb4 <_reclaim_reent+0x8c>
 800ddd4:	2500      	movs	r5, #0
 800ddd6:	e7ef      	b.n	800ddb8 <_reclaim_reent+0x90>
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}
 800ddda:	bf00      	nop
 800dddc:	20000038 	.word	0x20000038

0800dde0 <_sbrk_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d06      	ldr	r5, [pc, #24]	; (800ddfc <_sbrk_r+0x1c>)
 800dde4:	2300      	movs	r3, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	602b      	str	r3, [r5, #0]
 800ddec:	f7f3 fc02 	bl	80015f4 <_sbrk>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_sbrk_r+0x1a>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_sbrk_r+0x1a>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	200056ec 	.word	0x200056ec

0800de00 <_vsniprintf_r>:
 800de00:	b530      	push	{r4, r5, lr}
 800de02:	1e14      	subs	r4, r2, #0
 800de04:	4605      	mov	r5, r0
 800de06:	b09b      	sub	sp, #108	; 0x6c
 800de08:	4618      	mov	r0, r3
 800de0a:	da05      	bge.n	800de18 <_vsniprintf_r+0x18>
 800de0c:	238b      	movs	r3, #139	; 0x8b
 800de0e:	602b      	str	r3, [r5, #0]
 800de10:	f04f 30ff 	mov.w	r0, #4294967295
 800de14:	b01b      	add	sp, #108	; 0x6c
 800de16:	bd30      	pop	{r4, r5, pc}
 800de18:	f44f 7302 	mov.w	r3, #520	; 0x208
 800de1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800de20:	bf14      	ite	ne
 800de22:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de26:	4623      	moveq	r3, r4
 800de28:	9302      	str	r3, [sp, #8]
 800de2a:	9305      	str	r3, [sp, #20]
 800de2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de30:	9100      	str	r1, [sp, #0]
 800de32:	9104      	str	r1, [sp, #16]
 800de34:	f8ad 300e 	strh.w	r3, [sp, #14]
 800de38:	4602      	mov	r2, r0
 800de3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de3c:	4669      	mov	r1, sp
 800de3e:	4628      	mov	r0, r5
 800de40:	f000 f880 	bl	800df44 <_svfiprintf_r>
 800de44:	1c43      	adds	r3, r0, #1
 800de46:	bfbc      	itt	lt
 800de48:	238b      	movlt	r3, #139	; 0x8b
 800de4a:	602b      	strlt	r3, [r5, #0]
 800de4c:	2c00      	cmp	r4, #0
 800de4e:	d0e1      	beq.n	800de14 <_vsniprintf_r+0x14>
 800de50:	9b00      	ldr	r3, [sp, #0]
 800de52:	2200      	movs	r2, #0
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	e7dd      	b.n	800de14 <_vsniprintf_r+0x14>

0800de58 <vsniprintf>:
 800de58:	b507      	push	{r0, r1, r2, lr}
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4613      	mov	r3, r2
 800de5e:	460a      	mov	r2, r1
 800de60:	4601      	mov	r1, r0
 800de62:	4803      	ldr	r0, [pc, #12]	; (800de70 <vsniprintf+0x18>)
 800de64:	6800      	ldr	r0, [r0, #0]
 800de66:	f7ff ffcb 	bl	800de00 <_vsniprintf_r>
 800de6a:	b003      	add	sp, #12
 800de6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800de70:	20000038 	.word	0x20000038

0800de74 <__malloc_lock>:
 800de74:	4801      	ldr	r0, [pc, #4]	; (800de7c <__malloc_lock+0x8>)
 800de76:	f7ff be5d 	b.w	800db34 <__retarget_lock_acquire_recursive>
 800de7a:	bf00      	nop
 800de7c:	200056e4 	.word	0x200056e4

0800de80 <__malloc_unlock>:
 800de80:	4801      	ldr	r0, [pc, #4]	; (800de88 <__malloc_unlock+0x8>)
 800de82:	f7ff be58 	b.w	800db36 <__retarget_lock_release_recursive>
 800de86:	bf00      	nop
 800de88:	200056e4 	.word	0x200056e4

0800de8c <__ssputs_r>:
 800de8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de90:	688e      	ldr	r6, [r1, #8]
 800de92:	429e      	cmp	r6, r3
 800de94:	4682      	mov	sl, r0
 800de96:	460c      	mov	r4, r1
 800de98:	4690      	mov	r8, r2
 800de9a:	461f      	mov	r7, r3
 800de9c:	d838      	bhi.n	800df10 <__ssputs_r+0x84>
 800de9e:	898a      	ldrh	r2, [r1, #12]
 800dea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dea4:	d032      	beq.n	800df0c <__ssputs_r+0x80>
 800dea6:	6825      	ldr	r5, [r4, #0]
 800dea8:	6909      	ldr	r1, [r1, #16]
 800deaa:	eba5 0901 	sub.w	r9, r5, r1
 800deae:	6965      	ldr	r5, [r4, #20]
 800deb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800deb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800deb8:	3301      	adds	r3, #1
 800deba:	444b      	add	r3, r9
 800debc:	106d      	asrs	r5, r5, #1
 800debe:	429d      	cmp	r5, r3
 800dec0:	bf38      	it	cc
 800dec2:	461d      	movcc	r5, r3
 800dec4:	0553      	lsls	r3, r2, #21
 800dec6:	d531      	bpl.n	800df2c <__ssputs_r+0xa0>
 800dec8:	4629      	mov	r1, r5
 800deca:	f7ff fec5 	bl	800dc58 <_malloc_r>
 800dece:	4606      	mov	r6, r0
 800ded0:	b950      	cbnz	r0, 800dee8 <__ssputs_r+0x5c>
 800ded2:	230c      	movs	r3, #12
 800ded4:	f8ca 3000 	str.w	r3, [sl]
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dede:	81a3      	strh	r3, [r4, #12]
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee8:	6921      	ldr	r1, [r4, #16]
 800deea:	464a      	mov	r2, r9
 800deec:	f7ff fe34 	bl	800db58 <memcpy>
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800def6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800defa:	81a3      	strh	r3, [r4, #12]
 800defc:	6126      	str	r6, [r4, #16]
 800defe:	6165      	str	r5, [r4, #20]
 800df00:	444e      	add	r6, r9
 800df02:	eba5 0509 	sub.w	r5, r5, r9
 800df06:	6026      	str	r6, [r4, #0]
 800df08:	60a5      	str	r5, [r4, #8]
 800df0a:	463e      	mov	r6, r7
 800df0c:	42be      	cmp	r6, r7
 800df0e:	d900      	bls.n	800df12 <__ssputs_r+0x86>
 800df10:	463e      	mov	r6, r7
 800df12:	4632      	mov	r2, r6
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	4641      	mov	r1, r8
 800df18:	f7ff fe2c 	bl	800db74 <memmove>
 800df1c:	68a3      	ldr	r3, [r4, #8]
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	1b9b      	subs	r3, r3, r6
 800df22:	4432      	add	r2, r6
 800df24:	60a3      	str	r3, [r4, #8]
 800df26:	6022      	str	r2, [r4, #0]
 800df28:	2000      	movs	r0, #0
 800df2a:	e7db      	b.n	800dee4 <__ssputs_r+0x58>
 800df2c:	462a      	mov	r2, r5
 800df2e:	f000 fa9d 	bl	800e46c <_realloc_r>
 800df32:	4606      	mov	r6, r0
 800df34:	2800      	cmp	r0, #0
 800df36:	d1e1      	bne.n	800defc <__ssputs_r+0x70>
 800df38:	6921      	ldr	r1, [r4, #16]
 800df3a:	4650      	mov	r0, sl
 800df3c:	f7ff fe3c 	bl	800dbb8 <_free_r>
 800df40:	e7c7      	b.n	800ded2 <__ssputs_r+0x46>
	...

0800df44 <_svfiprintf_r>:
 800df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	4698      	mov	r8, r3
 800df4a:	898b      	ldrh	r3, [r1, #12]
 800df4c:	061b      	lsls	r3, r3, #24
 800df4e:	b09d      	sub	sp, #116	; 0x74
 800df50:	4607      	mov	r7, r0
 800df52:	460d      	mov	r5, r1
 800df54:	4614      	mov	r4, r2
 800df56:	d50e      	bpl.n	800df76 <_svfiprintf_r+0x32>
 800df58:	690b      	ldr	r3, [r1, #16]
 800df5a:	b963      	cbnz	r3, 800df76 <_svfiprintf_r+0x32>
 800df5c:	2140      	movs	r1, #64	; 0x40
 800df5e:	f7ff fe7b 	bl	800dc58 <_malloc_r>
 800df62:	6028      	str	r0, [r5, #0]
 800df64:	6128      	str	r0, [r5, #16]
 800df66:	b920      	cbnz	r0, 800df72 <_svfiprintf_r+0x2e>
 800df68:	230c      	movs	r3, #12
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e0d1      	b.n	800e116 <_svfiprintf_r+0x1d2>
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	616b      	str	r3, [r5, #20]
 800df76:	2300      	movs	r3, #0
 800df78:	9309      	str	r3, [sp, #36]	; 0x24
 800df7a:	2320      	movs	r3, #32
 800df7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df80:	f8cd 800c 	str.w	r8, [sp, #12]
 800df84:	2330      	movs	r3, #48	; 0x30
 800df86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e130 <_svfiprintf_r+0x1ec>
 800df8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df8e:	f04f 0901 	mov.w	r9, #1
 800df92:	4623      	mov	r3, r4
 800df94:	469a      	mov	sl, r3
 800df96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df9a:	b10a      	cbz	r2, 800dfa0 <_svfiprintf_r+0x5c>
 800df9c:	2a25      	cmp	r2, #37	; 0x25
 800df9e:	d1f9      	bne.n	800df94 <_svfiprintf_r+0x50>
 800dfa0:	ebba 0b04 	subs.w	fp, sl, r4
 800dfa4:	d00b      	beq.n	800dfbe <_svfiprintf_r+0x7a>
 800dfa6:	465b      	mov	r3, fp
 800dfa8:	4622      	mov	r2, r4
 800dfaa:	4629      	mov	r1, r5
 800dfac:	4638      	mov	r0, r7
 800dfae:	f7ff ff6d 	bl	800de8c <__ssputs_r>
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	f000 80aa 	beq.w	800e10c <_svfiprintf_r+0x1c8>
 800dfb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfba:	445a      	add	r2, fp
 800dfbc:	9209      	str	r2, [sp, #36]	; 0x24
 800dfbe:	f89a 3000 	ldrb.w	r3, [sl]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 80a2 	beq.w	800e10c <_svfiprintf_r+0x1c8>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	f04f 32ff 	mov.w	r2, #4294967295
 800dfce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfd2:	f10a 0a01 	add.w	sl, sl, #1
 800dfd6:	9304      	str	r3, [sp, #16]
 800dfd8:	9307      	str	r3, [sp, #28]
 800dfda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfde:	931a      	str	r3, [sp, #104]	; 0x68
 800dfe0:	4654      	mov	r4, sl
 800dfe2:	2205      	movs	r2, #5
 800dfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfe8:	4851      	ldr	r0, [pc, #324]	; (800e130 <_svfiprintf_r+0x1ec>)
 800dfea:	f7f2 f901 	bl	80001f0 <memchr>
 800dfee:	9a04      	ldr	r2, [sp, #16]
 800dff0:	b9d8      	cbnz	r0, 800e02a <_svfiprintf_r+0xe6>
 800dff2:	06d0      	lsls	r0, r2, #27
 800dff4:	bf44      	itt	mi
 800dff6:	2320      	movmi	r3, #32
 800dff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dffc:	0711      	lsls	r1, r2, #28
 800dffe:	bf44      	itt	mi
 800e000:	232b      	movmi	r3, #43	; 0x2b
 800e002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e006:	f89a 3000 	ldrb.w	r3, [sl]
 800e00a:	2b2a      	cmp	r3, #42	; 0x2a
 800e00c:	d015      	beq.n	800e03a <_svfiprintf_r+0xf6>
 800e00e:	9a07      	ldr	r2, [sp, #28]
 800e010:	4654      	mov	r4, sl
 800e012:	2000      	movs	r0, #0
 800e014:	f04f 0c0a 	mov.w	ip, #10
 800e018:	4621      	mov	r1, r4
 800e01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e01e:	3b30      	subs	r3, #48	; 0x30
 800e020:	2b09      	cmp	r3, #9
 800e022:	d94e      	bls.n	800e0c2 <_svfiprintf_r+0x17e>
 800e024:	b1b0      	cbz	r0, 800e054 <_svfiprintf_r+0x110>
 800e026:	9207      	str	r2, [sp, #28]
 800e028:	e014      	b.n	800e054 <_svfiprintf_r+0x110>
 800e02a:	eba0 0308 	sub.w	r3, r0, r8
 800e02e:	fa09 f303 	lsl.w	r3, r9, r3
 800e032:	4313      	orrs	r3, r2
 800e034:	9304      	str	r3, [sp, #16]
 800e036:	46a2      	mov	sl, r4
 800e038:	e7d2      	b.n	800dfe0 <_svfiprintf_r+0x9c>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	1d19      	adds	r1, r3, #4
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	9103      	str	r1, [sp, #12]
 800e042:	2b00      	cmp	r3, #0
 800e044:	bfbb      	ittet	lt
 800e046:	425b      	neglt	r3, r3
 800e048:	f042 0202 	orrlt.w	r2, r2, #2
 800e04c:	9307      	strge	r3, [sp, #28]
 800e04e:	9307      	strlt	r3, [sp, #28]
 800e050:	bfb8      	it	lt
 800e052:	9204      	strlt	r2, [sp, #16]
 800e054:	7823      	ldrb	r3, [r4, #0]
 800e056:	2b2e      	cmp	r3, #46	; 0x2e
 800e058:	d10c      	bne.n	800e074 <_svfiprintf_r+0x130>
 800e05a:	7863      	ldrb	r3, [r4, #1]
 800e05c:	2b2a      	cmp	r3, #42	; 0x2a
 800e05e:	d135      	bne.n	800e0cc <_svfiprintf_r+0x188>
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	1d1a      	adds	r2, r3, #4
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	9203      	str	r2, [sp, #12]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	bfb8      	it	lt
 800e06c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e070:	3402      	adds	r4, #2
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e140 <_svfiprintf_r+0x1fc>
 800e078:	7821      	ldrb	r1, [r4, #0]
 800e07a:	2203      	movs	r2, #3
 800e07c:	4650      	mov	r0, sl
 800e07e:	f7f2 f8b7 	bl	80001f0 <memchr>
 800e082:	b140      	cbz	r0, 800e096 <_svfiprintf_r+0x152>
 800e084:	2340      	movs	r3, #64	; 0x40
 800e086:	eba0 000a 	sub.w	r0, r0, sl
 800e08a:	fa03 f000 	lsl.w	r0, r3, r0
 800e08e:	9b04      	ldr	r3, [sp, #16]
 800e090:	4303      	orrs	r3, r0
 800e092:	3401      	adds	r4, #1
 800e094:	9304      	str	r3, [sp, #16]
 800e096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09a:	4826      	ldr	r0, [pc, #152]	; (800e134 <_svfiprintf_r+0x1f0>)
 800e09c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0a0:	2206      	movs	r2, #6
 800e0a2:	f7f2 f8a5 	bl	80001f0 <memchr>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d038      	beq.n	800e11c <_svfiprintf_r+0x1d8>
 800e0aa:	4b23      	ldr	r3, [pc, #140]	; (800e138 <_svfiprintf_r+0x1f4>)
 800e0ac:	bb1b      	cbnz	r3, 800e0f6 <_svfiprintf_r+0x1b2>
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	f023 0307 	bic.w	r3, r3, #7
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	9303      	str	r3, [sp, #12]
 800e0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0bc:	4433      	add	r3, r6
 800e0be:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c0:	e767      	b.n	800df92 <_svfiprintf_r+0x4e>
 800e0c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	2001      	movs	r0, #1
 800e0ca:	e7a5      	b.n	800e018 <_svfiprintf_r+0xd4>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	f04f 0c0a 	mov.w	ip, #10
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0de:	3a30      	subs	r2, #48	; 0x30
 800e0e0:	2a09      	cmp	r2, #9
 800e0e2:	d903      	bls.n	800e0ec <_svfiprintf_r+0x1a8>
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0c5      	beq.n	800e074 <_svfiprintf_r+0x130>
 800e0e8:	9105      	str	r1, [sp, #20]
 800e0ea:	e7c3      	b.n	800e074 <_svfiprintf_r+0x130>
 800e0ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e7f0      	b.n	800e0d8 <_svfiprintf_r+0x194>
 800e0f6:	ab03      	add	r3, sp, #12
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	462a      	mov	r2, r5
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <_svfiprintf_r+0x1f8>)
 800e0fe:	a904      	add	r1, sp, #16
 800e100:	4638      	mov	r0, r7
 800e102:	f3af 8000 	nop.w
 800e106:	1c42      	adds	r2, r0, #1
 800e108:	4606      	mov	r6, r0
 800e10a:	d1d6      	bne.n	800e0ba <_svfiprintf_r+0x176>
 800e10c:	89ab      	ldrh	r3, [r5, #12]
 800e10e:	065b      	lsls	r3, r3, #25
 800e110:	f53f af2c 	bmi.w	800df6c <_svfiprintf_r+0x28>
 800e114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e116:	b01d      	add	sp, #116	; 0x74
 800e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11c:	ab03      	add	r3, sp, #12
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	462a      	mov	r2, r5
 800e122:	4b06      	ldr	r3, [pc, #24]	; (800e13c <_svfiprintf_r+0x1f8>)
 800e124:	a904      	add	r1, sp, #16
 800e126:	4638      	mov	r0, r7
 800e128:	f000 f87a 	bl	800e220 <_printf_i>
 800e12c:	e7eb      	b.n	800e106 <_svfiprintf_r+0x1c2>
 800e12e:	bf00      	nop
 800e130:	0800ed80 	.word	0x0800ed80
 800e134:	0800ed8a 	.word	0x0800ed8a
 800e138:	00000000 	.word	0x00000000
 800e13c:	0800de8d 	.word	0x0800de8d
 800e140:	0800ed86 	.word	0x0800ed86

0800e144 <_printf_common>:
 800e144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e148:	4616      	mov	r6, r2
 800e14a:	4699      	mov	r9, r3
 800e14c:	688a      	ldr	r2, [r1, #8]
 800e14e:	690b      	ldr	r3, [r1, #16]
 800e150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e154:	4293      	cmp	r3, r2
 800e156:	bfb8      	it	lt
 800e158:	4613      	movlt	r3, r2
 800e15a:	6033      	str	r3, [r6, #0]
 800e15c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e160:	4607      	mov	r7, r0
 800e162:	460c      	mov	r4, r1
 800e164:	b10a      	cbz	r2, 800e16a <_printf_common+0x26>
 800e166:	3301      	adds	r3, #1
 800e168:	6033      	str	r3, [r6, #0]
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	0699      	lsls	r1, r3, #26
 800e16e:	bf42      	ittt	mi
 800e170:	6833      	ldrmi	r3, [r6, #0]
 800e172:	3302      	addmi	r3, #2
 800e174:	6033      	strmi	r3, [r6, #0]
 800e176:	6825      	ldr	r5, [r4, #0]
 800e178:	f015 0506 	ands.w	r5, r5, #6
 800e17c:	d106      	bne.n	800e18c <_printf_common+0x48>
 800e17e:	f104 0a19 	add.w	sl, r4, #25
 800e182:	68e3      	ldr	r3, [r4, #12]
 800e184:	6832      	ldr	r2, [r6, #0]
 800e186:	1a9b      	subs	r3, r3, r2
 800e188:	42ab      	cmp	r3, r5
 800e18a:	dc26      	bgt.n	800e1da <_printf_common+0x96>
 800e18c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e190:	1e13      	subs	r3, r2, #0
 800e192:	6822      	ldr	r2, [r4, #0]
 800e194:	bf18      	it	ne
 800e196:	2301      	movne	r3, #1
 800e198:	0692      	lsls	r2, r2, #26
 800e19a:	d42b      	bmi.n	800e1f4 <_printf_common+0xb0>
 800e19c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1a0:	4649      	mov	r1, r9
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	47c0      	blx	r8
 800e1a6:	3001      	adds	r0, #1
 800e1a8:	d01e      	beq.n	800e1e8 <_printf_common+0xa4>
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	68e5      	ldr	r5, [r4, #12]
 800e1ae:	6832      	ldr	r2, [r6, #0]
 800e1b0:	f003 0306 	and.w	r3, r3, #6
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	bf08      	it	eq
 800e1b8:	1aad      	subeq	r5, r5, r2
 800e1ba:	68a3      	ldr	r3, [r4, #8]
 800e1bc:	6922      	ldr	r2, [r4, #16]
 800e1be:	bf0c      	ite	eq
 800e1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1c4:	2500      	movne	r5, #0
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	bfc4      	itt	gt
 800e1ca:	1a9b      	subgt	r3, r3, r2
 800e1cc:	18ed      	addgt	r5, r5, r3
 800e1ce:	2600      	movs	r6, #0
 800e1d0:	341a      	adds	r4, #26
 800e1d2:	42b5      	cmp	r5, r6
 800e1d4:	d11a      	bne.n	800e20c <_printf_common+0xc8>
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e008      	b.n	800e1ec <_printf_common+0xa8>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	4652      	mov	r2, sl
 800e1de:	4649      	mov	r1, r9
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	47c0      	blx	r8
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	d103      	bne.n	800e1f0 <_printf_common+0xac>
 800e1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f0:	3501      	adds	r5, #1
 800e1f2:	e7c6      	b.n	800e182 <_printf_common+0x3e>
 800e1f4:	18e1      	adds	r1, r4, r3
 800e1f6:	1c5a      	adds	r2, r3, #1
 800e1f8:	2030      	movs	r0, #48	; 0x30
 800e1fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1fe:	4422      	add	r2, r4
 800e200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e208:	3302      	adds	r3, #2
 800e20a:	e7c7      	b.n	800e19c <_printf_common+0x58>
 800e20c:	2301      	movs	r3, #1
 800e20e:	4622      	mov	r2, r4
 800e210:	4649      	mov	r1, r9
 800e212:	4638      	mov	r0, r7
 800e214:	47c0      	blx	r8
 800e216:	3001      	adds	r0, #1
 800e218:	d0e6      	beq.n	800e1e8 <_printf_common+0xa4>
 800e21a:	3601      	adds	r6, #1
 800e21c:	e7d9      	b.n	800e1d2 <_printf_common+0x8e>
	...

0800e220 <_printf_i>:
 800e220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e224:	460c      	mov	r4, r1
 800e226:	4691      	mov	r9, r2
 800e228:	7e27      	ldrb	r7, [r4, #24]
 800e22a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e22c:	2f78      	cmp	r7, #120	; 0x78
 800e22e:	4680      	mov	r8, r0
 800e230:	469a      	mov	sl, r3
 800e232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e236:	d807      	bhi.n	800e248 <_printf_i+0x28>
 800e238:	2f62      	cmp	r7, #98	; 0x62
 800e23a:	d80a      	bhi.n	800e252 <_printf_i+0x32>
 800e23c:	2f00      	cmp	r7, #0
 800e23e:	f000 80d8 	beq.w	800e3f2 <_printf_i+0x1d2>
 800e242:	2f58      	cmp	r7, #88	; 0x58
 800e244:	f000 80a3 	beq.w	800e38e <_printf_i+0x16e>
 800e248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e24c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e250:	e03a      	b.n	800e2c8 <_printf_i+0xa8>
 800e252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e256:	2b15      	cmp	r3, #21
 800e258:	d8f6      	bhi.n	800e248 <_printf_i+0x28>
 800e25a:	a001      	add	r0, pc, #4	; (adr r0, 800e260 <_printf_i+0x40>)
 800e25c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e260:	0800e2b9 	.word	0x0800e2b9
 800e264:	0800e2cd 	.word	0x0800e2cd
 800e268:	0800e249 	.word	0x0800e249
 800e26c:	0800e249 	.word	0x0800e249
 800e270:	0800e249 	.word	0x0800e249
 800e274:	0800e249 	.word	0x0800e249
 800e278:	0800e2cd 	.word	0x0800e2cd
 800e27c:	0800e249 	.word	0x0800e249
 800e280:	0800e249 	.word	0x0800e249
 800e284:	0800e249 	.word	0x0800e249
 800e288:	0800e249 	.word	0x0800e249
 800e28c:	0800e3d9 	.word	0x0800e3d9
 800e290:	0800e2fd 	.word	0x0800e2fd
 800e294:	0800e3bb 	.word	0x0800e3bb
 800e298:	0800e249 	.word	0x0800e249
 800e29c:	0800e249 	.word	0x0800e249
 800e2a0:	0800e3fb 	.word	0x0800e3fb
 800e2a4:	0800e249 	.word	0x0800e249
 800e2a8:	0800e2fd 	.word	0x0800e2fd
 800e2ac:	0800e249 	.word	0x0800e249
 800e2b0:	0800e249 	.word	0x0800e249
 800e2b4:	0800e3c3 	.word	0x0800e3c3
 800e2b8:	680b      	ldr	r3, [r1, #0]
 800e2ba:	1d1a      	adds	r2, r3, #4
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	600a      	str	r2, [r1, #0]
 800e2c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e0a3      	b.n	800e414 <_printf_i+0x1f4>
 800e2cc:	6825      	ldr	r5, [r4, #0]
 800e2ce:	6808      	ldr	r0, [r1, #0]
 800e2d0:	062e      	lsls	r6, r5, #24
 800e2d2:	f100 0304 	add.w	r3, r0, #4
 800e2d6:	d50a      	bpl.n	800e2ee <_printf_i+0xce>
 800e2d8:	6805      	ldr	r5, [r0, #0]
 800e2da:	600b      	str	r3, [r1, #0]
 800e2dc:	2d00      	cmp	r5, #0
 800e2de:	da03      	bge.n	800e2e8 <_printf_i+0xc8>
 800e2e0:	232d      	movs	r3, #45	; 0x2d
 800e2e2:	426d      	negs	r5, r5
 800e2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e8:	485e      	ldr	r0, [pc, #376]	; (800e464 <_printf_i+0x244>)
 800e2ea:	230a      	movs	r3, #10
 800e2ec:	e019      	b.n	800e322 <_printf_i+0x102>
 800e2ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e2f2:	6805      	ldr	r5, [r0, #0]
 800e2f4:	600b      	str	r3, [r1, #0]
 800e2f6:	bf18      	it	ne
 800e2f8:	b22d      	sxthne	r5, r5
 800e2fa:	e7ef      	b.n	800e2dc <_printf_i+0xbc>
 800e2fc:	680b      	ldr	r3, [r1, #0]
 800e2fe:	6825      	ldr	r5, [r4, #0]
 800e300:	1d18      	adds	r0, r3, #4
 800e302:	6008      	str	r0, [r1, #0]
 800e304:	0628      	lsls	r0, r5, #24
 800e306:	d501      	bpl.n	800e30c <_printf_i+0xec>
 800e308:	681d      	ldr	r5, [r3, #0]
 800e30a:	e002      	b.n	800e312 <_printf_i+0xf2>
 800e30c:	0669      	lsls	r1, r5, #25
 800e30e:	d5fb      	bpl.n	800e308 <_printf_i+0xe8>
 800e310:	881d      	ldrh	r5, [r3, #0]
 800e312:	4854      	ldr	r0, [pc, #336]	; (800e464 <_printf_i+0x244>)
 800e314:	2f6f      	cmp	r7, #111	; 0x6f
 800e316:	bf0c      	ite	eq
 800e318:	2308      	moveq	r3, #8
 800e31a:	230a      	movne	r3, #10
 800e31c:	2100      	movs	r1, #0
 800e31e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e322:	6866      	ldr	r6, [r4, #4]
 800e324:	60a6      	str	r6, [r4, #8]
 800e326:	2e00      	cmp	r6, #0
 800e328:	bfa2      	ittt	ge
 800e32a:	6821      	ldrge	r1, [r4, #0]
 800e32c:	f021 0104 	bicge.w	r1, r1, #4
 800e330:	6021      	strge	r1, [r4, #0]
 800e332:	b90d      	cbnz	r5, 800e338 <_printf_i+0x118>
 800e334:	2e00      	cmp	r6, #0
 800e336:	d04d      	beq.n	800e3d4 <_printf_i+0x1b4>
 800e338:	4616      	mov	r6, r2
 800e33a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e33e:	fb03 5711 	mls	r7, r3, r1, r5
 800e342:	5dc7      	ldrb	r7, [r0, r7]
 800e344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e348:	462f      	mov	r7, r5
 800e34a:	42bb      	cmp	r3, r7
 800e34c:	460d      	mov	r5, r1
 800e34e:	d9f4      	bls.n	800e33a <_printf_i+0x11a>
 800e350:	2b08      	cmp	r3, #8
 800e352:	d10b      	bne.n	800e36c <_printf_i+0x14c>
 800e354:	6823      	ldr	r3, [r4, #0]
 800e356:	07df      	lsls	r7, r3, #31
 800e358:	d508      	bpl.n	800e36c <_printf_i+0x14c>
 800e35a:	6923      	ldr	r3, [r4, #16]
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	4299      	cmp	r1, r3
 800e360:	bfde      	ittt	le
 800e362:	2330      	movle	r3, #48	; 0x30
 800e364:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e368:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e36c:	1b92      	subs	r2, r2, r6
 800e36e:	6122      	str	r2, [r4, #16]
 800e370:	f8cd a000 	str.w	sl, [sp]
 800e374:	464b      	mov	r3, r9
 800e376:	aa03      	add	r2, sp, #12
 800e378:	4621      	mov	r1, r4
 800e37a:	4640      	mov	r0, r8
 800e37c:	f7ff fee2 	bl	800e144 <_printf_common>
 800e380:	3001      	adds	r0, #1
 800e382:	d14c      	bne.n	800e41e <_printf_i+0x1fe>
 800e384:	f04f 30ff 	mov.w	r0, #4294967295
 800e388:	b004      	add	sp, #16
 800e38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38e:	4835      	ldr	r0, [pc, #212]	; (800e464 <_printf_i+0x244>)
 800e390:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e394:	6823      	ldr	r3, [r4, #0]
 800e396:	680e      	ldr	r6, [r1, #0]
 800e398:	061f      	lsls	r7, r3, #24
 800e39a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e39e:	600e      	str	r6, [r1, #0]
 800e3a0:	d514      	bpl.n	800e3cc <_printf_i+0x1ac>
 800e3a2:	07d9      	lsls	r1, r3, #31
 800e3a4:	bf44      	itt	mi
 800e3a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e3aa:	6023      	strmi	r3, [r4, #0]
 800e3ac:	b91d      	cbnz	r5, 800e3b6 <_printf_i+0x196>
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	f023 0320 	bic.w	r3, r3, #32
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	2310      	movs	r3, #16
 800e3b8:	e7b0      	b.n	800e31c <_printf_i+0xfc>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	f043 0320 	orr.w	r3, r3, #32
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	2378      	movs	r3, #120	; 0x78
 800e3c4:	4828      	ldr	r0, [pc, #160]	; (800e468 <_printf_i+0x248>)
 800e3c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3ca:	e7e3      	b.n	800e394 <_printf_i+0x174>
 800e3cc:	065e      	lsls	r6, r3, #25
 800e3ce:	bf48      	it	mi
 800e3d0:	b2ad      	uxthmi	r5, r5
 800e3d2:	e7e6      	b.n	800e3a2 <_printf_i+0x182>
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	e7bb      	b.n	800e350 <_printf_i+0x130>
 800e3d8:	680b      	ldr	r3, [r1, #0]
 800e3da:	6826      	ldr	r6, [r4, #0]
 800e3dc:	6960      	ldr	r0, [r4, #20]
 800e3de:	1d1d      	adds	r5, r3, #4
 800e3e0:	600d      	str	r5, [r1, #0]
 800e3e2:	0635      	lsls	r5, r6, #24
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	d501      	bpl.n	800e3ec <_printf_i+0x1cc>
 800e3e8:	6018      	str	r0, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <_printf_i+0x1d2>
 800e3ec:	0671      	lsls	r1, r6, #25
 800e3ee:	d5fb      	bpl.n	800e3e8 <_printf_i+0x1c8>
 800e3f0:	8018      	strh	r0, [r3, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6123      	str	r3, [r4, #16]
 800e3f6:	4616      	mov	r6, r2
 800e3f8:	e7ba      	b.n	800e370 <_printf_i+0x150>
 800e3fa:	680b      	ldr	r3, [r1, #0]
 800e3fc:	1d1a      	adds	r2, r3, #4
 800e3fe:	600a      	str	r2, [r1, #0]
 800e400:	681e      	ldr	r6, [r3, #0]
 800e402:	6862      	ldr	r2, [r4, #4]
 800e404:	2100      	movs	r1, #0
 800e406:	4630      	mov	r0, r6
 800e408:	f7f1 fef2 	bl	80001f0 <memchr>
 800e40c:	b108      	cbz	r0, 800e412 <_printf_i+0x1f2>
 800e40e:	1b80      	subs	r0, r0, r6
 800e410:	6060      	str	r0, [r4, #4]
 800e412:	6863      	ldr	r3, [r4, #4]
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	2300      	movs	r3, #0
 800e418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e41c:	e7a8      	b.n	800e370 <_printf_i+0x150>
 800e41e:	6923      	ldr	r3, [r4, #16]
 800e420:	4632      	mov	r2, r6
 800e422:	4649      	mov	r1, r9
 800e424:	4640      	mov	r0, r8
 800e426:	47d0      	blx	sl
 800e428:	3001      	adds	r0, #1
 800e42a:	d0ab      	beq.n	800e384 <_printf_i+0x164>
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	079b      	lsls	r3, r3, #30
 800e430:	d413      	bmi.n	800e45a <_printf_i+0x23a>
 800e432:	68e0      	ldr	r0, [r4, #12]
 800e434:	9b03      	ldr	r3, [sp, #12]
 800e436:	4298      	cmp	r0, r3
 800e438:	bfb8      	it	lt
 800e43a:	4618      	movlt	r0, r3
 800e43c:	e7a4      	b.n	800e388 <_printf_i+0x168>
 800e43e:	2301      	movs	r3, #1
 800e440:	4632      	mov	r2, r6
 800e442:	4649      	mov	r1, r9
 800e444:	4640      	mov	r0, r8
 800e446:	47d0      	blx	sl
 800e448:	3001      	adds	r0, #1
 800e44a:	d09b      	beq.n	800e384 <_printf_i+0x164>
 800e44c:	3501      	adds	r5, #1
 800e44e:	68e3      	ldr	r3, [r4, #12]
 800e450:	9903      	ldr	r1, [sp, #12]
 800e452:	1a5b      	subs	r3, r3, r1
 800e454:	42ab      	cmp	r3, r5
 800e456:	dcf2      	bgt.n	800e43e <_printf_i+0x21e>
 800e458:	e7eb      	b.n	800e432 <_printf_i+0x212>
 800e45a:	2500      	movs	r5, #0
 800e45c:	f104 0619 	add.w	r6, r4, #25
 800e460:	e7f5      	b.n	800e44e <_printf_i+0x22e>
 800e462:	bf00      	nop
 800e464:	0800ed91 	.word	0x0800ed91
 800e468:	0800eda2 	.word	0x0800eda2

0800e46c <_realloc_r>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	4607      	mov	r7, r0
 800e470:	4614      	mov	r4, r2
 800e472:	460e      	mov	r6, r1
 800e474:	b921      	cbnz	r1, 800e480 <_realloc_r+0x14>
 800e476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e47a:	4611      	mov	r1, r2
 800e47c:	f7ff bbec 	b.w	800dc58 <_malloc_r>
 800e480:	b922      	cbnz	r2, 800e48c <_realloc_r+0x20>
 800e482:	f7ff fb99 	bl	800dbb8 <_free_r>
 800e486:	4625      	mov	r5, r4
 800e488:	4628      	mov	r0, r5
 800e48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e48c:	f000 f814 	bl	800e4b8 <_malloc_usable_size_r>
 800e490:	42a0      	cmp	r0, r4
 800e492:	d20f      	bcs.n	800e4b4 <_realloc_r+0x48>
 800e494:	4621      	mov	r1, r4
 800e496:	4638      	mov	r0, r7
 800e498:	f7ff fbde 	bl	800dc58 <_malloc_r>
 800e49c:	4605      	mov	r5, r0
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d0f2      	beq.n	800e488 <_realloc_r+0x1c>
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4622      	mov	r2, r4
 800e4a6:	f7ff fb57 	bl	800db58 <memcpy>
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	f7ff fb83 	bl	800dbb8 <_free_r>
 800e4b2:	e7e9      	b.n	800e488 <_realloc_r+0x1c>
 800e4b4:	4635      	mov	r5, r6
 800e4b6:	e7e7      	b.n	800e488 <_realloc_r+0x1c>

0800e4b8 <_malloc_usable_size_r>:
 800e4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4bc:	1f18      	subs	r0, r3, #4
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	bfbc      	itt	lt
 800e4c2:	580b      	ldrlt	r3, [r1, r0]
 800e4c4:	18c0      	addlt	r0, r0, r3
 800e4c6:	4770      	bx	lr

0800e4c8 <_init>:
 800e4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ca:	bf00      	nop
 800e4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ce:	bc08      	pop	{r3}
 800e4d0:	469e      	mov	lr, r3
 800e4d2:	4770      	bx	lr

0800e4d4 <_fini>:
 800e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d6:	bf00      	nop
 800e4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4da:	bc08      	pop	{r3}
 800e4dc:	469e      	mov	lr, r3
 800e4de:	4770      	bx	lr
